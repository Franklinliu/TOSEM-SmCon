This is Ultimate 0.1.24-9993c5c-m
[2020-05-30 21:14:44,305 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-05-30 21:14:44,306 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-05-30 21:14:44,316 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-05-30 21:14:44,317 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-05-30 21:14:44,318 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-05-30 21:14:44,320 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-05-30 21:14:44,321 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-05-30 21:14:44,323 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-05-30 21:14:44,324 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-05-30 21:14:44,325 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-05-30 21:14:44,325 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-05-30 21:14:44,326 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-05-30 21:14:44,328 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-05-30 21:14:44,329 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-05-30 21:14:44,330 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-05-30 21:14:44,331 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-05-30 21:14:44,332 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-05-30 21:14:44,334 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-05-30 21:14:44,358 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-05-30 21:14:44,359 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-05-30 21:14:44,361 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-05-30 21:14:44,363 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-05-30 21:14:44,363 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-05-30 21:14:44,363 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-05-30 21:14:44,364 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-05-30 21:14:44,364 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-05-30 21:14:44,365 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-05-30 21:14:44,366 INFO  L174        SettingsManager]: Resetting UtopiaLiveness preferences to default values
[2020-05-30 21:14:44,366 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-05-30 21:14:44,366 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-05-30 21:14:44,367 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-05-30 21:14:44,368 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-05-30 21:14:44,369 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-05-30 21:14:44,369 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-05-30 21:14:44,370 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-05-30 21:14:44,370 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-05-30 21:14:44,371 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-05-30 21:14:44,371 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-05-30 21:14:44,371 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-05-30 21:14:44,372 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-05-30 21:14:44,373 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-05-30 21:14:44,373 INFO  L98         SettingsManager]: Beginning loading settings from /Users/jon/Documents/Research/masterUltimate/SmartPulse/settings.epf
[2020-05-30 21:14:44,382 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-05-30 21:14:44,382 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-05-30 21:14:44,383 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-05-30 21:14:44,383 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-05-30 21:14:44,384 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/Users/jon/Documents/Research/devUltimate/ltl2ba
[2020-05-30 21:14:44,384 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-05-30 21:14:44,384 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-05-30 21:14:44,384 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-05-30 21:14:44,384 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-05-30 21:14:44,384 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-05-30 21:14:44,384 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-05-30 21:14:44,384 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-05-30 21:14:44,384 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-05-30 21:14:44,384 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-05-30 21:14:44,385 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-05-30 21:14:44,385 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-05-30 21:14:44,385 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-05-30 21:14:44,385 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-05-30 21:14:44,385 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-05-30 21:14:44,385 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-05-30 21:14:44,385 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-05-30 21:14:44,385 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-05-30 21:14:44,385 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-05-30 21:14:44,385 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-05-30 21:14:44,385 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-05-30 21:14:44,385 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-05-30 21:14:44,404 INFO  L81    nceAwareModelManager]: Repository-Root is: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T
[2020-05-30 21:14:44,414 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-05-30 21:14:44,415 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-05-30 21:14:44,416 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-05-30 21:14:44,416 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-05-30 21:14:44,418 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/ValidatorAuction/single-callback/L2-ValidatorAuction.bpl
[2020-05-30 21:14:44,418 INFO  L111           BoogieParser]: Parsing: '/Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/ValidatorAuction/single-callback/L2-ValidatorAuction.bpl'
[2020-05-30 21:14:44,485 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-05-30 21:14:44,489 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-05-30 21:14:44,489 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-05-30 21:14:44,489 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-05-30 21:14:44,489 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-05-30 21:14:44,502 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "L2-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:14:44" (1/1) ...
[2020-05-30 21:14:44,503 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "L2-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:14:44" (1/1) ...
[2020-05-30 21:14:44,530 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "L2-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:14:44" (1/1) ...
[2020-05-30 21:14:44,530 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "L2-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:14:44" (1/1) ...
[2020-05-30 21:14:44,549 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "L2-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:14:44" (1/1) ...
[2020-05-30 21:14:44,558 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "L2-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:14:44" (1/1) ...
[2020-05-30 21:14:44,567 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "L2-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:14:44" (1/1) ...
[2020-05-30 21:14:44,578 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-05-30 21:14:44,579 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-05-30 21:14:44,579 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-05-30 21:14:44,582 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-05-30 21:14:44,586 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "L2-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:14:44" (1/1) ...
[2020-05-30 21:14:44,602 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: []((finished(ValidatorAuction.closeAuction, (low == lowestSlotPrice_ValidatorAuction[this]))) ==> (<>(finished(send(from, to, amt), (to == user && amt == fsum(ValidatorAuction.bid, 2, (user == msg.sender)) - low)))))
[2020-05-30 21:14:44,608 INFO  L979   opiaSpecLangObserver]: Successfully lexed: []((finished(ValidatorAuction.closeAuction, (low == lowestSlotPrice_ValidatorAuction[this]))) ==> (<>(finished(send(from, to, amt), (to == user && amt == fsum(ValidatorAuction.bid, 2, (user == msg.sender)) - low)))))
[2020-05-30 21:14:44,615 INFO  L981   opiaSpecLangObserver]: Successfully parsed: []((finished(ValidatorAuction.closeAuction, (low == lowestSlotPrice_ValidatorAuction[this]))) ==> (<>(finished(send(from, to, amt), (to == user && amt == fsum(ValidatorAuction.bid, 2, (user == msg.sender)) - low)))))
[2020-05-30 21:14:44,617 INFO  L599   opiaSpecLangObserver]: Parsed user==msg.sender to BinaryExpression[COMPEQ,IdentifierExpression[user,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,bid_ValidatorAuction>]]
[2020-05-30 21:14:44,619 INFO  L599   opiaSpecLangObserver]: Parsed low==lowestSlotPrice_ValidatorAuction[this] to BinaryExpression[COMPEQ,IdentifierExpression[low,GLOBAL],ArrayAccessExpression[IdentifierExpression[lowestSlotPrice_ValidatorAuction,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,closeAuction_ValidatorAuction>]]]]
[2020-05-30 21:14:44,621 INFO  L599   opiaSpecLangObserver]: Parsed ( to==user && amount==( fsum_bid_ValidatorAuction_2_0 - low ) ) to BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[to,<IMPLEMENTATION_INPARAM,send__success>],IdentifierExpression[user,GLOBAL]],BinaryExpression[COMPEQ,IdentifierExpression[amount,<IMPLEMENTATION_INPARAM,send__success>],BinaryExpression[ARITHMINUS,IdentifierExpression[fsum_bid_ValidatorAuction_2_0,GLOBAL],IdentifierExpression[low,GLOBAL]]]]
[2020-05-30 21:14:44,622 INFO  L968   opiaSpecLangObserver]: Compiling: []((finished(ValidatorAuction.closeAuction, (low == lowestSlotPrice_ValidatorAuction[this]))) ==> (<>(finished(send(from, to, amt), (to == user && amt == fsum(ValidatorAuction.bid, 2, (user == msg.sender)) - low)))))
[2020-05-30 21:14:44,622 INFO  L970   opiaSpecLangObserver]: Compiled to ( []( AP(success_closeAuction_ValidatorAuction0) ==> ( <>AP(success_send__success0) ) ) )
[2020-05-30 21:14:44,623 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: (<>(finished(ValidatorAuction.bid, (user == msg.sender)))) && (<>(finished(ValidatorAuction.withdraw, (user == msg.sender && auctionState_ValidatorAuction[this] == 3))))
[2020-05-30 21:14:44,623 INFO  L979   opiaSpecLangObserver]: Successfully lexed: (<>(finished(ValidatorAuction.bid, (user == msg.sender)))) && (<>(finished(ValidatorAuction.withdraw, (user == msg.sender && auctionState_ValidatorAuction[this] == 3))))
[2020-05-30 21:14:44,623 INFO  L981   opiaSpecLangObserver]: Successfully parsed: (<>(finished(ValidatorAuction.bid, (user == msg.sender)))) && (<>(finished(ValidatorAuction.withdraw, (user == msg.sender && auctionState_ValidatorAuction[this] == 3))))
[2020-05-30 21:14:44,624 INFO  L599   opiaSpecLangObserver]: Parsed user==msg.sender to BinaryExpression[COMPEQ,IdentifierExpression[user,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,bid_ValidatorAuction>]]
[2020-05-30 21:14:44,625 INFO  L599   opiaSpecLangObserver]: Parsed ( user==msg.sender && auctionState_ValidatorAuction[this]==3 ) to BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[user,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,withdraw_ValidatorAuction>]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[auctionState_ValidatorAuction,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,withdraw_ValidatorAuction>]]],IntegerLiteral[3]]]
[2020-05-30 21:14:44,626 INFO  L968   opiaSpecLangObserver]: Compiling: (<>(finished(ValidatorAuction.bid, (user == msg.sender)))) && (<>(finished(ValidatorAuction.withdraw, (user == msg.sender && auctionState_ValidatorAuction[this] == 3))))
[2020-05-30 21:14:44,627 INFO  L970   opiaSpecLangObserver]: Compiled to ( ( <>AP(success_bid_ValidatorAuction0) ) && ( <>AP(success_withdraw_ValidatorAuction0) ) )
Executed UtopiaSpecLang
[2020-05-30 21:14:44,636 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 09:14:44 PropertyContainer
[2020-05-30 21:14:44,636 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-05-30 21:14:44,636 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-05-30 21:14:44,636 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-05-30 21:14:44,636 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-05-30 21:14:44,637 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "L2-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:14:44" (1/2) ...
[2020-05-30 21:14:44,638 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-30 21:14:44,638 INFO  L120   oogiePrinterObserver]: Writing to file /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-30 21:14:44,653 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 09:14:44" (2/2) ...
[2020-05-30 21:14:44,653 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-05-30 21:14:44,653 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-05-30 21:14:44,653 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-05-30 21:14:44,653 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-05-30 21:14:44,654 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "L2-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:14:44" (1/2) ...
[2020-05-30 21:14:44,698 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-05-30 21:14:44,698 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-05-30 21:14:44,698 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-05-30 21:14:44,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-05-30 21:14:44,699 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership_Ownable
[2020-05-30 21:14:44,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership_Ownable
[2020-05-30 21:14:44,699 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLockerInterface_DepositLockerInterface_NoBaseCtor__success
[2020-05-30 21:14:44,699 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLockerInterface_DepositLockerInterface
[2020-05-30 21:14:44,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLockerInterface_DepositLockerInterface
[2020-05-30 21:14:44,700 INFO  L130     BoogieDeclarations]: Found specification of procedure slash_DepositLockerInterface
[2020-05-30 21:14:44,700 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLocker_DepositLocker_NoBaseCtor__success
[2020-05-30 21:14:44,700 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLocker_DepositLocker
[2020-05-30 21:14:44,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLocker_DepositLocker
[2020-05-30 21:14:44,700 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_DepositLocker__success
[2020-05-30 21:14:44,700 INFO  L130     BoogieDeclarations]: Found specification of procedure init_DepositLocker
[2020-05-30 21:14:44,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_DepositLocker
[2020-05-30 21:14:44,700 INFO  L130     BoogieDeclarations]: Found specification of procedure registerDepositor_DepositLocker
[2020-05-30 21:14:44,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure registerDepositor_DepositLocker
[2020-05-30 21:14:44,700 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_DepositLocker
[2020-05-30 21:14:44,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_DepositLocker
[2020-05-30 21:14:44,700 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_DepositLocker
[2020-05-30 21:14:44,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_DepositLocker
[2020-05-30 21:14:44,701 INFO  L130     BoogieDeclarations]: Found specification of procedure slash_DepositLocker
[2020-05-30 21:14:44,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure slash_DepositLocker
[2020-05-30 21:14:44,701 INFO  L130     BoogieDeclarations]: Found specification of procedure ValidatorAuction_ValidatorAuction_NoBaseCtor__success
[2020-05-30 21:14:44,701 INFO  L130     BoogieDeclarations]: Found specification of procedure ValidatorAuction_ValidatorAuction
[2020-05-30 21:14:44,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure ValidatorAuction_ValidatorAuction
[2020-05-30 21:14:44,701 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ValidatorAuction__success
[2020-05-30 21:14:44,701 INFO  L130     BoogieDeclarations]: Found specification of procedure bid_ValidatorAuction
[2020-05-30 21:14:44,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure bid_ValidatorAuction
[2020-05-30 21:14:44,701 INFO  L130     BoogieDeclarations]: Found specification of procedure startAuction_ValidatorAuction
[2020-05-30 21:14:44,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure startAuction_ValidatorAuction
[2020-05-30 21:14:44,701 INFO  L130     BoogieDeclarations]: Found specification of procedure depositBids_ValidatorAuction
[2020-05-30 21:14:44,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure depositBids_ValidatorAuction
[2020-05-30 21:14:44,701 INFO  L130     BoogieDeclarations]: Found specification of procedure closeAuction_ValidatorAuction
[2020-05-30 21:14:44,702 INFO  L138     BoogieDeclarations]: Found implementation of procedure closeAuction_ValidatorAuction
[2020-05-30 21:14:44,702 INFO  L130     BoogieDeclarations]: Found specification of procedure addToWhitelist_ValidatorAuction
[2020-05-30 21:14:44,702 INFO  L138     BoogieDeclarations]: Found implementation of procedure addToWhitelist_ValidatorAuction
[2020-05-30 21:14:44,702 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_ValidatorAuction
[2020-05-30 21:14:44,702 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_ValidatorAuction
[2020-05-30 21:14:44,702 INFO  L130     BoogieDeclarations]: Found specification of procedure currentPrice_ValidatorAuction
[2020-05-30 21:14:44,702 INFO  L138     BoogieDeclarations]: Found implementation of procedure currentPrice_ValidatorAuction
[2020-05-30 21:14:44,702 INFO  L130     BoogieDeclarations]: Found specification of procedure priceAtElapsedTime_ValidatorAuction
[2020-05-30 21:14:44,702 INFO  L138     BoogieDeclarations]: Found implementation of procedure priceAtElapsedTime_ValidatorAuction
[2020-05-30 21:14:44,702 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawAfterAuctionEnded_ValidatorAuction__success
[2020-05-30 21:14:44,702 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawAfterAuctionFailed_ValidatorAuction__success
[2020-05-30 21:14:44,702 INFO  L130     BoogieDeclarations]: Found specification of procedure transitionToDepositPending_ValidatorAuction__success
[2020-05-30 21:14:44,702 INFO  L130     BoogieDeclarations]: Found specification of procedure transitionToAuctionFailed_ValidatorAuction__success
[2020-05-30 21:14:44,702 INFO  L130     BoogieDeclarations]: Found specification of procedure isSenderContract_ValidatorAuction__success
[2020-05-30 21:14:44,703 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-05-30 21:14:44,703 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-05-30 21:14:44,703 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-05-30 21:14:44,703 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-05-30 21:14:44,703 INFO  L130     BoogieDeclarations]: Found specification of procedure isInitialised_pre__success
[2020-05-30 21:14:44,703 INFO  L130     BoogieDeclarations]: Found specification of procedure isDeposited_pre__success
[2020-05-30 21:14:44,703 INFO  L130     BoogieDeclarations]: Found specification of procedure isNotDeposited_pre__success
[2020-05-30 21:14:44,703 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyDepositorsProxy_pre__success
[2020-05-30 21:14:44,703 INFO  L130     BoogieDeclarations]: Found specification of procedure stateIs_pre__success
[2020-05-30 21:14:44,703 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-05-30 21:14:44,703 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-05-30 21:14:44,703 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DepositLockerInterface
[2020-05-30 21:14:44,704 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_DepositLockerInterface
[2020-05-30 21:14:44,704 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DepositLocker
[2020-05-30 21:14:44,704 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_DepositLocker
[2020-05-30 21:14:44,704 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ValidatorAuction
[2020-05-30 21:14:44,704 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-05-30 21:14:44,704 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-05-30 21:14:44,704 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-05-30 21:14:44,704 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-05-30 21:14:44,704 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-05-30 21:14:44,704 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership_Ownable__success
[2020-05-30 21:14:44,704 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership_Ownable__fail
[2020-05-30 21:14:44,705 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLockerInterface_DepositLockerInterface_NoBaseCtor__fail
[2020-05-30 21:14:44,705 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLockerInterface_DepositLockerInterface__success
[2020-05-30 21:14:44,705 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLockerInterface_DepositLockerInterface__fail
[2020-05-30 21:14:44,705 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLocker_DepositLocker_NoBaseCtor__fail
[2020-05-30 21:14:44,705 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLocker_DepositLocker__success
[2020-05-30 21:14:44,705 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLocker_DepositLocker__fail
[2020-05-30 21:14:44,705 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_DepositLocker__fail
[2020-05-30 21:14:44,705 INFO  L130     BoogieDeclarations]: Found specification of procedure init_DepositLocker__success
[2020-05-30 21:14:44,705 INFO  L130     BoogieDeclarations]: Found specification of procedure init_DepositLocker__fail
[2020-05-30 21:14:44,706 INFO  L130     BoogieDeclarations]: Found specification of procedure registerDepositor_DepositLocker__success
[2020-05-30 21:14:44,706 INFO  L130     BoogieDeclarations]: Found specification of procedure registerDepositor_DepositLocker__fail
[2020-05-30 21:14:44,706 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_DepositLocker__success
[2020-05-30 21:14:44,706 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_DepositLocker__fail
[2020-05-30 21:14:44,706 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_DepositLocker__success
[2020-05-30 21:14:44,706 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_DepositLocker__fail
[2020-05-30 21:14:44,706 INFO  L130     BoogieDeclarations]: Found specification of procedure slash_DepositLocker__success
[2020-05-30 21:14:44,706 INFO  L130     BoogieDeclarations]: Found specification of procedure slash_DepositLocker__fail
[2020-05-30 21:14:44,706 INFO  L130     BoogieDeclarations]: Found specification of procedure ValidatorAuction_ValidatorAuction_NoBaseCtor__fail
[2020-05-30 21:14:44,707 INFO  L130     BoogieDeclarations]: Found specification of procedure ValidatorAuction_ValidatorAuction__success
[2020-05-30 21:14:44,707 INFO  L130     BoogieDeclarations]: Found specification of procedure ValidatorAuction_ValidatorAuction__fail
[2020-05-30 21:14:44,707 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ValidatorAuction__fail
[2020-05-30 21:14:44,707 INFO  L130     BoogieDeclarations]: Found specification of procedure bid_ValidatorAuction__success
[2020-05-30 21:14:44,707 INFO  L130     BoogieDeclarations]: Found specification of procedure bid_ValidatorAuction__fail
[2020-05-30 21:14:44,707 INFO  L130     BoogieDeclarations]: Found specification of procedure startAuction_ValidatorAuction__success
[2020-05-30 21:14:44,707 INFO  L130     BoogieDeclarations]: Found specification of procedure startAuction_ValidatorAuction__fail
[2020-05-30 21:14:44,707 INFO  L130     BoogieDeclarations]: Found specification of procedure depositBids_ValidatorAuction__success
[2020-05-30 21:14:44,708 INFO  L130     BoogieDeclarations]: Found specification of procedure depositBids_ValidatorAuction__fail
[2020-05-30 21:14:44,708 INFO  L130     BoogieDeclarations]: Found specification of procedure closeAuction_ValidatorAuction__success
[2020-05-30 21:14:44,708 INFO  L130     BoogieDeclarations]: Found specification of procedure closeAuction_ValidatorAuction__fail
[2020-05-30 21:14:44,708 INFO  L130     BoogieDeclarations]: Found specification of procedure addToWhitelist_ValidatorAuction__success
[2020-05-30 21:14:44,708 INFO  L130     BoogieDeclarations]: Found specification of procedure addToWhitelist_ValidatorAuction__fail
[2020-05-30 21:14:44,708 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_ValidatorAuction__success
[2020-05-30 21:14:44,708 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_ValidatorAuction__fail
[2020-05-30 21:14:44,709 INFO  L130     BoogieDeclarations]: Found specification of procedure currentPrice_ValidatorAuction__success
[2020-05-30 21:14:44,709 INFO  L130     BoogieDeclarations]: Found specification of procedure currentPrice_ValidatorAuction__fail
[2020-05-30 21:14:44,709 INFO  L130     BoogieDeclarations]: Found specification of procedure priceAtElapsedTime_ValidatorAuction__success
[2020-05-30 21:14:44,709 INFO  L130     BoogieDeclarations]: Found specification of procedure priceAtElapsedTime_ValidatorAuction__fail
[2020-05-30 21:14:44,709 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawAfterAuctionEnded_ValidatorAuction__fail
[2020-05-30 21:14:44,709 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawAfterAuctionFailed_ValidatorAuction__fail
[2020-05-30 21:14:44,709 INFO  L130     BoogieDeclarations]: Found specification of procedure transitionToDepositPending_ValidatorAuction__fail
[2020-05-30 21:14:44,709 INFO  L130     BoogieDeclarations]: Found specification of procedure transitionToAuctionFailed_ValidatorAuction__fail
[2020-05-30 21:14:44,710 INFO  L130     BoogieDeclarations]: Found specification of procedure isSenderContract_ValidatorAuction__fail
[2020-05-30 21:14:44,710 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-05-30 21:14:44,710 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-05-30 21:14:44,710 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-05-30 21:14:44,710 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-05-30 21:14:44,710 INFO  L130     BoogieDeclarations]: Found specification of procedure isInitialised_pre__fail
[2020-05-30 21:14:44,710 INFO  L130     BoogieDeclarations]: Found specification of procedure isDeposited_pre__fail
[2020-05-30 21:14:44,710 INFO  L130     BoogieDeclarations]: Found specification of procedure isNotDeposited_pre__fail
[2020-05-30 21:14:44,710 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyDepositorsProxy_pre__fail
[2020-05-30 21:14:44,711 INFO  L130     BoogieDeclarations]: Found specification of procedure stateIs_pre__fail
[2020-05-30 21:14:44,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-05-30 21:14:44,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-05-30 21:14:44,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-05-30 21:14:44,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-05-30 21:14:44,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-05-30 21:14:44,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-05-30 21:14:44,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership_Ownable__fail
[2020-05-30 21:14:44,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership_Ownable__success
[2020-05-30 21:14:44,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLockerInterface_DepositLockerInterface_NoBaseCtor__fail
[2020-05-30 21:14:44,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLockerInterface_DepositLockerInterface_NoBaseCtor__success
[2020-05-30 21:14:44,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLockerInterface_DepositLockerInterface__fail
[2020-05-30 21:14:44,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLockerInterface_DepositLockerInterface__success
[2020-05-30 21:14:44,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLocker_DepositLocker_NoBaseCtor__fail
[2020-05-30 21:14:44,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLocker_DepositLocker_NoBaseCtor__success
[2020-05-30 21:14:44,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLocker_DepositLocker__fail
[2020-05-30 21:14:44,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLocker_DepositLocker__success
[2020-05-30 21:14:44,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_DepositLocker__fail
[2020-05-30 21:14:44,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_DepositLocker__success
[2020-05-30 21:14:44,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_DepositLocker__fail
[2020-05-30 21:14:44,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_DepositLocker__success
[2020-05-30 21:14:44,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure registerDepositor_DepositLocker__fail
[2020-05-30 21:14:44,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure registerDepositor_DepositLocker__success
[2020-05-30 21:14:44,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_DepositLocker__fail
[2020-05-30 21:14:44,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_DepositLocker__success
[2020-05-30 21:14:44,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_DepositLocker__fail
[2020-05-30 21:14:44,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_DepositLocker__success
[2020-05-30 21:14:44,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure slash_DepositLocker__fail
[2020-05-30 21:14:44,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure slash_DepositLocker__success
[2020-05-30 21:14:44,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure ValidatorAuction_ValidatorAuction_NoBaseCtor__fail
[2020-05-30 21:14:44,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure ValidatorAuction_ValidatorAuction_NoBaseCtor__success
[2020-05-30 21:14:44,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure ValidatorAuction_ValidatorAuction__fail
[2020-05-30 21:14:44,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure ValidatorAuction_ValidatorAuction__success
[2020-05-30 21:14:44,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ValidatorAuction__fail
[2020-05-30 21:14:44,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ValidatorAuction__success
[2020-05-30 21:14:44,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure bid_ValidatorAuction__fail
[2020-05-30 21:14:44,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure bid_ValidatorAuction__success
[2020-05-30 21:14:44,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure startAuction_ValidatorAuction__fail
[2020-05-30 21:14:44,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure startAuction_ValidatorAuction__success
[2020-05-30 21:14:44,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure depositBids_ValidatorAuction__fail
[2020-05-30 21:14:44,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure depositBids_ValidatorAuction__success
[2020-05-30 21:14:44,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure closeAuction_ValidatorAuction__fail
[2020-05-30 21:14:44,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure closeAuction_ValidatorAuction__success
[2020-05-30 21:14:44,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure addToWhitelist_ValidatorAuction__fail
[2020-05-30 21:14:44,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure addToWhitelist_ValidatorAuction__success
[2020-05-30 21:14:44,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_ValidatorAuction__fail
[2020-05-30 21:14:44,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_ValidatorAuction__success
[2020-05-30 21:14:44,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure currentPrice_ValidatorAuction__fail
[2020-05-30 21:14:44,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure currentPrice_ValidatorAuction__success
[2020-05-30 21:14:44,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure priceAtElapsedTime_ValidatorAuction__fail
[2020-05-30 21:14:44,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure priceAtElapsedTime_ValidatorAuction__success
[2020-05-30 21:14:44,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawAfterAuctionEnded_ValidatorAuction__fail
[2020-05-30 21:14:44,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawAfterAuctionEnded_ValidatorAuction__success
[2020-05-30 21:14:44,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawAfterAuctionFailed_ValidatorAuction__fail
[2020-05-30 21:14:44,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawAfterAuctionFailed_ValidatorAuction__success
[2020-05-30 21:14:44,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure transitionToDepositPending_ValidatorAuction__fail
[2020-05-30 21:14:44,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure transitionToDepositPending_ValidatorAuction__success
[2020-05-30 21:14:44,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure transitionToAuctionFailed_ValidatorAuction__fail
[2020-05-30 21:14:44,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure transitionToAuctionFailed_ValidatorAuction__success
[2020-05-30 21:14:44,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure isSenderContract_ValidatorAuction__fail
[2020-05-30 21:14:44,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure isSenderContract_ValidatorAuction__success
[2020-05-30 21:14:44,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-05-30 21:14:44,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-05-30 21:14:44,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-05-30 21:14:44,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-05-30 21:14:44,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-05-30 21:14:44,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-05-30 21:14:44,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-05-30 21:14:44,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-05-30 21:14:44,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure isInitialised_pre__fail
[2020-05-30 21:14:44,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure isInitialised_pre__success
[2020-05-30 21:14:44,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure isDeposited_pre__fail
[2020-05-30 21:14:44,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure isDeposited_pre__success
[2020-05-30 21:14:44,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure isNotDeposited_pre__fail
[2020-05-30 21:14:44,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure isNotDeposited_pre__success
[2020-05-30 21:14:44,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyDepositorsProxy_pre__fail
[2020-05-30 21:14:44,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyDepositorsProxy_pre__success
[2020-05-30 21:14:44,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure stateIs_pre__fail
[2020-05-30 21:14:44,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure stateIs_pre__success
[2020-05-30 21:14:44,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-05-30 21:14:44,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-05-30 21:14:44,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DepositLockerInterface
[2020-05-30 21:14:44,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_DepositLockerInterface
[2020-05-30 21:14:44,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DepositLocker
[2020-05-30 21:14:44,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_DepositLocker
[2020-05-30 21:14:44,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ValidatorAuction
[2020-05-30 21:14:44,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-05-30 21:14:44,718 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-05-30 21:14:44,719 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-05-30 21:14:44,845 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 21:14:44,966 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 21:14:45,134 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 21:14:45,274 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 21:14:45,289 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 21:14:45,289 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 21:14:45,334 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-05-30 21:14:45,335 INFO  L286             CfgBuilder]: Removed 4 assue(true) statements.
[2020-05-30 21:14:45,336 INFO  L202        PluginConnector]: Adding new model L2-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 09:14:45 BoogieIcfgContainer
[2020-05-30 21:14:45,336 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 09:14:44" (2/2) ...
[2020-05-30 21:14:45,336 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-05-30 21:14:45,337 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@34804b05 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 09:14:45, skipping insertion in model container
[2020-05-30 21:14:45,337 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-05-30 21:14:45,337 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-05-30 21:14:45,337 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-05-30 21:14:45,338 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-05-30 21:14:45,338 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "L2-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:14:44" (1/3) ...
[2020-05-30 21:14:45,339 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@2499e5c6 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 09:14:45, skipping insertion in model container
[2020-05-30 21:14:45,339 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 09:14:44" (2/3) ...
No working directory specified, using /Users/jon/Documents/Research/devUltimate/ltl2ba
Starting monitored process 1 with /Users/jon/Documents/Research/devUltimate/ltl2ba -f  ( ( <>a ) && ( <>b ) ) && ! ( ( [] ( c -> ( <>d ) ) ) )  (exit command is null, workingDir is null)
[2020-05-30 21:14:45,382 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 09:14:45 NWAContainer
[2020-05-30 21:14:45,382 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-05-30 21:14:45,382 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-05-30 21:14:45,382 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-05-30 21:14:45,383 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-05-30 21:14:45,383 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "L2-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 09:14:45" (3/4) ...
[2020-05-30 21:14:45,384 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@6772d34a and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 09:14:45, skipping insertion in model container
[2020-05-30 21:14:45,384 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 09:14:45" (4/4) ...
[2020-05-30 21:14:45,387 INFO  L104   BuchiProductObserver]: Initial property automaton 8 locations, 27 edges
[2020-05-30 21:14:45,390 INFO  L110   BuchiProductObserver]: Initial RCFG 2616 locations, 3321 edges
[2020-05-30 21:14:45,390 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-05-30 21:14:45,400 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-05-30 21:14:54,926 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-05-30 21:14:54,956 INFO  L110   BuchiProductObserver]: BuchiProgram size 24143 locations, 95400 edges
[2020-05-30 21:14:54,956 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 09:14:54 BoogieIcfgContainer
[2020-05-30 21:14:54,956 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-05-30 21:14:54,956 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-05-30 21:14:54,956 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-05-30 21:14:54,958 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-05-30 21:14:54,958 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 09:14:54" (1/1) ...
[2020-05-30 21:14:55,366 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLocker_DepositLocker__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:14:55,366 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLocker_DepositLocker__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:14:55,366 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLocker_DepositLocker__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:14:55,366 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLocker_DepositLocker__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:14:55,366 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLocker_DepositLocker__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:14:55,366 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLocker_DepositLocker__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:14:55,371 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLocker_DepositLocker__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:14:55,371 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLocker_DepositLocker__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:14:55,371 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLocker_DepositLocker__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:14:55,372 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLocker_DepositLocker__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:14:55,372 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLocker_DepositLocker__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:14:55,372 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLocker_DepositLocker__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:14:55,378 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:14:55,378 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:14:55,378 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:14:55,378 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:14:55,378 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:14:55,378 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:14:55,379 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:14:55,379 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:14:55,379 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:14:55,379 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:14:55,379 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:14:55,379 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:14:55,380 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:14:55,380 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:14:55,380 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:14:55,380 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:14:55,380 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:14:55,380 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:14:55,384 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:14:55,384 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:14:55,384 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:14:55,384 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:14:55,384 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:14:55,384 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:14:55,385 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:14:55,385 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:14:55,385 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:14:55,385 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:14:55,385 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:14:55,385 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:14:55,388 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:14:55,389 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:14:55,389 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:14:55,389 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:14:55,389 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:14:55,389 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:14:55,393 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:14:55,393 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:14:55,393 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:14:55,393 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:14:55,393 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:14:55,393 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:14:55,393 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:14:55,393 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:14:55,393 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:14:55,393 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:14:55,393 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:14:55,393 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:14:55,452 INFO  L313           BlockEncoder]: Initial Icfg 24143 locations, 95400 edges
[2020-05-30 21:14:55,452 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-05-30 21:14:55,453 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-05-30 21:14:55,453 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-05-30 21:14:55,454 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-05-30 21:14:55,500 INFO  L70    emoveInfeasibleEdges]: Removed 629 edges and 44 locations because of local infeasibility
[2020-05-30 21:14:55,532 INFO  L70        RemoveSinkStates]: Removed 18 edges and 4 locations by removing sink states
[2020-05-30 21:14:55,610 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-05-30 21:14:55,635 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-05-30 21:14:55,666 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-05-30 21:14:55,667 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-05-30 21:14:55,691 INFO  L313           BlockEncoder]: Encoded RCFG 23975 locations, 94367 edges
[2020-05-30 21:14:55,692 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 30.05 09:14:55 BasicIcfg
[2020-05-30 21:14:55,692 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-05-30 21:14:55,692 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-05-30 21:14:55,692 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-05-30 21:14:55,694 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-05-30 21:14:55,695 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 21:14:55,695 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L2-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:14:44" (1/6) ...
[2020-05-30 21:14:55,696 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5d38a8f3 and model type L2-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 30.05 09:14:55, skipping insertion in model container
[2020-05-30 21:14:55,696 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 21:14:55,696 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 09:14:44" (2/6) ...
[2020-05-30 21:14:55,696 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5d38a8f3 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 30.05 09:14:55, skipping insertion in model container
[2020-05-30 21:14:55,696 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 21:14:55,696 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L2-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 09:14:45" (3/6) ...
[2020-05-30 21:14:55,696 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5d38a8f3 and model type L2-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 30.05 09:14:55, skipping insertion in model container
[2020-05-30 21:14:55,697 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 21:14:55,697 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 09:14:45" (4/6) ...
[2020-05-30 21:14:55,697 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5d38a8f3 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 30.05 09:14:55, skipping insertion in model container
[2020-05-30 21:14:55,697 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 21:14:55,697 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 09:14:54" (5/6) ...
[2020-05-30 21:14:55,697 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5d38a8f3 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 30.05 09:14:55, skipping insertion in model container
[2020-05-30 21:14:55,697 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 21:14:55,697 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 30.05 09:14:55" (6/6) ...
[2020-05-30 21:14:55,698 INFO  L404   chiAutomizerObserver]: Analyzing ICFG L2-ValidatorAuction.bpl_BEv2
[2020-05-30 21:14:55,730 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-05-30 21:14:55,731 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-05-30 21:14:55,731 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-05-30 21:14:55,731 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-05-30 21:14:55,731 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-05-30 21:14:55,731 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-05-30 21:14:55,731 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-05-30 21:14:55,731 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-05-30 21:14:55,731 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-05-30 21:14:55,928 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 23975 states.
[2020-05-30 21:14:56,180 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:14:56,180 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:14:56,180 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:14:56,188 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:14:56,188 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:14:56,188 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-05-30 21:14:56,188 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 23975 states.
[2020-05-30 21:14:56,327 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:14:56,327 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:14:56,327 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:14:56,329 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:14:56,329 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_withdraw_ValidatorAuction0 := false;
[L7]                 success_bid_ValidatorAuction0 := false;
[L7]                 fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                 success_send__success0 := false;
[L7]                 success_closeAuction_ValidatorAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc low;
[L7]                 havoc user;
[L5568]              assume null == 0;
[L5569]  CALL        call this := FreshRefGenerator__success();
[L1807]              havoc newRef;
[L1808]              assume Alloc[newRef] == false;
[L1809]              Alloc[newRef] := true;
[L1810]              assume newRef != null;
[L5569]  RET         call this := FreshRefGenerator__success();
[L5570]              assume now >= 0;
[L5571]              assume DType[this] == ValidatorAuction;
[L5572]              gas := gas - 53000;
[L5573]  CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]               havoc __exception;
[L753]               revert := false;
[L754]   COND FALSE  !(__exception)
[L796]   CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]              assume msgsender_MSG != null;
[L1828]              Balance[this] := 0;
[L1829]              owner_Ownable[this] := null;
[L1830]              owner_Ownable[this] := msgsender_MSG;
[L1848]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  COND FALSE  !(revert)
[L2878]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND TRUE   revert
[L796]   RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]               assume !revert && gas >= 0;
[L5573]  RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]              assume !revert && gas >= 0;

Loop:
[L5577]  CALL        call CorralChoice_ValidatorAuction(this);
[L5446]              havoc msgsender_MSG;
[L5447]              havoc msgvalue_MSG;
[L5448]              havoc choice;
[L5449]              havoc newOwner_s43;
[L5450]              havoc _startPriceInWei_s578;
[L5451]              havoc _auctionDurationInDays_s578;
[L5452]              havoc _minimalNumberOfParticipants_s578;
[L5453]              havoc _maximalNumberOfParticipants_s578;
[L5454]              havoc _depositLocker_s578;
[L5455]              havoc addressesToWhitelist_s852;
[L5456]              havoc __ret_0_currentPrice;
[L5457]              havoc secondsSinceStart_s978;
[L5458]              havoc __ret_0_priceAtElapsedTime;
[L5459]              havoc tmpNow;
[L5460]              havoc gas;
[L5461]              assume gas > 4000000 && gas <= 8000000;
[L5462]              tmpNow := now;
[L5463]              havoc now;
[L5464]              assume now > tmpNow;
[L5465]              assume msgsender_MSG != null;
[L5466]              assume DType[msgsender_MSG] != Ownable;
[L5467]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]              assume DType[msgsender_MSG] != DepositLocker;
[L5469]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]              Alloc[msgsender_MSG] := true;
[L5471]  COND TRUE   choice == 9
[L5473]              gas := gas - 21000;
[L5474]  COND FALSE  !(gas >= 0)
[L5577]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:14:56,343 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:14:56,343 INFO  L82        PathProgramCache]: Analyzing trace with hash -1012870586, now seen corresponding path program 1 times
[2020-05-30 21:14:56,346 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:14:56,368 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:14:56,415 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-30 21:14:56,417 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:14:56,417 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-30 21:14:56,421 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:14:56,432 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 21:14:56,432 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 21:14:56,434 INFO  L87              Difference]: Start difference. First operand 23975 states. Second operand 3 states.
[2020-05-30 21:14:59,309 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:14:59,309 INFO  L93              Difference]: Finished difference Result 18931 states and 47166 transitions.
[2020-05-30 21:14:59,309 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 21:14:59,311 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 18931 states and 47166 transitions.
[2020-05-30 21:14:59,429 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:14:59,590 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 18931 states to 18931 states and 47166 transitions.
[2020-05-30 21:14:59,591 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 8
[2020-05-30 21:14:59,594 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 337
[2020-05-30 21:14:59,594 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 18931 states and 47166 transitions.
[2020-05-30 21:14:59,650 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:14:59,650 INFO  L728         BuchiCegarLoop]: Abstraction has 18931 states and 47166 transitions.
[2020-05-30 21:14:59,684 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 18931 states and 47166 transitions.
[2020-05-30 21:14:59,957 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 18931 to 18931.
[2020-05-30 21:14:59,957 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 18931 states.
[2020-05-30 21:15:00,017 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 18931 states to 18931 states and 47166 transitions.
[2020-05-30 21:15:00,018 INFO  L751         BuchiCegarLoop]: Abstraction has 18931 states and 47166 transitions.
[2020-05-30 21:15:00,018 INFO  L631         BuchiCegarLoop]: Abstraction has 18931 states and 47166 transitions.
[2020-05-30 21:15:00,018 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-05-30 21:15:00,019 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 18931 states and 47166 transitions.
[2020-05-30 21:15:00,057 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:15:00,057 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:15:00,057 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:15:00,060 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:15:00,060 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_withdraw_ValidatorAuction0 := false;
[L7]                 success_bid_ValidatorAuction0 := false;
[L7]                 fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                 success_send__success0 := false;
[L7]                 success_closeAuction_ValidatorAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc low;
[L7]                 havoc user;
[L5568]              assume null == 0;
[L5569]  CALL        call this := FreshRefGenerator__success();
[L1807]              havoc newRef;
[L1808]              assume Alloc[newRef] == false;
[L1809]              Alloc[newRef] := true;
[L1810]              assume newRef != null;
[L5569]  RET         call this := FreshRefGenerator__success();
[L5570]              assume now >= 0;
[L5571]              assume DType[this] == ValidatorAuction;
[L5572]              gas := gas - 53000;
[L5573]  CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]               havoc __exception;
[L753]               revert := false;
[L754]   COND FALSE  !(__exception)
[L796]   CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]              assume msgsender_MSG != null;
[L1828]              Balance[this] := 0;
[L1829]              owner_Ownable[this] := null;
[L1830]              owner_Ownable[this] := msgsender_MSG;
[L1848]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  COND TRUE   revert
[L2878]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND TRUE   revert
[L796]   RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]               assume !revert && gas >= 0;
[L5573]  RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]              assume !revert && gas >= 0;
[L5577]  CALL        call CorralChoice_ValidatorAuction(this);
[L5446]              havoc msgsender_MSG;
[L5447]              havoc msgvalue_MSG;
[L5448]              havoc choice;
[L5449]              havoc newOwner_s43;
[L5450]              havoc _startPriceInWei_s578;
[L5451]              havoc _auctionDurationInDays_s578;
[L5452]              havoc _minimalNumberOfParticipants_s578;
[L5453]              havoc _maximalNumberOfParticipants_s578;
[L5454]              havoc _depositLocker_s578;
[L5455]              havoc addressesToWhitelist_s852;
[L5456]              havoc __ret_0_currentPrice;
[L5457]              havoc secondsSinceStart_s978;
[L5458]              havoc __ret_0_priceAtElapsedTime;
[L5459]              havoc tmpNow;
[L5460]              havoc gas;
[L5461]              assume gas > 4000000 && gas <= 8000000;
[L5462]              tmpNow := now;
[L5463]              havoc now;
[L5464]              assume now > tmpNow;
[L5465]              assume msgsender_MSG != null;
[L5466]              assume DType[msgsender_MSG] != Ownable;
[L5467]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]              assume DType[msgsender_MSG] != DepositLocker;
[L5469]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]              Alloc[msgsender_MSG] := true;
[L5471]  COND FALSE  !(choice == 9)
[L5480]  COND FALSE  !(choice == 8)
[L5489]  COND TRUE   choice == 7
[L5491]              gas := gas - 21000;
[L5492]  COND TRUE   gas >= 0
[L5494]              assume msgvalue_MSG >= 0;
[L5495]  CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]               havoc __exception;
[L818]               revert := false;
[L819]   COND FALSE  !(__exception)
[L861]   CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]              Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]  CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]              gas := gas - 10516;
[L5187]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]  RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]  COND TRUE   revert
[L861]   RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume user == msgsender_MSG;
[L7]                 success_bid_ValidatorAuction0 := true;
[L7]                 success_bid_ValidatorAuction0 := false;
[L7]                 revert := revert_hold;
[L7]                 assume !(user == msgsender_MSG);
[L5495]  RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]  RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]  CALL        call CorralChoice_ValidatorAuction(this);
[L5446]              havoc msgsender_MSG;
[L5447]              havoc msgvalue_MSG;
[L5448]              havoc choice;
[L5449]              havoc newOwner_s43;
[L5450]              havoc _startPriceInWei_s578;
[L5451]              havoc _auctionDurationInDays_s578;
[L5452]              havoc _minimalNumberOfParticipants_s578;
[L5453]              havoc _maximalNumberOfParticipants_s578;
[L5454]              havoc _depositLocker_s578;
[L5455]              havoc addressesToWhitelist_s852;
[L5456]              havoc __ret_0_currentPrice;
[L5457]              havoc secondsSinceStart_s978;
[L5458]              havoc __ret_0_priceAtElapsedTime;
[L5459]              havoc tmpNow;
[L5460]              havoc gas;
[L5461]              assume gas > 4000000 && gas <= 8000000;
[L5462]              tmpNow := now;
[L5463]              havoc now;
[L5464]              assume now > tmpNow;
[L5465]              assume msgsender_MSG != null;
[L5466]              assume DType[msgsender_MSG] != Ownable;
[L5467]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]              assume DType[msgsender_MSG] != DepositLocker;
[L5469]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]              Alloc[msgsender_MSG] := true;
[L5471]  COND FALSE  !(choice == 9)
[L5480]  COND FALSE  !(choice == 8)
[L5489]  COND TRUE   choice == 7
[L5491]              gas := gas - 21000;
[L5492]  COND TRUE   gas >= 0
[L5494]              assume msgvalue_MSG >= 0;
[L5495]  CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]               havoc __exception;
[L818]               revert := false;
[L819]   COND FALSE  !(__exception)
[L861]   CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]              Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]  CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]              gas := gas - 10516;
[L5187]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]  RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]  COND TRUE   revert
[L861]   RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume user == msgsender_MSG;
[L7]                 success_bid_ValidatorAuction0 := true;
[L7]                 success_bid_ValidatorAuction0 := false;
[L7]                 revert := revert_hold;
[L7]                 assume !(user == msgsender_MSG);
[L5495]  RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:15:00,064 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:15:00,064 INFO  L82        PathProgramCache]: Analyzing trace with hash -460840087, now seen corresponding path program 1 times
[2020-05-30 21:15:00,065 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:15:00,078 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:15:00,099 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-30 21:15:00,099 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:15:00,100 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-30 21:15:00,101 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:15:00,101 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 21:15:00,101 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 21:15:00,101 INFO  L87              Difference]: Start difference. First operand 18931 states and 47166 transitions. cyclomatic complexity: 28275 Second operand 3 states.
[2020-05-30 21:15:00,835 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:15:00,835 INFO  L93              Difference]: Finished difference Result 18453 states and 31545 transitions.
[2020-05-30 21:15:00,835 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 21:15:00,835 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 18453 states and 31545 transitions.
[2020-05-30 21:15:00,882 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:15:00,955 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 18453 states to 18453 states and 31545 transitions.
[2020-05-30 21:15:00,955 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 337
[2020-05-30 21:15:00,956 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 337
[2020-05-30 21:15:00,956 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 18453 states and 31545 transitions.
[2020-05-30 21:15:00,978 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:15:00,978 INFO  L728         BuchiCegarLoop]: Abstraction has 18453 states and 31545 transitions.
[2020-05-30 21:15:00,999 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 18453 states and 31545 transitions.
[2020-05-30 21:15:01,140 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 18453 to 18453.
[2020-05-30 21:15:01,140 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 18453 states.
[2020-05-30 21:15:01,172 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 18453 states to 18453 states and 31545 transitions.
[2020-05-30 21:15:01,172 INFO  L751         BuchiCegarLoop]: Abstraction has 18453 states and 31545 transitions.
[2020-05-30 21:15:01,172 INFO  L631         BuchiCegarLoop]: Abstraction has 18453 states and 31545 transitions.
[2020-05-30 21:15:01,172 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-05-30 21:15:01,172 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 18453 states and 31545 transitions.
[2020-05-30 21:15:01,196 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:15:01,197 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:15:01,197 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:15:01,198 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:15:01,198 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND TRUE   revert
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND TRUE   !(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4)
[L3604]                    revert := true;
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND TRUE   revert
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND TRUE   !(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4)
[L3604]                    revert := true;
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:15:01,201 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:15:01,201 INFO  L82        PathProgramCache]: Analyzing trace with hash 706554432, now seen corresponding path program 1 times
[2020-05-30 21:15:01,202 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:15:01,211 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:15:01,236 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-30 21:15:01,236 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:15:01,236 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-30 21:15:01,237 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:15:01,237 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 21:15:01,237 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 21:15:01,237 INFO  L87              Difference]: Start difference. First operand 18453 states and 31545 transitions. cyclomatic complexity: 13132 Second operand 3 states.
[2020-05-30 21:15:01,656 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:15:01,656 INFO  L93              Difference]: Finished difference Result 18214 states and 21614 transitions.
[2020-05-30 21:15:01,656 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 21:15:01,657 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 18214 states and 21614 transitions.
[2020-05-30 21:15:01,690 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:15:01,742 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 18214 states to 18214 states and 21614 transitions.
[2020-05-30 21:15:01,743 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 337
[2020-05-30 21:15:01,743 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 337
[2020-05-30 21:15:01,743 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 18214 states and 21614 transitions.
[2020-05-30 21:15:01,754 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:15:01,754 INFO  L728         BuchiCegarLoop]: Abstraction has 18214 states and 21614 transitions.
[2020-05-30 21:15:01,771 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 18214 states and 21614 transitions.
[2020-05-30 21:15:01,871 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 18214 to 18214.
[2020-05-30 21:15:01,871 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 18214 states.
[2020-05-30 21:15:01,894 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 18214 states to 18214 states and 21614 transitions.
[2020-05-30 21:15:01,894 INFO  L751         BuchiCegarLoop]: Abstraction has 18214 states and 21614 transitions.
[2020-05-30 21:15:01,895 INFO  L631         BuchiCegarLoop]: Abstraction has 18214 states and 21614 transitions.
[2020-05-30 21:15:01,895 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-05-30 21:15:01,895 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 18214 states and 21614 transitions.
[2020-05-30 21:15:01,946 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:15:01,947 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:15:01,947 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:15:01,948 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:15:01,948 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND TRUE   revert
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND TRUE   !(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4)
[L3604]                    revert := true;
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND TRUE   revert
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND TRUE   revert
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]  CALL        call CorralChoice_ValidatorAuction(this);
[L5446]              havoc msgsender_MSG;
[L5447]              havoc msgvalue_MSG;
[L5448]              havoc choice;
[L5449]              havoc newOwner_s43;
[L5450]              havoc _startPriceInWei_s578;
[L5451]              havoc _auctionDurationInDays_s578;
[L5452]              havoc _minimalNumberOfParticipants_s578;
[L5453]              havoc _maximalNumberOfParticipants_s578;
[L5454]              havoc _depositLocker_s578;
[L5455]              havoc addressesToWhitelist_s852;
[L5456]              havoc __ret_0_currentPrice;
[L5457]              havoc secondsSinceStart_s978;
[L5458]              havoc __ret_0_priceAtElapsedTime;
[L5459]              havoc tmpNow;
[L5460]              havoc gas;
[L5461]              assume gas > 4000000 && gas <= 8000000;
[L5462]              tmpNow := now;
[L5463]              havoc now;
[L5464]              assume now > tmpNow;
[L5465]              assume msgsender_MSG != null;
[L5466]              assume DType[msgsender_MSG] != Ownable;
[L5467]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]              assume DType[msgsender_MSG] != DepositLocker;
[L5469]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]              Alloc[msgsender_MSG] := true;
[L5471]  COND FALSE  !(choice == 9)
[L5480]  COND FALSE  !(choice == 8)
[L5489]  COND FALSE  !(choice == 7)
[L5498]  COND FALSE  !(choice == 6)
[L5507]  COND FALSE  !(choice == 5)
[L5516]  COND TRUE   choice == 4
[L5518]              gas := gas - 21000;
[L5519]  COND TRUE   gas >= 0
[L5521]              assume msgvalue_MSG == 0;
[L5522]  CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]               havoc __exception;
[L998]               revert := false;
[L999]   COND FALSE  !(__exception)
[L1041]  CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]  CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]              gas := gas - 10516;
[L5187]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]  RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]  COND TRUE   revert
[L1041]  RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                 success_closeAuction_ValidatorAuction0 := true;
[L7]                 success_closeAuction_ValidatorAuction0 := false;
[L7]                 revert := revert_hold;
[L5522]  RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:15:01,954 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:15:01,954 INFO  L82        PathProgramCache]: Analyzing trace with hash 1991320746, now seen corresponding path program 1 times
[2020-05-30 21:15:01,954 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:15:01,965 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:15:01,997 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-30 21:15:01,997 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:15:01,997 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-30 21:15:01,998 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:15:01,998 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 21:15:01,998 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 21:15:01,998 INFO  L87              Difference]: Start difference. First operand 18214 states and 21614 transitions. cyclomatic complexity: 3440 Second operand 3 states.
[2020-05-30 21:15:02,288 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:15:02,288 INFO  L93              Difference]: Finished difference Result 22450 states and 26712 transitions.
[2020-05-30 21:15:02,288 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 21:15:02,288 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 22450 states and 26712 transitions.
[2020-05-30 21:15:02,333 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:15:02,406 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 22450 states to 22450 states and 26712 transitions.
[2020-05-30 21:15:02,407 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 493
[2020-05-30 21:15:02,407 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 493
[2020-05-30 21:15:02,407 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 22450 states and 26712 transitions.
[2020-05-30 21:15:02,421 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:15:02,421 INFO  L728         BuchiCegarLoop]: Abstraction has 22450 states and 26712 transitions.
[2020-05-30 21:15:02,439 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 22450 states and 26712 transitions.
[2020-05-30 21:15:02,623 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 22450 to 21502.
[2020-05-30 21:15:02,623 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21502 states.
[2020-05-30 21:15:02,654 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21502 states to 21502 states and 25592 transitions.
[2020-05-30 21:15:02,654 INFO  L751         BuchiCegarLoop]: Abstraction has 21502 states and 25592 transitions.
[2020-05-30 21:15:02,654 INFO  L631         BuchiCegarLoop]: Abstraction has 21502 states and 25592 transitions.
[2020-05-30 21:15:02,654 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-05-30 21:15:02,654 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21502 states and 25592 transitions.
[2020-05-30 21:15:02,677 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:15:02,677 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:15:02,677 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:15:02,679 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:15:02,679 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND TRUE   !(_auctionDurationInDays_s578 > 0)
[L2772]                    revert := true;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND TRUE   !(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4)
[L3604]                    revert := true;
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND TRUE   !(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1)
[L3431]                    revert := true;
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND TRUE   !(now > startTime_ValidatorAuction[this])
[L3100]                    revert := true;
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND TRUE   !(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1)
[L3431]                    revert := true;
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:15:02,683 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:15:02,683 INFO  L82        PathProgramCache]: Analyzing trace with hash -1141144915, now seen corresponding path program 1 times
[2020-05-30 21:15:02,683 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:15:02,696 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:15:02,734 INFO  L134       CoverageAnalysis]: Checked inductivity of 36 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 36 trivial. 0 not checked.
[2020-05-30 21:15:02,735 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:15:02,735 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-30 21:15:02,735 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:15:02,735 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 21:15:02,735 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 21:15:02,736 INFO  L87              Difference]: Start difference. First operand 21502 states and 25592 transitions. cyclomatic complexity: 4130 Second operand 3 states.
[2020-05-30 21:15:03,013 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:15:03,013 INFO  L93              Difference]: Finished difference Result 23170 states and 26736 transitions.
[2020-05-30 21:15:03,013 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 21:15:03,013 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 23170 states and 26736 transitions.
[2020-05-30 21:15:03,059 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:15:03,128 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 23170 states to 21338 states and 24342 transitions.
[2020-05-30 21:15:03,128 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 371
[2020-05-30 21:15:03,128 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 371
[2020-05-30 21:15:03,129 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21338 states and 24342 transitions.
[2020-05-30 21:15:03,142 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:15:03,142 INFO  L728         BuchiCegarLoop]: Abstraction has 21338 states and 24342 transitions.
[2020-05-30 21:15:03,160 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21338 states and 24342 transitions.
[2020-05-30 21:15:03,293 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21338 to 20570.
[2020-05-30 21:15:03,293 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20570 states.
[2020-05-30 21:15:03,317 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20570 states to 20570 states and 23394 transitions.
[2020-05-30 21:15:03,317 INFO  L751         BuchiCegarLoop]: Abstraction has 20570 states and 23394 transitions.
[2020-05-30 21:15:03,317 INFO  L631         BuchiCegarLoop]: Abstraction has 20570 states and 23394 transitions.
[2020-05-30 21:15:03,317 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-05-30 21:15:03,318 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20570 states and 23394 transitions.
[2020-05-30 21:15:03,339 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:15:03,339 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:15:03,339 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:15:03,342 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:15:03,342 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND FALSE  !(Balance[from] >= amount)
[L5043]                    success := false;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:15:03,348 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:15:03,348 INFO  L82        PathProgramCache]: Analyzing trace with hash -606110111, now seen corresponding path program 1 times
[2020-05-30 21:15:03,348 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:15:03,372 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:15:03,541 INFO  L134       CoverageAnalysis]: Checked inductivity of 44 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 42 trivial. 0 not checked.
[2020-05-30 21:15:03,541 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:15:03,541 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 21:15:03,542 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:15:03,542 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:15:03,542 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=109, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:15:03,542 INFO  L87              Difference]: Start difference. First operand 20570 states and 23394 transitions. cyclomatic complexity: 2864 Second operand 12 states.
[2020-05-30 21:15:13,891 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:15:13,891 INFO  L93              Difference]: Finished difference Result 21406 states and 24586 transitions.
[2020-05-30 21:15:13,891 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-05-30 21:15:13,891 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21406 states and 24586 transitions.
[2020-05-30 21:15:13,926 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:15:13,978 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21406 states to 21406 states and 24586 transitions.
[2020-05-30 21:15:13,978 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 462
[2020-05-30 21:15:13,979 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 462
[2020-05-30 21:15:13,979 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21406 states and 24586 transitions.
[2020-05-30 21:15:13,990 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:15:13,990 INFO  L728         BuchiCegarLoop]: Abstraction has 21406 states and 24586 transitions.
[2020-05-30 21:15:14,006 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21406 states and 24586 transitions.
[2020-05-30 21:15:14,149 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21406 to 20931.
[2020-05-30 21:15:14,150 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20931 states.
[2020-05-30 21:15:14,174 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20931 states to 20931 states and 23906 transitions.
[2020-05-30 21:15:14,174 INFO  L751         BuchiCegarLoop]: Abstraction has 20931 states and 23906 transitions.
[2020-05-30 21:15:14,174 INFO  L631         BuchiCegarLoop]: Abstraction has 20931 states and 23906 transitions.
[2020-05-30 21:15:14,174 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-05-30 21:15:14,175 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20931 states and 23906 transitions.
[2020-05-30 21:15:14,196 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:15:14,196 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:15:14,196 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:15:14,200 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:15:14,200 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND FALSE  !(Balance[from] >= amount)
[L5043]                    success := false;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND TRUE   choice == 5
[L5509]                    gas := gas - 21000;
[L5510]        COND TRUE   gas >= 0
[L5512]                    assume msgvalue_MSG == 0;
[L5513]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5513]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:15:14,206 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:15:14,206 INFO  L82        PathProgramCache]: Analyzing trace with hash 290659669, now seen corresponding path program 1 times
[2020-05-30 21:15:14,207 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:15:14,232 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:15:14,394 INFO  L134       CoverageAnalysis]: Checked inductivity of 87 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 85 trivial. 0 not checked.
[2020-05-30 21:15:14,394 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:15:14,394 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 21:15:14,395 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:15:14,395 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:15:14,395 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=107, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:15:14,396 INFO  L87              Difference]: Start difference. First operand 20931 states and 23906 transitions. cyclomatic complexity: 3019 Second operand 12 states.
[2020-05-30 21:15:27,091 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:15:27,091 INFO  L93              Difference]: Finished difference Result 21551 states and 24805 transitions.
[2020-05-30 21:15:27,091 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-30 21:15:27,091 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21551 states and 24805 transitions.
[2020-05-30 21:15:27,142 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:15:27,206 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21551 states to 21551 states and 24805 transitions.
[2020-05-30 21:15:27,206 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 490
[2020-05-30 21:15:27,207 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 490
[2020-05-30 21:15:27,207 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21551 states and 24805 transitions.
[2020-05-30 21:15:27,219 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:15:27,219 INFO  L728         BuchiCegarLoop]: Abstraction has 21551 states and 24805 transitions.
[2020-05-30 21:15:27,237 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21551 states and 24805 transitions.
[2020-05-30 21:15:27,352 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21551 to 21329.
[2020-05-30 21:15:27,352 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21329 states.
[2020-05-30 21:15:27,376 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21329 states to 21329 states and 24375 transitions.
[2020-05-30 21:15:27,376 INFO  L751         BuchiCegarLoop]: Abstraction has 21329 states and 24375 transitions.
[2020-05-30 21:15:27,376 INFO  L631         BuchiCegarLoop]: Abstraction has 21329 states and 24375 transitions.
[2020-05-30 21:15:27,377 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-05-30 21:15:27,377 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21329 states and 24375 transitions.
[2020-05-30 21:15:27,397 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:15:27,398 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:15:27,398 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:15:27,400 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:15:27,400 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND FALSE  !(gas < 21000)
[L4605]        COND TRUE   DType[from] == ValidatorAuction
[L4607]        COND FALSE  !(choice == 9)
[L4620]        COND FALSE  !(choice == 8)
[L4633]        COND FALSE  !(choice == 7)
[L4646]        COND TRUE   choice == 6
[L4648]                    gas := gas - 21000;
[L4649]        COND TRUE   gas >= 0
[L4651]                    assume msgvalue_MSG == 0;
[L4652]        CALL        call startAuction_ValidatorAuction__success(from, to, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L4652]        RET         call startAuction_ValidatorAuction__success(from, to, msgvalue_MSG);
[L4653]        COND FALSE  !(revert)
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]  CALL        call CorralChoice_ValidatorAuction(this);
[L5446]              havoc msgsender_MSG;
[L5447]              havoc msgvalue_MSG;
[L5448]              havoc choice;
[L5449]              havoc newOwner_s43;
[L5450]              havoc _startPriceInWei_s578;
[L5451]              havoc _auctionDurationInDays_s578;
[L5452]              havoc _minimalNumberOfParticipants_s578;
[L5453]              havoc _maximalNumberOfParticipants_s578;
[L5454]              havoc _depositLocker_s578;
[L5455]              havoc addressesToWhitelist_s852;
[L5456]              havoc __ret_0_currentPrice;
[L5457]              havoc secondsSinceStart_s978;
[L5458]              havoc __ret_0_priceAtElapsedTime;
[L5459]              havoc tmpNow;
[L5460]              havoc gas;
[L5461]              assume gas > 4000000 && gas <= 8000000;
[L5462]              tmpNow := now;
[L5463]              havoc now;
[L5464]              assume now > tmpNow;
[L5465]              assume msgsender_MSG != null;
[L5466]              assume DType[msgsender_MSG] != Ownable;
[L5467]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]              assume DType[msgsender_MSG] != DepositLocker;
[L5469]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]              Alloc[msgsender_MSG] := true;
[L5471]  COND TRUE   choice == 9
[L5473]              gas := gas - 21000;
[L5474]  COND FALSE  !(gas >= 0)
[L5577]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:15:27,405 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:15:27,405 INFO  L82        PathProgramCache]: Analyzing trace with hash -853399279, now seen corresponding path program 1 times
[2020-05-30 21:15:27,405 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:15:27,426 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:15:27,618 INFO  L134       CoverageAnalysis]: Checked inductivity of 48 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 48 trivial. 0 not checked.
[2020-05-30 21:15:27,619 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:15:27,619 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-05-30 21:15:27,619 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:15:27,619 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:15:27,620 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=107, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:15:27,620 INFO  L87              Difference]: Start difference. First operand 21329 states and 24375 transitions. cyclomatic complexity: 3090 Second operand 12 states.
[2020-05-30 21:15:39,365 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:15:39,365 INFO  L93              Difference]: Finished difference Result 21561 states and 24807 transitions.
[2020-05-30 21:15:39,365 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-30 21:15:39,365 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21561 states and 24807 transitions.
[2020-05-30 21:15:39,400 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:15:39,451 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21561 states to 21561 states and 24807 transitions.
[2020-05-30 21:15:39,451 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 494
[2020-05-30 21:15:39,452 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 494
[2020-05-30 21:15:39,452 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21561 states and 24807 transitions.
[2020-05-30 21:15:39,463 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:15:39,464 INFO  L728         BuchiCegarLoop]: Abstraction has 21561 states and 24807 transitions.
[2020-05-30 21:15:39,480 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21561 states and 24807 transitions.
[2020-05-30 21:15:39,587 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21561 to 21031.
[2020-05-30 21:15:39,587 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21031 states.
[2020-05-30 21:15:39,612 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21031 states to 21031 states and 23922 transitions.
[2020-05-30 21:15:39,612 INFO  L751         BuchiCegarLoop]: Abstraction has 21031 states and 23922 transitions.
[2020-05-30 21:15:39,612 INFO  L631         BuchiCegarLoop]: Abstraction has 21031 states and 23922 transitions.
[2020-05-30 21:15:39,612 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-05-30 21:15:39,612 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21031 states and 23922 transitions.
[2020-05-30 21:15:39,631 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:15:39,632 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:15:39,632 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:15:39,634 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:15:39,634 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND TRUE   choice == 5
[L5509]                    gas := gas - 21000;
[L5510]        COND TRUE   gas >= 0
[L5512]                    assume msgvalue_MSG == 0;
[L5513]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5513]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND FALSE  !(gas < 21000)
[L4605]        COND TRUE   DType[from] == ValidatorAuction
[L4607]        COND FALSE  !(choice == 9)
[L4620]        COND FALSE  !(choice == 8)
[L4633]        COND FALSE  !(choice == 7)
[L4646]        COND TRUE   choice == 6
[L4648]                    gas := gas - 21000;
[L4649]        COND TRUE   gas >= 0
[L4651]                    assume msgvalue_MSG == 0;
[L4652]        CALL        call startAuction_ValidatorAuction__success(from, to, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L4652]        RET         call startAuction_ValidatorAuction__success(from, to, msgvalue_MSG);
[L4653]        COND FALSE  !(revert)
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND FALSE  !(Balance[from] >= amount)
[L5043]                    success := false;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:15:39,639 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:15:39,640 INFO  L82        PathProgramCache]: Analyzing trace with hash -1458136956, now seen corresponding path program 1 times
[2020-05-30 21:15:39,640 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:15:39,659 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:15:39,823 INFO  L134       CoverageAnalysis]: Checked inductivity of 85 backedges. 1 proven. 32 refuted. 0 times theorem prover too weak. 52 trivial. 0 not checked.
[2020-05-30 21:15:39,824 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:15:39,824 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 21:15:39,824 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:15:39,824 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:15:39,824 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=109, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:15:39,825 INFO  L87              Difference]: Start difference. First operand 21031 states and 23922 transitions. cyclomatic complexity: 2933 Second operand 12 states.
[2020-05-30 21:15:51,735 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:15:51,735 INFO  L93              Difference]: Finished difference Result 21315 states and 24423 transitions.
[2020-05-30 21:15:51,735 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-05-30 21:15:51,736 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21315 states and 24423 transitions.
[2020-05-30 21:15:51,787 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:15:51,848 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21315 states to 21315 states and 24423 transitions.
[2020-05-30 21:15:51,848 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 481
[2020-05-30 21:15:51,849 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 481
[2020-05-30 21:15:51,849 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21315 states and 24423 transitions.
[2020-05-30 21:15:51,862 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:15:51,862 INFO  L728         BuchiCegarLoop]: Abstraction has 21315 states and 24423 transitions.
[2020-05-30 21:15:51,880 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21315 states and 24423 transitions.
[2020-05-30 21:15:51,994 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21315 to 21035.
[2020-05-30 21:15:51,995 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21035 states.
[2020-05-30 21:15:52,024 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21035 states to 21035 states and 23930 transitions.
[2020-05-30 21:15:52,024 INFO  L751         BuchiCegarLoop]: Abstraction has 21035 states and 23930 transitions.
[2020-05-30 21:15:52,024 INFO  L631         BuchiCegarLoop]: Abstraction has 21035 states and 23930 transitions.
[2020-05-30 21:15:52,024 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-05-30 21:15:52,024 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21035 states and 23930 transitions.
[2020-05-30 21:15:52,047 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:15:52,047 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:15:52,047 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:15:52,049 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:15:52,050 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND TRUE   __exception
[L756]                     __tmp__Balance := Balance;
[L757]                     __tmp__DType := DType;
[L758]                     __tmp__Alloc := Alloc;
[L759]                     __tmp__balance_ADDR := balance_ADDR;
[L760]                     __tmp__M_Ref_bool_canWithdraw0 := M_Ref_bool_canWithdraw0;
[L761]                     __tmp__sum_canWithdraw0 := sum_canWithdraw0;
[L762]                     __tmp__M_Ref_bool_whitelist1 := M_Ref_bool_whitelist1;
[L763]                     __tmp__sum_whitelist1 := sum_whitelist1;
[L764]                     __tmp__M_Ref_int_bids2 := M_Ref_int_bids2;
[L765]                     __tmp__sum_bids2 := sum_bids2;
[L766]                     __tmp__M_int_Ref := M_int_Ref;
[L767]                     __tmp__sum := sum;
[L768]                     __tmp__Length := Length;
[L769]                     __tmp__now := now;
[L770]                     __tmp__owner_Ownable := owner_Ownable;
[L771]                     __tmp__initialized_DepositLocker := initialized_DepositLocker;
[L772]                     __tmp__deposited_DepositLocker := deposited_DepositLocker;
[L773]                     __tmp__slasher_DepositLocker := slasher_DepositLocker;
[L774]                     __tmp__depositorsProxy_DepositLocker := depositorsProxy_DepositLocker;
[L775]                     __tmp__releaseTimestamp_DepositLocker := releaseTimestamp_DepositLocker;
[L776]                     __tmp__canWithdraw_DepositLocker := canWithdraw_DepositLocker;
[L777]                     __tmp__numberOfDepositors_DepositLocker := numberOfDepositors_DepositLocker;
[L778]                     __tmp__valuePerDepositor_DepositLocker := valuePerDepositor_DepositLocker;
[L779]                     __tmp__auctionDurationInDays_ValidatorAuction := auctionDurationInDays_ValidatorAuction;
[L780]                     __tmp__startPrice_ValidatorAuction := startPrice_ValidatorAuction;
[L781]                     __tmp__minimalNumberOfParticipants_ValidatorAuction := minimalNumberOfParticipants_ValidatorAuction;
[L782]                     __tmp__maximalNumberOfParticipants_ValidatorAuction := maximalNumberOfParticipants_ValidatorAuction;
[L783]                     __tmp__auctionState_ValidatorAuction := auctionState_ValidatorAuction;
[L784]                     __tmp__depositLocker_ValidatorAuction := depositLocker_ValidatorAuction;
[L785]                     __tmp__whitelist_ValidatorAuction := whitelist_ValidatorAuction;
[L786]                     __tmp__bids_ValidatorAuction := bids_ValidatorAuction;
[L787]                     __tmp__bidders_ValidatorAuction := bidders_ValidatorAuction;
[L788]                     __tmp__startTime_ValidatorAuction := startTime_ValidatorAuction;
[L789]                     __tmp__closeTime_ValidatorAuction := closeTime_ValidatorAuction;
[L790]                     __tmp__lowestSlotPrice_ValidatorAuction := lowestSlotPrice_ValidatorAuction;
[L791]         CALL        call ValidatorAuction_ValidatorAuction__fail(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2849]        CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L1837]        CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1817]                    assume msgsender_MSG != null;
[L1818]                    __tmp__Balance[this] := 0;
[L1819]                    __tmp__owner_Ownable[this] := null;
[L1820]                    __tmp__owner_Ownable[this] := msgsender_MSG;
[L1837]        RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1838]        COND FALSE  !(revert)
[L2849]        RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2850]        COND FALSE  !(revert)
[L2855]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2622]                    assume msgsender_MSG != null;
[L2623]                    __tmp__Balance[this] := 0;
[L2624]                    __tmp__auctionDurationInDays_ValidatorAuction[this] := 0;
[L2625]                    __tmp__startPrice_ValidatorAuction[this] := 0;
[L2626]                    __tmp__minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2627]                    __tmp__maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2628]        CALL        call __var_10 := FreshRefGenerator__fail();
[L1797]                    havoc newRef;
[L1798]                    assume __tmp__Alloc[newRef] == false;
[L1799]                    __tmp__Alloc[newRef] := true;
[L1800]                    assume newRef != null;
[L2628]        RET         call __var_10 := FreshRefGenerator__fail();
[L2629]        COND FALSE  !(revert)
[L2634]                    __tmp__whitelist_ValidatorAuction[this] := __var_10;
[L2635]                    __tmp__M_Ref_bool_whitelist1[__tmp__whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2636]        CALL        call __var_11 := FreshRefGenerator__fail();
[L1797]                    havoc newRef;
[L1798]                    assume __tmp__Alloc[newRef] == false;
[L1799]                    __tmp__Alloc[newRef] := true;
[L1800]                    assume newRef != null;
[L2636]        RET         call __var_11 := FreshRefGenerator__fail();
[L2637]        COND FALSE  !(revert)
[L2642]                    __tmp__bids_ValidatorAuction[this] := __var_11;
[L2643]                    __tmp__M_Ref_int_bids2[__tmp__bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2644]                    __tmp__sum_bids2[__tmp__bids_ValidatorAuction[this]] := 0;
[L2645]        CALL        call __var_12 := FreshRefGenerator__fail();
[L1797]                    havoc newRef;
[L1798]                    assume __tmp__Alloc[newRef] == false;
[L1799]                    __tmp__Alloc[newRef] := true;
[L1800]                    assume newRef != null;
[L2645]        RET         call __var_12 := FreshRefGenerator__fail();
[L2646]        COND FALSE  !(revert)
[L2651]                    __tmp__bidders_ValidatorAuction[this] := __var_12;
[L2652]                    assume __tmp__Length[__tmp__bidders_ValidatorAuction[this]] == 0;
[L2653]                    __tmp__startTime_ValidatorAuction[this] := 0;
[L2654]                    __tmp__closeTime_ValidatorAuction[this] := 0;
[L2655]                    __tmp__lowestSlotPrice_ValidatorAuction[this] := 0;
[L2656]                    assume _auctionDurationInDays_s578 >= 0;
[L2657]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2663]                    assume _auctionDurationInDays_s578 >= 0;
[L2664]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2670]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2671]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2677]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2678]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2684]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2685]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2686]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2692]                    assume _startPriceInWei_s578 >= 0;
[L2693]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2699]                    assume __tmp__startPrice_ValidatorAuction[this] >= 0;
[L2700]                    assume _startPriceInWei_s578 >= 0;
[L2701]                    __tmp__startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2702]                    assume __tmp__auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2703]                    assume _auctionDurationInDays_s578 >= 0;
[L2704]                    __tmp__auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2705]                    assume __tmp__maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2706]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2707]                    __tmp__maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2708]                    assume __tmp__minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2709]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2710]                    __tmp__minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2711]                    __tmp__depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2712]                    assume __tmp__lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2713]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2714]                    __tmp__lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2715]                    assume __var_9 >= 0;
[L2716]                    __tmp__auctionState_ValidatorAuction[this] := 0;
[L2855]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2856]        COND FALSE  !(revert)
[L791]         RET         call ValidatorAuction_ValidatorAuction__fail(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L792]                     assume revert || gas < 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND FALSE  !(gas < 21000)
[L4605]        COND TRUE   DType[from] == ValidatorAuction
[L4607]        COND FALSE  !(choice == 9)
[L4620]        COND FALSE  !(choice == 8)
[L4633]        COND FALSE  !(choice == 7)
[L4646]        COND TRUE   choice == 6
[L4648]                    gas := gas - 21000;
[L4649]        COND TRUE   gas >= 0
[L4651]                    assume msgvalue_MSG == 0;
[L4652]        CALL        call startAuction_ValidatorAuction__success(from, to, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L4652]        RET         call startAuction_ValidatorAuction__success(from, to, msgvalue_MSG);
[L4653]        COND FALSE  !(revert)
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND FALSE  !(Balance[from] >= amount)
[L5043]                    success := false;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:15:52,056 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:15:52,056 INFO  L82        PathProgramCache]: Analyzing trace with hash 840567602, now seen corresponding path program 1 times
[2020-05-30 21:15:52,056 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:15:52,075 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:15:52,189 INFO  L134       CoverageAnalysis]: Checked inductivity of 30 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 30 trivial. 0 not checked.
[2020-05-30 21:15:52,189 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:15:52,190 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-30 21:15:52,190 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:15:52,190 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 21:15:52,190 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-30 21:15:52,190 INFO  L87              Difference]: Start difference. First operand 21035 states and 23930 transitions. cyclomatic complexity: 2937 Second operand 4 states.
[2020-05-30 21:15:54,191 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:15:54,191 INFO  L93              Difference]: Finished difference Result 23487 states and 27007 transitions.
[2020-05-30 21:15:54,191 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-30 21:15:54,191 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 23487 states and 27007 transitions.
[2020-05-30 21:15:54,232 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-05-30 21:15:54,296 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 23487 states to 23217 states and 26598 transitions.
[2020-05-30 21:15:54,296 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 509
[2020-05-30 21:15:54,297 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 509
[2020-05-30 21:15:54,297 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 23217 states and 26598 transitions.
[2020-05-30 21:15:54,312 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:15:54,312 INFO  L728         BuchiCegarLoop]: Abstraction has 23217 states and 26598 transitions.
[2020-05-30 21:15:54,329 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 23217 states and 26598 transitions.
[2020-05-30 21:15:54,451 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 23217 to 20983.
[2020-05-30 21:15:54,452 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20983 states.
[2020-05-30 21:15:54,479 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20983 states to 20983 states and 23740 transitions.
[2020-05-30 21:15:54,479 INFO  L751         BuchiCegarLoop]: Abstraction has 20983 states and 23740 transitions.
[2020-05-30 21:15:54,479 INFO  L631         BuchiCegarLoop]: Abstraction has 20983 states and 23740 transitions.
[2020-05-30 21:15:54,479 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-05-30 21:15:54,479 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20983 states and 23740 transitions.
[2020-05-30 21:15:54,502 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:15:54,502 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:15:54,502 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:15:54,504 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:15:54,504 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND FALSE  !(gas < 21000)
[L4605]        COND TRUE   DType[from] == ValidatorAuction
[L4607]        COND FALSE  !(choice == 9)
[L4620]        COND FALSE  !(choice == 8)
[L4633]        COND FALSE  !(choice == 7)
[L4646]        COND TRUE   choice == 6
[L4648]                    gas := gas - 21000;
[L4649]        COND TRUE   gas >= 0
[L4651]                    assume msgvalue_MSG == 0;
[L4652]        CALL        call startAuction_ValidatorAuction__success(from, to, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L4652]        RET         call startAuction_ValidatorAuction__success(from, to, msgvalue_MSG);
[L4653]        COND FALSE  !(revert)
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]  CALL        call CorralChoice_ValidatorAuction(this);
[L5446]              havoc msgsender_MSG;
[L5447]              havoc msgvalue_MSG;
[L5448]              havoc choice;
[L5449]              havoc newOwner_s43;
[L5450]              havoc _startPriceInWei_s578;
[L5451]              havoc _auctionDurationInDays_s578;
[L5452]              havoc _minimalNumberOfParticipants_s578;
[L5453]              havoc _maximalNumberOfParticipants_s578;
[L5454]              havoc _depositLocker_s578;
[L5455]              havoc addressesToWhitelist_s852;
[L5456]              havoc __ret_0_currentPrice;
[L5457]              havoc secondsSinceStart_s978;
[L5458]              havoc __ret_0_priceAtElapsedTime;
[L5459]              havoc tmpNow;
[L5460]              havoc gas;
[L5461]              assume gas > 4000000 && gas <= 8000000;
[L5462]              tmpNow := now;
[L5463]              havoc now;
[L5464]              assume now > tmpNow;
[L5465]              assume msgsender_MSG != null;
[L5466]              assume DType[msgsender_MSG] != Ownable;
[L5467]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]              assume DType[msgsender_MSG] != DepositLocker;
[L5469]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]              Alloc[msgsender_MSG] := true;
[L5471]  COND FALSE  !(choice == 9)
[L5480]  COND FALSE  !(choice == 8)
[L5489]  COND FALSE  !(choice == 7)
[L5498]  COND FALSE  !(choice == 6)
[L5507]  COND FALSE  !(choice == 5)
[L5516]  COND FALSE  !(choice == 4)
[L5525]  COND FALSE  !(choice == 3)
[L5535]  COND FALSE  !(choice == 2)
[L5544]  COND FALSE  !(choice == 1)
[L5577]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:15:54,510 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:15:54,510 INFO  L82        PathProgramCache]: Analyzing trace with hash -2070915838, now seen corresponding path program 1 times
[2020-05-30 21:15:54,511 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:15:54,538 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:15:54,694 INFO  L134       CoverageAnalysis]: Checked inductivity of 110 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 110 trivial. 0 not checked.
[2020-05-30 21:15:54,694 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:15:54,694 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-05-30 21:15:54,695 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:15:54,695 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-05-30 21:15:54,695 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=19, Unknown=0, NotChecked=0, Total=30
[2020-05-30 21:15:54,695 INFO  L87              Difference]: Start difference. First operand 20983 states and 23740 transitions. cyclomatic complexity: 2799 Second operand 6 states.
[2020-05-30 21:15:58,190 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:15:58,190 INFO  L93              Difference]: Finished difference Result 21405 states and 23557 transitions.
[2020-05-30 21:15:58,190 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-30 21:15:58,191 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21405 states and 23557 transitions.
[2020-05-30 21:15:58,235 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-05-30 21:15:58,284 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21405 states to 21405 states and 23557 transitions.
[2020-05-30 21:15:58,284 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 401
[2020-05-30 21:15:58,284 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 861
[2020-05-30 21:15:58,285 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21405 states and 23557 transitions.
[2020-05-30 21:15:58,296 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:15:58,296 INFO  L728         BuchiCegarLoop]: Abstraction has 21405 states and 23557 transitions.
[2020-05-30 21:15:58,312 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21405 states and 23557 transitions.
[2020-05-30 21:15:58,406 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21405 to 19343.
[2020-05-30 21:15:58,406 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 19343 states.
[2020-05-30 21:15:58,426 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 19343 states to 19343 states and 20993 transitions.
[2020-05-30 21:15:58,426 INFO  L751         BuchiCegarLoop]: Abstraction has 19343 states and 20993 transitions.
[2020-05-30 21:15:58,426 INFO  L631         BuchiCegarLoop]: Abstraction has 19343 states and 20993 transitions.
[2020-05-30 21:15:58,426 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-05-30 21:15:58,426 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 19343 states and 20993 transitions.
[2020-05-30 21:15:58,444 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:15:58,444 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:15:58,444 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:15:58,446 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:15:58,446 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND FALSE  !(Balance[from] >= amount)
[L5043]                    success := false;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND FALSE  !(Balance[from] >= amount)
[L5043]                    success := false;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:15:58,451 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:15:58,451 INFO  L82        PathProgramCache]: Analyzing trace with hash -347142435, now seen corresponding path program 1 times
[2020-05-30 21:15:58,452 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:15:58,476 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:15:58,593 INFO  L134       CoverageAnalysis]: Checked inductivity of 77 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 77 trivial. 0 not checked.
[2020-05-30 21:15:58,593 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:15:58,593 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-30 21:15:58,594 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:15:58,594 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 21:15:58,594 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-30 21:15:58,594 INFO  L87              Difference]: Start difference. First operand 19343 states and 20993 transitions. cyclomatic complexity: 1676 Second operand 4 states.
[2020-05-30 21:15:58,745 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:15:58,745 INFO  L93              Difference]: Finished difference Result 19423 states and 21077 transitions.
[2020-05-30 21:15:58,746 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-30 21:15:58,746 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 19423 states and 21077 transitions.
[2020-05-30 21:15:58,785 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:15:58,825 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 19423 states to 19407 states and 21061 transitions.
[2020-05-30 21:15:58,825 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 699
[2020-05-30 21:15:58,825 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 699
[2020-05-30 21:15:58,825 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 19407 states and 21061 transitions.
[2020-05-30 21:15:58,835 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:15:58,835 INFO  L728         BuchiCegarLoop]: Abstraction has 19407 states and 21061 transitions.
[2020-05-30 21:15:58,851 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 19407 states and 21061 transitions.
[2020-05-30 21:15:58,945 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 19407 to 19407.
[2020-05-30 21:15:58,945 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 19407 states.
[2020-05-30 21:15:58,968 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 19407 states to 19407 states and 21061 transitions.
[2020-05-30 21:15:58,968 INFO  L751         BuchiCegarLoop]: Abstraction has 19407 states and 21061 transitions.
[2020-05-30 21:15:58,968 INFO  L631         BuchiCegarLoop]: Abstraction has 19407 states and 21061 transitions.
[2020-05-30 21:15:58,968 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-05-30 21:15:58,968 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 19407 states and 21061 transitions.
[2020-05-30 21:15:58,991 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:15:58,991 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:15:58,991 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:15:58,993 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:15:58,993 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND TRUE   DType[to] == DepositLockerInterface
[L4272]                    assume amount == 0;
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND FALSE  !(Balance[from] >= amount)
[L5043]                    success := false;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:15:58,998 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:15:58,998 INFO  L82        PathProgramCache]: Analyzing trace with hash -425867267, now seen corresponding path program 1 times
[2020-05-30 21:15:58,999 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:15:59,024 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:15:59,198 INFO  L134       CoverageAnalysis]: Checked inductivity of 77 backedges. 5 proven. 0 refuted. 0 times theorem prover too weak. 72 trivial. 0 not checked.
[2020-05-30 21:15:59,198 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:15:59,198 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-05-30 21:15:59,199 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:15:59,199 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-30 21:15:59,199 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-30 21:15:59,199 INFO  L87              Difference]: Start difference. First operand 19407 states and 21061 transitions. cyclomatic complexity: 1680 Second operand 8 states.
[2020-05-30 21:15:59,637 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:15:59,637 INFO  L93              Difference]: Finished difference Result 19655 states and 21325 transitions.
[2020-05-30 21:15:59,637 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-05-30 21:15:59,637 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 19655 states and 21325 transitions.
[2020-05-30 21:15:59,666 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:15:59,701 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 19655 states to 19503 states and 21161 transitions.
[2020-05-30 21:15:59,702 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 710
[2020-05-30 21:15:59,702 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 710
[2020-05-30 21:15:59,702 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 19503 states and 21161 transitions.
[2020-05-30 21:15:59,710 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:15:59,710 INFO  L728         BuchiCegarLoop]: Abstraction has 19503 states and 21161 transitions.
[2020-05-30 21:15:59,724 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 19503 states and 21161 transitions.
[2020-05-30 21:15:59,814 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 19503 to 19439.
[2020-05-30 21:15:59,814 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 19439 states.
[2020-05-30 21:15:59,835 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 19439 states to 19439 states and 21093 transitions.
[2020-05-30 21:15:59,835 INFO  L751         BuchiCegarLoop]: Abstraction has 19439 states and 21093 transitions.
[2020-05-30 21:15:59,835 INFO  L631         BuchiCegarLoop]: Abstraction has 19439 states and 21093 transitions.
[2020-05-30 21:15:59,835 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-05-30 21:15:59,835 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 19439 states and 21093 transitions.
[2020-05-30 21:15:59,856 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:15:59,856 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:15:59,856 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:15:59,858 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:15:59,858 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND TRUE   DType[to] == ValidatorAuction
[L4256]        CALL        call FallbackMethod_ValidatorAuction__success(to, from, amount);
[L2916]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2917]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2918]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2919]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L2919]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L2920]        COND FALSE  !(revert)
[L2925]                    gas := gas - 15;
[L2926]        CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L2926]        RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L2927]        COND FALSE  !(revert)
[L4256]        RET         call FallbackMethod_ValidatorAuction__success(to, from, amount);
[L4257]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:15:59,864 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:15:59,865 INFO  L82        PathProgramCache]: Analyzing trace with hash 1646584137, now seen corresponding path program 1 times
[2020-05-30 21:15:59,865 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:15:59,890 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:16:00,084 INFO  L134       CoverageAnalysis]: Checked inductivity of 133 backedges. 3 proven. 0 refuted. 0 times theorem prover too weak. 130 trivial. 0 not checked.
[2020-05-30 21:16:00,084 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:16:00,084 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-05-30 21:16:00,085 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:16:00,085 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-30 21:16:00,085 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-30 21:16:00,085 INFO  L87              Difference]: Start difference. First operand 19439 states and 21093 transitions. cyclomatic complexity: 1680 Second operand 8 states.
[2020-05-30 21:16:01,048 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:16:01,048 INFO  L93              Difference]: Finished difference Result 19755 states and 21421 transitions.
[2020-05-30 21:16:01,049 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-05-30 21:16:01,049 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 19755 states and 21421 transitions.
[2020-05-30 21:16:01,087 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:16:01,125 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 19755 states to 19479 states and 21129 transitions.
[2020-05-30 21:16:01,126 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 707
[2020-05-30 21:16:01,126 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 707
[2020-05-30 21:16:01,126 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 19479 states and 21129 transitions.
[2020-05-30 21:16:01,134 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:16:01,134 INFO  L728         BuchiCegarLoop]: Abstraction has 19479 states and 21129 transitions.
[2020-05-30 21:16:01,148 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 19479 states and 21129 transitions.
[2020-05-30 21:16:01,238 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 19479 to 19319.
[2020-05-30 21:16:01,238 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 19319 states.
[2020-05-30 21:16:01,259 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 19319 states to 19319 states and 20965 transitions.
[2020-05-30 21:16:01,259 INFO  L751         BuchiCegarLoop]: Abstraction has 19319 states and 20965 transitions.
[2020-05-30 21:16:01,259 INFO  L631         BuchiCegarLoop]: Abstraction has 19319 states and 20965 transitions.
[2020-05-30 21:16:01,259 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-05-30 21:16:01,259 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 19319 states and 20965 transitions.
[2020-05-30 21:16:01,279 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:16:01,279 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:16:01,280 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:16:01,281 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:16:01,281 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND TRUE   DType[to] == Ownable
[L4276]                    assume amount == 0;
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND TRUE   DType[to] == Ownable
[L4276]                    assume amount == 0;
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:16:01,286 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:16:01,286 INFO  L82        PathProgramCache]: Analyzing trace with hash -2066978156, now seen corresponding path program 1 times
[2020-05-30 21:16:01,287 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:16:01,310 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:16:01,494 INFO  L134       CoverageAnalysis]: Checked inductivity of 77 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 71 trivial. 0 not checked.
[2020-05-30 21:16:01,494 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:16:01,494 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-05-30 21:16:01,495 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:16:01,495 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-30 21:16:01,495 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-30 21:16:01,495 INFO  L87              Difference]: Start difference. First operand 19319 states and 20965 transitions. cyclomatic complexity: 1672 Second operand 8 states.
[2020-05-30 21:16:01,939 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:16:01,939 INFO  L93              Difference]: Finished difference Result 19567 states and 21229 transitions.
[2020-05-30 21:16:01,939 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-05-30 21:16:01,939 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 19567 states and 21229 transitions.
[2020-05-30 21:16:01,969 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:16:02,004 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 19567 states to 19415 states and 21065 transitions.
[2020-05-30 21:16:02,004 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 699
[2020-05-30 21:16:02,005 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 699
[2020-05-30 21:16:02,005 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 19415 states and 21065 transitions.
[2020-05-30 21:16:02,013 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:16:02,013 INFO  L728         BuchiCegarLoop]: Abstraction has 19415 states and 21065 transitions.
[2020-05-30 21:16:02,027 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 19415 states and 21065 transitions.
[2020-05-30 21:16:02,116 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 19415 to 19319.
[2020-05-30 21:16:02,116 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 19319 states.
[2020-05-30 21:16:02,136 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 19319 states to 19319 states and 20965 transitions.
[2020-05-30 21:16:02,137 INFO  L751         BuchiCegarLoop]: Abstraction has 19319 states and 20965 transitions.
[2020-05-30 21:16:02,137 INFO  L631         BuchiCegarLoop]: Abstraction has 19319 states and 20965 transitions.
[2020-05-30 21:16:02,137 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-05-30 21:16:02,137 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 19319 states and 20965 transitions.
[2020-05-30 21:16:02,157 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:16:02,158 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:16:02,158 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:16:02,159 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:16:02,159 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND TRUE   DType[to] == DepositLocker
[L4264]        CALL        call FallbackMethod_DepositLocker__success(to, from, amount);
[L4264]        RET         call FallbackMethod_DepositLocker__success(to, from, amount);
[L4265]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND FALSE  !(Balance[from] >= amount)
[L5043]                    success := false;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:16:02,164 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:16:02,164 INFO  L82        PathProgramCache]: Analyzing trace with hash 1732100443, now seen corresponding path program 1 times
[2020-05-30 21:16:02,165 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:16:02,189 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:16:02,318 INFO  L134       CoverageAnalysis]: Checked inductivity of 77 backedges. 4 proven. 0 refuted. 0 times theorem prover too weak. 73 trivial. 0 not checked.
[2020-05-30 21:16:02,318 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:16:02,319 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-05-30 21:16:02,319 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:16:02,319 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-30 21:16:02,319 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-30 21:16:02,319 INFO  L87              Difference]: Start difference. First operand 19319 states and 20965 transitions. cyclomatic complexity: 1672 Second operand 8 states.
[2020-05-30 21:16:03,320 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:16:03,321 INFO  L93              Difference]: Finished difference Result 19567 states and 21229 transitions.
[2020-05-30 21:16:03,321 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-05-30 21:16:03,321 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 19567 states and 21229 transitions.
[2020-05-30 21:16:03,361 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:16:03,400 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 19567 states to 19415 states and 21065 transitions.
[2020-05-30 21:16:03,400 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 699
[2020-05-30 21:16:03,400 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 699
[2020-05-30 21:16:03,401 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 19415 states and 21065 transitions.
[2020-05-30 21:16:03,409 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:16:03,409 INFO  L728         BuchiCegarLoop]: Abstraction has 19415 states and 21065 transitions.
[2020-05-30 21:16:03,423 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 19415 states and 21065 transitions.
[2020-05-30 21:16:03,513 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 19415 to 19319.
[2020-05-30 21:16:03,513 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 19319 states.
[2020-05-30 21:16:03,536 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 19319 states to 19319 states and 20965 transitions.
[2020-05-30 21:16:03,537 INFO  L751         BuchiCegarLoop]: Abstraction has 19319 states and 20965 transitions.
[2020-05-30 21:16:03,537 INFO  L631         BuchiCegarLoop]: Abstraction has 19319 states and 20965 transitions.
[2020-05-30 21:16:03,537 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-05-30 21:16:03,537 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 19319 states and 20965 transitions.
[2020-05-30 21:16:03,559 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:16:03,559 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:16:03,559 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:16:03,561 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:16:03,561 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]  CALL        call CorralChoice_ValidatorAuction(this);
[L5446]              havoc msgsender_MSG;
[L5447]              havoc msgvalue_MSG;
[L5448]              havoc choice;
[L5449]              havoc newOwner_s43;
[L5450]              havoc _startPriceInWei_s578;
[L5451]              havoc _auctionDurationInDays_s578;
[L5452]              havoc _minimalNumberOfParticipants_s578;
[L5453]              havoc _maximalNumberOfParticipants_s578;
[L5454]              havoc _depositLocker_s578;
[L5455]              havoc addressesToWhitelist_s852;
[L5456]              havoc __ret_0_currentPrice;
[L5457]              havoc secondsSinceStart_s978;
[L5458]              havoc __ret_0_priceAtElapsedTime;
[L5459]              havoc tmpNow;
[L5460]              havoc gas;
[L5461]              assume gas > 4000000 && gas <= 8000000;
[L5462]              tmpNow := now;
[L5463]              havoc now;
[L5464]              assume now > tmpNow;
[L5465]              assume msgsender_MSG != null;
[L5466]              assume DType[msgsender_MSG] != Ownable;
[L5467]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]              assume DType[msgsender_MSG] != DepositLocker;
[L5469]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]              Alloc[msgsender_MSG] := true;
[L5471]  COND FALSE  !(choice == 9)
[L5480]  COND FALSE  !(choice == 8)
[L5489]  COND FALSE  !(choice == 7)
[L5498]  COND FALSE  !(choice == 6)
[L5507]  COND FALSE  !(choice == 5)
[L5516]  COND FALSE  !(choice == 4)
[L5525]  COND FALSE  !(choice == 3)
[L5535]  COND FALSE  !(choice == 2)
[L5544]  COND FALSE  !(choice == 1)
[L5577]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:16:03,565 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:16:03,566 INFO  L82        PathProgramCache]: Analyzing trace with hash -1251751789, now seen corresponding path program 1 times
[2020-05-30 21:16:03,566 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:16:03,592 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:16:03,730 INFO  L134       CoverageAnalysis]: Checked inductivity of 77 backedges. 29 proven. 0 refuted. 0 times theorem prover too weak. 48 trivial. 0 not checked.
[2020-05-30 21:16:03,731 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:16:03,731 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-05-30 21:16:03,731 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:16:03,731 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:16:03,731 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=107, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:16:03,731 INFO  L87              Difference]: Start difference. First operand 19319 states and 20965 transitions. cyclomatic complexity: 1672 Second operand 12 states.
[2020-05-30 21:16:11,363 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:16:11,363 INFO  L93              Difference]: Finished difference Result 21452 states and 23662 transitions.
[2020-05-30 21:16:11,364 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-30 21:16:11,364 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21452 states and 23662 transitions.
[2020-05-30 21:16:11,409 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:16:11,457 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21452 states to 21452 states and 23662 transitions.
[2020-05-30 21:16:11,457 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 800
[2020-05-30 21:16:11,458 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 800
[2020-05-30 21:16:11,458 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21452 states and 23662 transitions.
[2020-05-30 21:16:11,469 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:16:11,469 INFO  L728         BuchiCegarLoop]: Abstraction has 21452 states and 23662 transitions.
[2020-05-30 21:16:11,484 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21452 states and 23662 transitions.
[2020-05-30 21:16:11,592 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21452 to 21090.
[2020-05-30 21:16:11,592 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21090 states.
[2020-05-30 21:16:11,618 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21090 states to 21090 states and 23256 transitions.
[2020-05-30 21:16:11,618 INFO  L751         BuchiCegarLoop]: Abstraction has 21090 states and 23256 transitions.
[2020-05-30 21:16:11,618 INFO  L631         BuchiCegarLoop]: Abstraction has 21090 states and 23256 transitions.
[2020-05-30 21:16:11,618 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-05-30 21:16:11,618 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21090 states and 23256 transitions.
[2020-05-30 21:16:11,641 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:16:11,641 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:16:11,641 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:16:11,643 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:16:11,643 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]  CALL        call CorralChoice_ValidatorAuction(this);
[L5446]              havoc msgsender_MSG;
[L5447]              havoc msgvalue_MSG;
[L5448]              havoc choice;
[L5449]              havoc newOwner_s43;
[L5450]              havoc _startPriceInWei_s578;
[L5451]              havoc _auctionDurationInDays_s578;
[L5452]              havoc _minimalNumberOfParticipants_s578;
[L5453]              havoc _maximalNumberOfParticipants_s578;
[L5454]              havoc _depositLocker_s578;
[L5455]              havoc addressesToWhitelist_s852;
[L5456]              havoc __ret_0_currentPrice;
[L5457]              havoc secondsSinceStart_s978;
[L5458]              havoc __ret_0_priceAtElapsedTime;
[L5459]              havoc tmpNow;
[L5460]              havoc gas;
[L5461]              assume gas > 4000000 && gas <= 8000000;
[L5462]              tmpNow := now;
[L5463]              havoc now;
[L5464]              assume now > tmpNow;
[L5465]              assume msgsender_MSG != null;
[L5466]              assume DType[msgsender_MSG] != Ownable;
[L5467]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]              assume DType[msgsender_MSG] != DepositLocker;
[L5469]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]              Alloc[msgsender_MSG] := true;
[L5471]  COND TRUE   choice == 9
[L5473]              gas := gas - 21000;
[L5474]  COND FALSE  !(gas >= 0)
[L5577]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:16:11,647 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:16:11,648 INFO  L82        PathProgramCache]: Analyzing trace with hash 94785816, now seen corresponding path program 1 times
[2020-05-30 21:16:11,648 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:16:11,672 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:16:11,818 INFO  L134       CoverageAnalysis]: Checked inductivity of 83 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 83 trivial. 0 not checked.
[2020-05-30 21:16:11,819 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:16:11,819 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-05-30 21:16:11,819 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:16:11,819 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:16:11,819 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=129, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:16:11,820 INFO  L87              Difference]: Start difference. First operand 21090 states and 23256 transitions. cyclomatic complexity: 2192 Second operand 13 states.
[2020-05-30 21:16:23,610 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:16:23,610 INFO  L93              Difference]: Finished difference Result 23457 states and 26298 transitions.
[2020-05-30 21:16:23,610 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-05-30 21:16:23,610 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 23457 states and 26298 transitions.
[2020-05-30 21:16:23,662 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-05-30 21:16:23,718 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 23457 states to 23457 states and 26298 transitions.
[2020-05-30 21:16:23,718 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 875
[2020-05-30 21:16:23,719 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 875
[2020-05-30 21:16:23,719 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 23457 states and 26298 transitions.
[2020-05-30 21:16:23,733 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:16:23,733 INFO  L728         BuchiCegarLoop]: Abstraction has 23457 states and 26298 transitions.
[2020-05-30 21:16:23,749 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 23457 states and 26298 transitions.
[2020-05-30 21:16:23,873 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 23457 to 23040.
[2020-05-30 21:16:23,873 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 23040 states.
[2020-05-30 21:16:23,902 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 23040 states to 23040 states and 25823 transitions.
[2020-05-30 21:16:23,902 INFO  L751         BuchiCegarLoop]: Abstraction has 23040 states and 25823 transitions.
[2020-05-30 21:16:23,902 INFO  L631         BuchiCegarLoop]: Abstraction has 23040 states and 25823 transitions.
[2020-05-30 21:16:23,902 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-05-30 21:16:23,903 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 23040 states and 25823 transitions.
[2020-05-30 21:16:23,927 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-05-30 21:16:23,928 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:16:23,928 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:16:23,929 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:16:23,929 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND FALSE  !(Balance[from] >= amount)
[L5043]                    success := false;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:16:23,934 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:16:23,934 INFO  L82        PathProgramCache]: Analyzing trace with hash -1094060060, now seen corresponding path program 1 times
[2020-05-30 21:16:23,935 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:16:23,960 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:16:24,103 INFO  L134       CoverageAnalysis]: Checked inductivity of 83 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 83 trivial. 0 not checked.
[2020-05-30 21:16:24,103 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:16:24,104 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-05-30 21:16:24,104 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:16:24,104 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:16:24,105 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=129, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:16:24,105 INFO  L87              Difference]: Start difference. First operand 23040 states and 25823 transitions. cyclomatic complexity: 2809 Second operand 13 states.
[2020-05-30 21:16:36,196 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:16:36,196 INFO  L93              Difference]: Finished difference Result 25300 states and 28701 transitions.
[2020-05-30 21:16:36,196 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-05-30 21:16:36,196 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 25300 states and 28701 transitions.
[2020-05-30 21:16:36,256 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-30 21:16:36,323 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 25300 states to 25300 states and 28701 transitions.
[2020-05-30 21:16:36,323 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 930
[2020-05-30 21:16:36,323 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 930
[2020-05-30 21:16:36,324 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 25300 states and 28701 transitions.
[2020-05-30 21:16:36,338 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:16:36,338 INFO  L728         BuchiCegarLoop]: Abstraction has 25300 states and 28701 transitions.
[2020-05-30 21:16:36,356 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 25300 states and 28701 transitions.
[2020-05-30 21:16:36,497 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 25300 to 24872.
[2020-05-30 21:16:36,497 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 24872 states.
[2020-05-30 21:16:36,532 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 24872 states to 24872 states and 28211 transitions.
[2020-05-30 21:16:36,532 INFO  L751         BuchiCegarLoop]: Abstraction has 24872 states and 28211 transitions.
[2020-05-30 21:16:36,532 INFO  L631         BuchiCegarLoop]: Abstraction has 24872 states and 28211 transitions.
[2020-05-30 21:16:36,532 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-05-30 21:16:36,532 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 24872 states and 28211 transitions.
[2020-05-30 21:16:36,561 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-30 21:16:36,561 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:16:36,561 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:16:36,563 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:16:36,563 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND TRUE   choice == 5
[L5509]                    gas := gas - 21000;
[L5510]        COND TRUE   gas >= 0
[L5512]                    assume msgvalue_MSG == 0;
[L5513]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5513]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(low == lowestSlotPrice_ValidatorAuction[this]);
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND FALSE  !(Balance[from] >= amount)
[L5043]                    success := false;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:16:36,569 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:16:36,570 INFO  L82        PathProgramCache]: Analyzing trace with hash 1565678323, now seen corresponding path program 1 times
[2020-05-30 21:16:36,570 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:16:36,607 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:16:36,856 INFO  L134       CoverageAnalysis]: Checked inductivity of 172 backedges. 4 proven. 31 refuted. 0 times theorem prover too weak. 137 trivial. 0 not checked.
[2020-05-30 21:16:36,856 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:16:36,856 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-05-30 21:16:36,857 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:16:36,857 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-30 21:16:36,857 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=14, Invalid=42, Unknown=0, NotChecked=0, Total=56
[2020-05-30 21:16:36,857 INFO  L87              Difference]: Start difference. First operand 24872 states and 28211 transitions. cyclomatic complexity: 3365 Second operand 8 states.
[2020-05-30 21:16:46,123 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:16:46,124 INFO  L93              Difference]: Finished difference Result 31558 states and 37777 transitions.
[2020-05-30 21:16:46,124 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-05-30 21:16:46,124 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 31558 states and 37777 transitions.
[2020-05-30 21:16:46,209 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 32
[2020-05-30 21:16:46,317 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 31558 states to 31558 states and 37777 transitions.
[2020-05-30 21:16:46,317 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1132
[2020-05-30 21:16:46,318 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1132
[2020-05-30 21:16:46,318 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 31558 states and 37777 transitions.
[2020-05-30 21:16:46,342 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:16:46,342 INFO  L728         BuchiCegarLoop]: Abstraction has 31558 states and 37777 transitions.
[2020-05-30 21:16:46,363 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 31558 states and 37777 transitions.
[2020-05-30 21:16:46,572 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 31558 to 31506.
[2020-05-30 21:16:46,572 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 31506 states.
[2020-05-30 21:16:46,623 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 31506 states to 31506 states and 37711 transitions.
[2020-05-30 21:16:46,623 INFO  L751         BuchiCegarLoop]: Abstraction has 31506 states and 37711 transitions.
[2020-05-30 21:16:46,623 INFO  L631         BuchiCegarLoop]: Abstraction has 31506 states and 37711 transitions.
[2020-05-30 21:16:46,623 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-05-30 21:16:46,623 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 31506 states and 37711 transitions.
[2020-05-30 21:16:46,662 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 32
[2020-05-30 21:16:46,662 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:16:46,662 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:16:46,664 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:16:46,664 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND TRUE   choice == 5
[L5509]                    gas := gas - 21000;
[L5510]        COND TRUE   gas >= 0
[L5512]                    assume msgvalue_MSG == 0;
[L5513]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5513]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND FALSE  !(Balance[from] >= amount)
[L5043]                    success := false;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:16:46,671 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:16:46,671 INFO  L82        PathProgramCache]: Analyzing trace with hash -481853790, now seen corresponding path program 1 times
[2020-05-30 21:16:46,671 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:16:46,697 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:16:46,971 INFO  L134       CoverageAnalysis]: Checked inductivity of 172 backedges. 2 proven. 32 refuted. 0 times theorem prover too weak. 138 trivial. 0 not checked.
[2020-05-30 21:16:46,971 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:16:46,971 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-05-30 21:16:46,972 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:16:46,972 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:16:46,972 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=131, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:16:46,972 INFO  L87              Difference]: Start difference. First operand 31506 states and 37711 transitions. cyclomatic complexity: 6231 Second operand 13 states.
[2020-05-30 21:16:58,849 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:16:58,850 INFO  L93              Difference]: Finished difference Result 31886 states and 38025 transitions.
[2020-05-30 21:16:58,850 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-30 21:16:58,850 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 31886 states and 38025 transitions.
[2020-05-30 21:16:58,935 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 32
[2020-05-30 21:16:59,034 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 31886 states to 31854 states and 37977 transitions.
[2020-05-30 21:16:59,035 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1186
[2020-05-30 21:16:59,035 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1186
[2020-05-30 21:16:59,036 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 31854 states and 37977 transitions.
[2020-05-30 21:16:59,058 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:16:59,058 INFO  L728         BuchiCegarLoop]: Abstraction has 31854 states and 37977 transitions.
[2020-05-30 21:16:59,080 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 31854 states and 37977 transitions.
[2020-05-30 21:16:59,273 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 31854 to 31053.
[2020-05-30 21:16:59,274 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 31053 states.
[2020-05-30 21:16:59,322 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 31053 states to 31053 states and 37022 transitions.
[2020-05-30 21:16:59,323 INFO  L751         BuchiCegarLoop]: Abstraction has 31053 states and 37022 transitions.
[2020-05-30 21:16:59,323 INFO  L631         BuchiCegarLoop]: Abstraction has 31053 states and 37022 transitions.
[2020-05-30 21:16:59,323 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-05-30 21:16:59,323 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 31053 states and 37022 transitions.
[2020-05-30 21:16:59,359 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 32
[2020-05-30 21:16:59,359 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:16:59,359 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:16:59,361 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:16:59,361 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND TRUE   choice == 5
[L5509]                    gas := gas - 21000;
[L5510]        COND TRUE   gas >= 0
[L5512]                    assume msgvalue_MSG == 0;
[L5513]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5513]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND FALSE  !(Balance[from] >= amount)
[L5043]                    success := false;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:16:59,367 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:16:59,367 INFO  L82        PathProgramCache]: Analyzing trace with hash 693249766, now seen corresponding path program 1 times
[2020-05-30 21:16:59,368 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:16:59,404 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:16:59,716 INFO  L134       CoverageAnalysis]: Checked inductivity of 274 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 272 trivial. 0 not checked.
[2020-05-30 21:16:59,716 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:16:59,716 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 21:16:59,717 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:16:59,717 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:16:59,717 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=109, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:16:59,717 INFO  L87              Difference]: Start difference. First operand 31053 states and 37022 transitions. cyclomatic complexity: 5995 Second operand 12 states.
[2020-05-30 21:17:10,960 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:17:10,961 INFO  L93              Difference]: Finished difference Result 34514 states and 42107 transitions.
[2020-05-30 21:17:10,961 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-30 21:17:10,961 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 34514 states and 42107 transitions.
[2020-05-30 21:17:11,055 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 40
[2020-05-30 21:17:11,255 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 34514 states to 34514 states and 42107 transitions.
[2020-05-30 21:17:11,255 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1248
[2020-05-30 21:17:11,256 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1248
[2020-05-30 21:17:11,256 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 34514 states and 42107 transitions.
[2020-05-30 21:17:11,279 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:17:11,280 INFO  L728         BuchiCegarLoop]: Abstraction has 34514 states and 42107 transitions.
[2020-05-30 21:17:11,298 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 34514 states and 42107 transitions.
[2020-05-30 21:17:11,510 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 34514 to 34273.
[2020-05-30 21:17:11,510 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 34273 states.
[2020-05-30 21:17:11,565 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 34273 states to 34273 states and 41600 transitions.
[2020-05-30 21:17:11,565 INFO  L751         BuchiCegarLoop]: Abstraction has 34273 states and 41600 transitions.
[2020-05-30 21:17:11,565 INFO  L631         BuchiCegarLoop]: Abstraction has 34273 states and 41600 transitions.
[2020-05-30 21:17:11,565 INFO  L445         BuchiCegarLoop]: ======== Iteration 23============
[2020-05-30 21:17:11,566 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 34273 states and 41600 transitions.
[2020-05-30 21:17:11,602 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 40
[2020-05-30 21:17:11,603 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:17:11,603 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:17:11,604 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:17:11,605 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG);
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]  CALL        call CorralChoice_ValidatorAuction(this);
[L5446]              havoc msgsender_MSG;
[L5447]              havoc msgvalue_MSG;
[L5448]              havoc choice;
[L5449]              havoc newOwner_s43;
[L5450]              havoc _startPriceInWei_s578;
[L5451]              havoc _auctionDurationInDays_s578;
[L5452]              havoc _minimalNumberOfParticipants_s578;
[L5453]              havoc _maximalNumberOfParticipants_s578;
[L5454]              havoc _depositLocker_s578;
[L5455]              havoc addressesToWhitelist_s852;
[L5456]              havoc __ret_0_currentPrice;
[L5457]              havoc secondsSinceStart_s978;
[L5458]              havoc __ret_0_priceAtElapsedTime;
[L5459]              havoc tmpNow;
[L5460]              havoc gas;
[L5461]              assume gas > 4000000 && gas <= 8000000;
[L5462]              tmpNow := now;
[L5463]              havoc now;
[L5464]              assume now > tmpNow;
[L5465]              assume msgsender_MSG != null;
[L5466]              assume DType[msgsender_MSG] != Ownable;
[L5467]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]              assume DType[msgsender_MSG] != DepositLocker;
[L5469]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]              Alloc[msgsender_MSG] := true;
[L5471]  COND FALSE  !(choice == 9)
[L5480]  COND FALSE  !(choice == 8)
[L5489]  COND FALSE  !(choice == 7)
[L5498]  COND FALSE  !(choice == 6)
[L5507]  COND FALSE  !(choice == 5)
[L5516]  COND FALSE  !(choice == 4)
[L5525]  COND FALSE  !(choice == 3)
[L5535]  COND FALSE  !(choice == 2)
[L5544]  COND FALSE  !(choice == 1)
[L5577]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:17:11,612 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:17:11,613 INFO  L82        PathProgramCache]: Analyzing trace with hash -1747857405, now seen corresponding path program 1 times
[2020-05-30 21:17:11,613 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:17:11,637 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:17:11,878 INFO  L134       CoverageAnalysis]: Checked inductivity of 139 backedges. 4 proven. 34 refuted. 0 times theorem prover too weak. 101 trivial. 0 not checked.
[2020-05-30 21:17:11,878 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:17:11,878 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-05-30 21:17:11,878 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:17:11,879 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:17:11,879 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=133, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:17:11,879 INFO  L87              Difference]: Start difference. First operand 34273 states and 41600 transitions. cyclomatic complexity: 7353 Second operand 13 states.
[2020-05-30 21:17:25,136 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:17:25,136 INFO  L93              Difference]: Finished difference Result 34696 states and 42111 transitions.
[2020-05-30 21:17:25,136 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-05-30 21:17:25,136 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 34696 states and 42111 transitions.
[2020-05-30 21:17:25,221 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 40
[2020-05-30 21:17:25,326 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 34696 states to 34696 states and 42111 transitions.
[2020-05-30 21:17:25,326 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1259
[2020-05-30 21:17:25,327 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1259
[2020-05-30 21:17:25,327 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 34696 states and 42111 transitions.
[2020-05-30 21:17:25,348 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:17:25,348 INFO  L728         BuchiCegarLoop]: Abstraction has 34696 states and 42111 transitions.
[2020-05-30 21:17:25,367 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 34696 states and 42111 transitions.
[2020-05-30 21:17:25,573 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 34696 to 31834.
[2020-05-30 21:17:25,573 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 31834 states.
[2020-05-30 21:17:25,625 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 31834 states to 31834 states and 37761 transitions.
[2020-05-30 21:17:25,625 INFO  L751         BuchiCegarLoop]: Abstraction has 31834 states and 37761 transitions.
[2020-05-30 21:17:25,625 INFO  L631         BuchiCegarLoop]: Abstraction has 31834 states and 37761 transitions.
[2020-05-30 21:17:25,625 INFO  L445         BuchiCegarLoop]: ======== Iteration 24============
[2020-05-30 21:17:25,625 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 31834 states and 37761 transitions.
[2020-05-30 21:17:25,664 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 20
[2020-05-30 21:17:25,664 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:17:25,664 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:17:25,666 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:17:25,666 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND TRUE   choice == 5
[L5509]                    gas := gas - 21000;
[L5510]        COND TRUE   gas >= 0
[L5512]                    assume msgvalue_MSG == 0;
[L5513]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5513]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]  CALL        call CorralChoice_ValidatorAuction(this);
[L5446]              havoc msgsender_MSG;
[L5447]              havoc msgvalue_MSG;
[L5448]              havoc choice;
[L5449]              havoc newOwner_s43;
[L5450]              havoc _startPriceInWei_s578;
[L5451]              havoc _auctionDurationInDays_s578;
[L5452]              havoc _minimalNumberOfParticipants_s578;
[L5453]              havoc _maximalNumberOfParticipants_s578;
[L5454]              havoc _depositLocker_s578;
[L5455]              havoc addressesToWhitelist_s852;
[L5456]              havoc __ret_0_currentPrice;
[L5457]              havoc secondsSinceStart_s978;
[L5458]              havoc __ret_0_priceAtElapsedTime;
[L5459]              havoc tmpNow;
[L5460]              havoc gas;
[L5461]              assume gas > 4000000 && gas <= 8000000;
[L5462]              tmpNow := now;
[L5463]              havoc now;
[L5464]              assume now > tmpNow;
[L5465]              assume msgsender_MSG != null;
[L5466]              assume DType[msgsender_MSG] != Ownable;
[L5467]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]              assume DType[msgsender_MSG] != DepositLocker;
[L5469]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]              Alloc[msgsender_MSG] := true;
[L5471]  COND TRUE   choice == 9
[L5473]              gas := gas - 21000;
[L5474]  COND FALSE  !(gas >= 0)
[L5577]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:17:25,671 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:17:25,672 INFO  L82        PathProgramCache]: Analyzing trace with hash 399917754, now seen corresponding path program 1 times
[2020-05-30 21:17:25,672 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:17:25,705 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:17:25,870 INFO  L134       CoverageAnalysis]: Checked inductivity of 119 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 119 trivial. 0 not checked.
[2020-05-30 21:17:25,870 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:17:25,870 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-30 21:17:25,871 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:17:25,871 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 21:17:25,871 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 21:17:25,871 INFO  L87              Difference]: Start difference. First operand 31834 states and 37761 transitions. cyclomatic complexity: 5953 Second operand 3 states.
[2020-05-30 21:17:26,167 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:17:26,167 INFO  L93              Difference]: Finished difference Result 31962 states and 38113 transitions.
[2020-05-30 21:17:26,167 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 21:17:26,168 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 31962 states and 38113 transitions.
[2020-05-30 21:17:26,253 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 20
[2020-05-30 21:17:26,363 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 31962 states to 31962 states and 38113 transitions.
[2020-05-30 21:17:26,363 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1157
[2020-05-30 21:17:26,364 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1157
[2020-05-30 21:17:26,364 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 31962 states and 38113 transitions.
[2020-05-30 21:17:26,389 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:17:26,389 INFO  L728         BuchiCegarLoop]: Abstraction has 31962 states and 38113 transitions.
[2020-05-30 21:17:26,408 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 31962 states and 38113 transitions.
[2020-05-30 21:17:26,608 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 31962 to 31930.
[2020-05-30 21:17:26,609 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 31930 states.
[2020-05-30 21:17:26,660 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 31930 states to 31930 states and 37969 transitions.
[2020-05-30 21:17:26,660 INFO  L751         BuchiCegarLoop]: Abstraction has 31930 states and 37969 transitions.
[2020-05-30 21:17:26,660 INFO  L631         BuchiCegarLoop]: Abstraction has 31930 states and 37969 transitions.
[2020-05-30 21:17:26,660 INFO  L445         BuchiCegarLoop]: ======== Iteration 25============
[2020-05-30 21:17:26,661 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 31930 states and 37969 transitions.
[2020-05-30 21:17:26,696 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 20
[2020-05-30 21:17:26,697 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:17:26,697 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:17:26,699 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:17:26,699 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND TRUE   choice == 5
[L5509]                    gas := gas - 21000;
[L5510]        COND TRUE   gas >= 0
[L5512]                    assume msgvalue_MSG == 0;
[L5513]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5513]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]  CALL        call CorralChoice_ValidatorAuction(this);
[L5446]              havoc msgsender_MSG;
[L5447]              havoc msgvalue_MSG;
[L5448]              havoc choice;
[L5449]              havoc newOwner_s43;
[L5450]              havoc _startPriceInWei_s578;
[L5451]              havoc _auctionDurationInDays_s578;
[L5452]              havoc _minimalNumberOfParticipants_s578;
[L5453]              havoc _maximalNumberOfParticipants_s578;
[L5454]              havoc _depositLocker_s578;
[L5455]              havoc addressesToWhitelist_s852;
[L5456]              havoc __ret_0_currentPrice;
[L5457]              havoc secondsSinceStart_s978;
[L5458]              havoc __ret_0_priceAtElapsedTime;
[L5459]              havoc tmpNow;
[L5460]              havoc gas;
[L5461]              assume gas > 4000000 && gas <= 8000000;
[L5462]              tmpNow := now;
[L5463]              havoc now;
[L5464]              assume now > tmpNow;
[L5465]              assume msgsender_MSG != null;
[L5466]              assume DType[msgsender_MSG] != Ownable;
[L5467]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]              assume DType[msgsender_MSG] != DepositLocker;
[L5469]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]              Alloc[msgsender_MSG] := true;
[L5471]  COND TRUE   choice == 9
[L5473]              gas := gas - 21000;
[L5474]  COND FALSE  !(gas >= 0)
[L5577]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:17:26,704 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:17:26,704 INFO  L82        PathProgramCache]: Analyzing trace with hash 2075022190, now seen corresponding path program 1 times
[2020-05-30 21:17:26,704 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:17:26,737 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:17:27,050 INFO  L134       CoverageAnalysis]: Checked inductivity of 119 backedges. 32 proven. 0 refuted. 0 times theorem prover too weak. 87 trivial. 0 not checked.
[2020-05-30 21:17:27,050 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:17:27,051 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-05-30 21:17:27,051 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:17:27,051 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:17:27,051 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=133, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:17:27,051 INFO  L87              Difference]: Start difference. First operand 31930 states and 37969 transitions. cyclomatic complexity: 6065 Second operand 13 states.
[2020-05-30 21:17:46,375 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:17:46,376 INFO  L93              Difference]: Finished difference Result 41006 states and 50714 transitions.
[2020-05-30 21:17:46,376 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-05-30 21:17:46,376 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 41006 states and 50714 transitions.
[2020-05-30 21:17:46,497 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 40
[2020-05-30 21:17:46,632 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 41006 states to 34415 states and 41426 transitions.
[2020-05-30 21:17:46,632 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1330
[2020-05-30 21:17:46,633 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1330
[2020-05-30 21:17:46,633 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 34415 states and 41426 transitions.
[2020-05-30 21:17:46,660 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:17:46,660 INFO  L728         BuchiCegarLoop]: Abstraction has 34415 states and 41426 transitions.
[2020-05-30 21:17:46,679 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 34415 states and 41426 transitions.
[2020-05-30 21:17:46,885 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 34415 to 34336.
[2020-05-30 21:17:46,885 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 34336 states.
[2020-05-30 21:17:46,946 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 34336 states to 34336 states and 41337 transitions.
[2020-05-30 21:17:46,946 INFO  L751         BuchiCegarLoop]: Abstraction has 34336 states and 41337 transitions.
[2020-05-30 21:17:46,946 INFO  L631         BuchiCegarLoop]: Abstraction has 34336 states and 41337 transitions.
[2020-05-30 21:17:46,947 INFO  L445         BuchiCegarLoop]: ======== Iteration 26============
[2020-05-30 21:17:46,947 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 34336 states and 41337 transitions.
[2020-05-30 21:17:46,984 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 40
[2020-05-30 21:17:46,984 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:17:46,984 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:17:46,986 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:17:46,986 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND TRUE   choice == 5
[L5509]                    gas := gas - 21000;
[L5510]        COND TRUE   gas >= 0
[L5512]                    assume msgvalue_MSG == 0;
[L5513]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5513]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:17:46,991 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:17:46,991 INFO  L82        PathProgramCache]: Analyzing trace with hash -1245714427, now seen corresponding path program 1 times
[2020-05-30 21:17:46,992 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:17:47,014 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:17:47,205 INFO  L134       CoverageAnalysis]: Checked inductivity of 119 backedges. 2 proven. 2 refuted. 0 times theorem prover too weak. 115 trivial. 0 not checked.
[2020-05-30 21:17:47,205 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:17:47,205 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-05-30 21:17:47,206 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:17:47,206 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:17:47,207 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=133, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:17:47,207 INFO  L87              Difference]: Start difference. First operand 34336 states and 41337 transitions. cyclomatic complexity: 7039 Second operand 13 states.
[2020-05-30 21:18:04,963 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:18:04,963 INFO  L93              Difference]: Finished difference Result 34211 states and 41090 transitions.
[2020-05-30 21:18:04,963 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-05-30 21:18:04,964 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 34211 states and 41090 transitions.
[2020-05-30 21:18:05,057 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 40
[2020-05-30 21:18:05,176 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 34211 states to 34179 states and 41042 transitions.
[2020-05-30 21:18:05,176 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1326
[2020-05-30 21:18:05,177 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1326
[2020-05-30 21:18:05,177 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 34179 states and 41042 transitions.
[2020-05-30 21:18:05,204 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:18:05,204 INFO  L728         BuchiCegarLoop]: Abstraction has 34179 states and 41042 transitions.
[2020-05-30 21:18:05,225 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 34179 states and 41042 transitions.
[2020-05-30 21:18:05,433 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 34179 to 32397.
[2020-05-30 21:18:05,433 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 32397 states.
[2020-05-30 21:18:05,491 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 32397 states to 32397 states and 38524 transitions.
[2020-05-30 21:18:05,491 INFO  L751         BuchiCegarLoop]: Abstraction has 32397 states and 38524 transitions.
[2020-05-30 21:18:05,491 INFO  L631         BuchiCegarLoop]: Abstraction has 32397 states and 38524 transitions.
[2020-05-30 21:18:05,491 INFO  L445         BuchiCegarLoop]: ======== Iteration 27============
[2020-05-30 21:18:05,491 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 32397 states and 38524 transitions.
[2020-05-30 21:18:05,527 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 40
[2020-05-30 21:18:05,528 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:18:05,528 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:18:05,530 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:18:05,530 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND TRUE   choice == 5
[L5509]                    gas := gas - 21000;
[L5510]        COND TRUE   gas >= 0
[L5512]                    assume msgvalue_MSG == 0;
[L5513]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5513]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]  CALL        call CorralChoice_ValidatorAuction(this);
[L5446]              havoc msgsender_MSG;
[L5447]              havoc msgvalue_MSG;
[L5448]              havoc choice;
[L5449]              havoc newOwner_s43;
[L5450]              havoc _startPriceInWei_s578;
[L5451]              havoc _auctionDurationInDays_s578;
[L5452]              havoc _minimalNumberOfParticipants_s578;
[L5453]              havoc _maximalNumberOfParticipants_s578;
[L5454]              havoc _depositLocker_s578;
[L5455]              havoc addressesToWhitelist_s852;
[L5456]              havoc __ret_0_currentPrice;
[L5457]              havoc secondsSinceStart_s978;
[L5458]              havoc __ret_0_priceAtElapsedTime;
[L5459]              havoc tmpNow;
[L5460]              havoc gas;
[L5461]              assume gas > 4000000 && gas <= 8000000;
[L5462]              tmpNow := now;
[L5463]              havoc now;
[L5464]              assume now > tmpNow;
[L5465]              assume msgsender_MSG != null;
[L5466]              assume DType[msgsender_MSG] != Ownable;
[L5467]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]              assume DType[msgsender_MSG] != DepositLocker;
[L5469]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]              Alloc[msgsender_MSG] := true;
[L5471]  COND TRUE   choice == 9
[L5473]              gas := gas - 21000;
[L5474]  COND FALSE  !(gas >= 0)
[L5577]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:18:05,535 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:18:05,535 INFO  L82        PathProgramCache]: Analyzing trace with hash 1437232885, now seen corresponding path program 1 times
[2020-05-30 21:18:05,535 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:18:05,561 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:18:05,808 INFO  L134       CoverageAnalysis]: Checked inductivity of 368 backedges. 112 proven. 35 refuted. 0 times theorem prover too weak. 221 trivial. 0 not checked.
[2020-05-30 21:18:05,808 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:18:05,809 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-05-30 21:18:05,809 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:18:05,809 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:18:05,809 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=131, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:18:05,809 INFO  L87              Difference]: Start difference. First operand 32397 states and 38524 transitions. cyclomatic complexity: 6165 Second operand 13 states.
[2020-05-30 21:18:24,788 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:18:24,789 INFO  L93              Difference]: Finished difference Result 34069 states and 40874 transitions.
[2020-05-30 21:18:24,789 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-05-30 21:18:24,789 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 34069 states and 40874 transitions.
[2020-05-30 21:18:24,887 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 40
[2020-05-30 21:18:25,003 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 34069 states to 32463 states and 38784 transitions.
[2020-05-30 21:18:25,003 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1326
[2020-05-30 21:18:25,004 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1326
[2020-05-30 21:18:25,004 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 32463 states and 38784 transitions.
[2020-05-30 21:18:25,030 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:18:25,030 INFO  L728         BuchiCegarLoop]: Abstraction has 32463 states and 38784 transitions.
[2020-05-30 21:18:25,051 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 32463 states and 38784 transitions.
[2020-05-30 21:18:25,249 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 32463 to 32199.
[2020-05-30 21:18:25,249 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 32199 states.
[2020-05-30 21:18:25,306 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 32199 states to 32199 states and 38228 transitions.
[2020-05-30 21:18:25,306 INFO  L751         BuchiCegarLoop]: Abstraction has 32199 states and 38228 transitions.
[2020-05-30 21:18:25,306 INFO  L631         BuchiCegarLoop]: Abstraction has 32199 states and 38228 transitions.
[2020-05-30 21:18:25,306 INFO  L445         BuchiCegarLoop]: ======== Iteration 28============
[2020-05-30 21:18:25,306 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 32199 states and 38228 transitions.
[2020-05-30 21:18:25,343 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 40
[2020-05-30 21:18:25,343 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:18:25,344 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:18:25,346 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [7, 7, 7, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:18:25,347 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND TRUE   choice == 5
[L5509]                    gas := gas - 21000;
[L5510]        COND TRUE   gas >= 0
[L5512]                    assume msgvalue_MSG == 0;
[L5513]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5513]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND TRUE   DType[to] == ValidatorAuction
[L4256]        CALL        call FallbackMethod_ValidatorAuction__success(to, from, amount);
[L2916]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2917]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2918]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2919]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L2919]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L2920]        COND FALSE  !(revert)
[L2925]                    gas := gas - 15;
[L2926]        CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L2926]        RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L2927]        COND FALSE  !(revert)
[L4256]        RET         call FallbackMethod_ValidatorAuction__success(to, from, amount);
[L4257]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]  CALL        call CorralChoice_ValidatorAuction(this);
[L5446]              havoc msgsender_MSG;
[L5447]              havoc msgvalue_MSG;
[L5448]              havoc choice;
[L5449]              havoc newOwner_s43;
[L5450]              havoc _startPriceInWei_s578;
[L5451]              havoc _auctionDurationInDays_s578;
[L5452]              havoc _minimalNumberOfParticipants_s578;
[L5453]              havoc _maximalNumberOfParticipants_s578;
[L5454]              havoc _depositLocker_s578;
[L5455]              havoc addressesToWhitelist_s852;
[L5456]              havoc __ret_0_currentPrice;
[L5457]              havoc secondsSinceStart_s978;
[L5458]              havoc __ret_0_priceAtElapsedTime;
[L5459]              havoc tmpNow;
[L5460]              havoc gas;
[L5461]              assume gas > 4000000 && gas <= 8000000;
[L5462]              tmpNow := now;
[L5463]              havoc now;
[L5464]              assume now > tmpNow;
[L5465]              assume msgsender_MSG != null;
[L5466]              assume DType[msgsender_MSG] != Ownable;
[L5467]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]              assume DType[msgsender_MSG] != DepositLocker;
[L5469]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]              Alloc[msgsender_MSG] := true;
[L5471]  COND TRUE   choice == 9
[L5473]              gas := gas - 21000;
[L5474]  COND FALSE  !(gas >= 0)
[L5577]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:18:25,354 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:18:25,354 INFO  L82        PathProgramCache]: Analyzing trace with hash 1317156406, now seen corresponding path program 1 times
[2020-05-30 21:18:25,354 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:18:25,386 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:18:25,896 INFO  L134       CoverageAnalysis]: Checked inductivity of 497 backedges. 112 proven. 35 refuted. 0 times theorem prover too weak. 350 trivial. 0 not checked.
[2020-05-30 21:18:25,896 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:18:25,896 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-05-30 21:18:25,897 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:18:25,897 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:18:25,897 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=131, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:18:25,897 INFO  L87              Difference]: Start difference. First operand 32199 states and 38228 transitions. cyclomatic complexity: 6077 Second operand 13 states.
[2020-05-30 21:18:43,009 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:18:43,009 INFO  L93              Difference]: Finished difference Result 27212 states and 31048 transitions.
[2020-05-30 21:18:43,009 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-05-30 21:18:43,009 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 27212 states and 31048 transitions.
[2020-05-30 21:18:43,068 INFO  L131   ngComponentsAnalysis]: Automaton has 10 accepting balls. 24
[2020-05-30 21:18:43,123 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 27212 states to 20079 states and 23052 transitions.
[2020-05-30 21:18:43,123 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1062
[2020-05-30 21:18:43,124 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1191
[2020-05-30 21:18:43,124 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 20079 states and 23052 transitions.
[2020-05-30 21:18:43,139 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:18:43,139 INFO  L728         BuchiCegarLoop]: Abstraction has 20079 states and 23052 transitions.
[2020-05-30 21:18:43,153 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 20079 states and 23052 transitions.
[2020-05-30 21:18:43,263 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 20079 to 19340.
[2020-05-30 21:18:43,263 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 19340 states.
[2020-05-30 21:18:43,292 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 19340 states to 19340 states and 21967 transitions.
[2020-05-30 21:18:43,292 INFO  L751         BuchiCegarLoop]: Abstraction has 19340 states and 21967 transitions.
[2020-05-30 21:18:43,292 INFO  L631         BuchiCegarLoop]: Abstraction has 19340 states and 21967 transitions.
[2020-05-30 21:18:43,292 INFO  L445         BuchiCegarLoop]: ======== Iteration 29============
[2020-05-30 21:18:43,292 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 19340 states and 21967 transitions.
[2020-05-30 21:18:43,313 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 22
[2020-05-30 21:18:43,313 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:18:43,313 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:18:43,315 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:18:43,315 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND TRUE   choice == 5
[L5509]                    gas := gas - 21000;
[L5510]        COND TRUE   gas >= 0
[L5512]                    assume msgvalue_MSG == 0;
[L5513]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5513]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:18:43,320 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:18:43,320 INFO  L82        PathProgramCache]: Analyzing trace with hash 1041049514, now seen corresponding path program 1 times
[2020-05-30 21:18:43,320 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:18:43,343 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:18:43,567 INFO  L134       CoverageAnalysis]: Checked inductivity of 118 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 118 trivial. 0 not checked.
[2020-05-30 21:18:43,567 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:18:43,567 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-05-30 21:18:43,568 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:18:43,568 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-30 21:18:43,568 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-05-30 21:18:43,568 INFO  L87              Difference]: Start difference. First operand 19340 states and 21967 transitions. cyclomatic complexity: 2667 Second operand 10 states.
[2020-05-30 21:18:53,554 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:18:53,555 INFO  L93              Difference]: Finished difference Result 19549 states and 22253 transitions.
[2020-05-30 21:18:53,555 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-05-30 21:18:53,555 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 19549 states and 22253 transitions.
[2020-05-30 21:18:53,606 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 22
[2020-05-30 21:18:53,663 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 19549 states to 19549 states and 22253 transitions.
[2020-05-30 21:18:53,663 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1175
[2020-05-30 21:18:53,664 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1175
[2020-05-30 21:18:53,664 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 19549 states and 22253 transitions.
[2020-05-30 21:18:53,677 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:18:53,677 INFO  L728         BuchiCegarLoop]: Abstraction has 19549 states and 22253 transitions.
[2020-05-30 21:18:53,689 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 19549 states and 22253 transitions.
[2020-05-30 21:18:53,790 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 19549 to 19365.
[2020-05-30 21:18:53,790 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 19365 states.
[2020-05-30 21:18:53,819 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 19365 states to 19365 states and 22025 transitions.
[2020-05-30 21:18:53,820 INFO  L751         BuchiCegarLoop]: Abstraction has 19365 states and 22025 transitions.
[2020-05-30 21:18:53,820 INFO  L631         BuchiCegarLoop]: Abstraction has 19365 states and 22025 transitions.
[2020-05-30 21:18:53,820 INFO  L445         BuchiCegarLoop]: ======== Iteration 30============
[2020-05-30 21:18:53,820 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 19365 states and 22025 transitions.
[2020-05-30 21:18:53,841 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 22
[2020-05-30 21:18:53,841 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:18:53,841 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:18:53,843 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:18:53,843 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND FALSE  !(choice == 4)
[L5525]        COND TRUE   choice == 3
[L5527]                    gas := gas - 21000;
[L5528]        COND TRUE   gas >= 0
[L5530]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5530]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L5531]                    assume msgvalue_MSG == 0;
[L5532]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L5532]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND TRUE   choice == 5
[L5509]                    gas := gas - 21000;
[L5510]        COND TRUE   gas >= 0
[L5512]                    assume msgvalue_MSG == 0;
[L5513]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5513]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:18:53,848 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:18:53,848 INFO  L82        PathProgramCache]: Analyzing trace with hash 1803546329, now seen corresponding path program 1 times
[2020-05-30 21:18:53,849 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:18:53,872 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:18:54,183 INFO  L134       CoverageAnalysis]: Checked inductivity of 155 backedges. 4 proven. 2 refuted. 0 times theorem prover too weak. 149 trivial. 0 not checked.
[2020-05-30 21:18:54,183 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:18:54,183 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 21:18:54,184 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:18:54,184 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:18:54,184 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=111, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:18:54,184 INFO  L87              Difference]: Start difference. First operand 19365 states and 22025 transitions. cyclomatic complexity: 2702 Second operand 12 states.
[2020-05-30 21:19:04,575 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:19:04,575 INFO  L93              Difference]: Finished difference Result 19524 states and 22290 transitions.
[2020-05-30 21:19:04,575 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-05-30 21:19:04,576 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 19524 states and 22290 transitions.
[2020-05-30 21:19:04,627 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 22
[2020-05-30 21:19:04,683 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 19524 states to 19524 states and 22290 transitions.
[2020-05-30 21:19:04,683 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1163
[2020-05-30 21:19:04,684 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1163
[2020-05-30 21:19:04,684 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 19524 states and 22290 transitions.
[2020-05-30 21:19:04,697 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:19:04,697 INFO  L728         BuchiCegarLoop]: Abstraction has 19524 states and 22290 transitions.
[2020-05-30 21:19:04,709 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 19524 states and 22290 transitions.
[2020-05-30 21:19:04,810 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 19524 to 19354.
[2020-05-30 21:19:04,810 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 19354 states.
[2020-05-30 21:19:04,839 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 19354 states to 19354 states and 21986 transitions.
[2020-05-30 21:19:04,839 INFO  L751         BuchiCegarLoop]: Abstraction has 19354 states and 21986 transitions.
[2020-05-30 21:19:04,839 INFO  L631         BuchiCegarLoop]: Abstraction has 19354 states and 21986 transitions.
[2020-05-30 21:19:04,839 INFO  L445         BuchiCegarLoop]: ======== Iteration 31============
[2020-05-30 21:19:04,839 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 19354 states and 21986 transitions.
[2020-05-30 21:19:04,860 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 22
[2020-05-30 21:19:04,860 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:19:04,860 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:19:04,863 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [7, 7, 7, 5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:19:04,863 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND FALSE  !(choice == 4)
[L5525]        COND TRUE   choice == 3
[L5527]                    gas := gas - 21000;
[L5528]        COND TRUE   gas >= 0
[L5530]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5530]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L5531]                    assume msgvalue_MSG == 0;
[L5532]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L5532]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND TRUE   choice == 5
[L5509]                    gas := gas - 21000;
[L5510]        COND TRUE   gas >= 0
[L5512]                    assume msgvalue_MSG == 0;
[L5513]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5513]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND TRUE   DType[to] == ValidatorAuction
[L4256]        CALL        call FallbackMethod_ValidatorAuction__success(to, from, amount);
[L2916]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2917]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2918]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2919]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L2919]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L2920]        COND FALSE  !(revert)
[L2925]                    gas := gas - 15;
[L2926]        CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L2926]        RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L2927]        COND FALSE  !(revert)
[L4256]        RET         call FallbackMethod_ValidatorAuction__success(to, from, amount);
[L4257]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]  CALL        call CorralChoice_ValidatorAuction(this);
[L5446]              havoc msgsender_MSG;
[L5447]              havoc msgvalue_MSG;
[L5448]              havoc choice;
[L5449]              havoc newOwner_s43;
[L5450]              havoc _startPriceInWei_s578;
[L5451]              havoc _auctionDurationInDays_s578;
[L5452]              havoc _minimalNumberOfParticipants_s578;
[L5453]              havoc _maximalNumberOfParticipants_s578;
[L5454]              havoc _depositLocker_s578;
[L5455]              havoc addressesToWhitelist_s852;
[L5456]              havoc __ret_0_currentPrice;
[L5457]              havoc secondsSinceStart_s978;
[L5458]              havoc __ret_0_priceAtElapsedTime;
[L5459]              havoc tmpNow;
[L5460]              havoc gas;
[L5461]              assume gas > 4000000 && gas <= 8000000;
[L5462]              tmpNow := now;
[L5463]              havoc now;
[L5464]              assume now > tmpNow;
[L5465]              assume msgsender_MSG != null;
[L5466]              assume DType[msgsender_MSG] != Ownable;
[L5467]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]              assume DType[msgsender_MSG] != DepositLocker;
[L5469]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]              Alloc[msgsender_MSG] := true;
[L5471]  COND TRUE   choice == 9
[L5473]              gas := gas - 21000;
[L5474]  COND FALSE  !(gas >= 0)
[L5577]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:19:04,869 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:19:04,870 INFO  L82        PathProgramCache]: Analyzing trace with hash 531059399, now seen corresponding path program 1 times
[2020-05-30 21:19:04,870 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:19:04,899 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:19:05,323 INFO  L134       CoverageAnalysis]: Checked inductivity of 352 backedges. 36 proven. 35 refuted. 0 times theorem prover too weak. 281 trivial. 0 not checked.
[2020-05-30 21:19:05,323 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:19:05,323 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-30 21:19:05,324 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:19:05,324 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 21:19:05,324 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=20, Invalid=90, Unknown=0, NotChecked=0, Total=110
[2020-05-30 21:19:05,324 INFO  L87              Difference]: Start difference. First operand 19354 states and 21986 transitions. cyclomatic complexity: 2673 Second operand 11 states.
[2020-05-30 21:19:17,479 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:19:17,479 INFO  L93              Difference]: Finished difference Result 19478 states and 22248 transitions.
[2020-05-30 21:19:17,479 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-30 21:19:17,480 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 19478 states and 22248 transitions.
[2020-05-30 21:19:17,536 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 22
[2020-05-30 21:19:17,595 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 19478 states to 19442 states and 22190 transitions.
[2020-05-30 21:19:17,595 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1167
[2020-05-30 21:19:17,596 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1167
[2020-05-30 21:19:17,596 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 19442 states and 22190 transitions.
[2020-05-30 21:19:17,608 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:19:17,609 INFO  L728         BuchiCegarLoop]: Abstraction has 19442 states and 22190 transitions.
[2020-05-30 21:19:17,620 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 19442 states and 22190 transitions.
[2020-05-30 21:19:17,727 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 19442 to 19238.
[2020-05-30 21:19:17,727 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 19238 states.
[2020-05-30 21:19:17,757 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 19238 states to 19238 states and 21859 transitions.
[2020-05-30 21:19:17,757 INFO  L751         BuchiCegarLoop]: Abstraction has 19238 states and 21859 transitions.
[2020-05-30 21:19:17,757 INFO  L631         BuchiCegarLoop]: Abstraction has 19238 states and 21859 transitions.
[2020-05-30 21:19:17,757 INFO  L445         BuchiCegarLoop]: ======== Iteration 32============
[2020-05-30 21:19:17,757 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 19238 states and 21859 transitions.
[2020-05-30 21:19:17,779 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 22
[2020-05-30 21:19:17,779 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:19:17,780 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:19:17,782 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:19:17,782 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND FALSE  !(choice == 4)
[L5525]        COND TRUE   choice == 3
[L5527]                    gas := gas - 21000;
[L5528]        COND TRUE   gas >= 0
[L5530]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5530]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L5531]                    assume msgvalue_MSG == 0;
[L5532]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L5532]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND TRUE   choice == 5
[L5509]                    gas := gas - 21000;
[L5510]        COND TRUE   gas >= 0
[L5512]                    assume msgvalue_MSG == 0;
[L5513]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5513]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]  CALL        call CorralChoice_ValidatorAuction(this);
[L5446]              havoc msgsender_MSG;
[L5447]              havoc msgvalue_MSG;
[L5448]              havoc choice;
[L5449]              havoc newOwner_s43;
[L5450]              havoc _startPriceInWei_s578;
[L5451]              havoc _auctionDurationInDays_s578;
[L5452]              havoc _minimalNumberOfParticipants_s578;
[L5453]              havoc _maximalNumberOfParticipants_s578;
[L5454]              havoc _depositLocker_s578;
[L5455]              havoc addressesToWhitelist_s852;
[L5456]              havoc __ret_0_currentPrice;
[L5457]              havoc secondsSinceStart_s978;
[L5458]              havoc __ret_0_priceAtElapsedTime;
[L5459]              havoc tmpNow;
[L5460]              havoc gas;
[L5461]              assume gas > 4000000 && gas <= 8000000;
[L5462]              tmpNow := now;
[L5463]              havoc now;
[L5464]              assume now > tmpNow;
[L5465]              assume msgsender_MSG != null;
[L5466]              assume DType[msgsender_MSG] != Ownable;
[L5467]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]              assume DType[msgsender_MSG] != DepositLocker;
[L5469]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]              Alloc[msgsender_MSG] := true;
[L5471]  COND TRUE   choice == 9
[L5473]              gas := gas - 21000;
[L5474]  COND FALSE  !(gas >= 0)
[L5577]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:19:17,787 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:19:17,787 INFO  L82        PathProgramCache]: Analyzing trace with hash 637676144, now seen corresponding path program 1 times
[2020-05-30 21:19:17,788 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:19:17,823 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:19:18,153 INFO  L134       CoverageAnalysis]: Checked inductivity of 246 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 244 trivial. 0 not checked.
[2020-05-30 21:19:18,153 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:19:18,153 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-05-30 21:19:18,154 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:19:18,154 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:19:18,154 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=129, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:19:18,154 INFO  L87              Difference]: Start difference. First operand 19238 states and 21859 transitions. cyclomatic complexity: 2661 Second operand 13 states.
[2020-05-30 21:19:26,706 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:19:26,706 INFO  L93              Difference]: Finished difference Result 15952 states and 18039 transitions.
[2020-05-30 21:19:26,706 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-05-30 21:19:26,706 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 15952 states and 18039 transitions.
[2020-05-30 21:19:26,747 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 18
[2020-05-30 21:19:26,789 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 15952 states to 15420 states and 17487 transitions.
[2020-05-30 21:19:26,790 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1023
[2020-05-30 21:19:26,790 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1049
[2020-05-30 21:19:26,790 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 15420 states and 17487 transitions.
[2020-05-30 21:19:26,799 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:19:26,800 INFO  L728         BuchiCegarLoop]: Abstraction has 15420 states and 17487 transitions.
[2020-05-30 21:19:26,809 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 15420 states and 17487 transitions.
[2020-05-30 21:19:26,885 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 15420 to 14994.
[2020-05-30 21:19:26,885 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 14994 states.
[2020-05-30 21:19:26,906 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 14994 states to 14994 states and 16891 transitions.
[2020-05-30 21:19:26,906 INFO  L751         BuchiCegarLoop]: Abstraction has 14994 states and 16891 transitions.
[2020-05-30 21:19:26,906 INFO  L631         BuchiCegarLoop]: Abstraction has 14994 states and 16891 transitions.
[2020-05-30 21:19:26,906 INFO  L445         BuchiCegarLoop]: ======== Iteration 33============
[2020-05-30 21:19:26,906 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 14994 states and 16891 transitions.
[2020-05-30 21:19:26,922 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 14
[2020-05-30 21:19:26,922 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:19:26,922 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:19:26,925 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:19:26,925 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND FALSE  !(choice == 4)
[L5525]        COND TRUE   choice == 3
[L5527]                    gas := gas - 21000;
[L5528]        COND TRUE   gas >= 0
[L5530]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5530]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L5531]                    assume msgvalue_MSG == 0;
[L5532]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L5532]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND TRUE   choice == 5
[L5509]                    gas := gas - 21000;
[L5510]        COND TRUE   gas >= 0
[L5512]                    assume msgvalue_MSG == 0;
[L5513]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5513]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:19:26,930 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:19:26,930 INFO  L82        PathProgramCache]: Analyzing trace with hash -1868166257, now seen corresponding path program 1 times
[2020-05-30 21:19:26,931 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:19:26,965 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:19:27,208 INFO  L134       CoverageAnalysis]: Checked inductivity of 239 backedges. 0 proven. 4 refuted. 0 times theorem prover too weak. 235 trivial. 0 not checked.
[2020-05-30 21:19:27,208 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:19:27,208 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-05-30 21:19:27,209 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:19:27,209 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:19:27,209 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=131, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:19:27,209 INFO  L87              Difference]: Start difference. First operand 14994 states and 16891 transitions. cyclomatic complexity: 1927 Second operand 13 states.
[2020-05-30 21:19:36,426 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:19:36,426 INFO  L93              Difference]: Finished difference Result 14870 states and 16818 transitions.
[2020-05-30 21:19:36,427 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-30 21:19:36,427 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 14870 states and 16818 transitions.
[2020-05-30 21:19:36,462 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 14
[2020-05-30 21:19:36,500 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 14870 states to 14858 states and 16804 transitions.
[2020-05-30 21:19:36,500 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 982
[2020-05-30 21:19:36,501 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 982
[2020-05-30 21:19:36,501 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 14858 states and 16804 transitions.
[2020-05-30 21:19:36,509 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:19:36,509 INFO  L728         BuchiCegarLoop]: Abstraction has 14858 states and 16804 transitions.
[2020-05-30 21:19:36,517 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 14858 states and 16804 transitions.
[2020-05-30 21:19:36,592 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 14858 to 14782.
[2020-05-30 21:19:36,592 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 14782 states.
[2020-05-30 21:19:36,612 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 14782 states to 14782 states and 16648 transitions.
[2020-05-30 21:19:36,612 INFO  L751         BuchiCegarLoop]: Abstraction has 14782 states and 16648 transitions.
[2020-05-30 21:19:36,612 INFO  L631         BuchiCegarLoop]: Abstraction has 14782 states and 16648 transitions.
[2020-05-30 21:19:36,612 INFO  L445         BuchiCegarLoop]: ======== Iteration 34============
[2020-05-30 21:19:36,613 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 14782 states and 16648 transitions.
[2020-05-30 21:19:36,628 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 14
[2020-05-30 21:19:36,628 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:19:36,628 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:19:36,630 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:19:36,630 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND FALSE  !(choice == 4)
[L5525]        COND TRUE   choice == 3
[L5527]                    gas := gas - 21000;
[L5528]        COND TRUE   gas >= 0
[L5530]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5530]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L5531]                    assume msgvalue_MSG == 0;
[L5532]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L5532]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND TRUE   choice == 5
[L5509]                    gas := gas - 21000;
[L5510]        COND TRUE   gas >= 0
[L5512]                    assume msgvalue_MSG == 0;
[L5513]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5513]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]  CALL        call CorralChoice_ValidatorAuction(this);
[L5446]              havoc msgsender_MSG;
[L5447]              havoc msgvalue_MSG;
[L5448]              havoc choice;
[L5449]              havoc newOwner_s43;
[L5450]              havoc _startPriceInWei_s578;
[L5451]              havoc _auctionDurationInDays_s578;
[L5452]              havoc _minimalNumberOfParticipants_s578;
[L5453]              havoc _maximalNumberOfParticipants_s578;
[L5454]              havoc _depositLocker_s578;
[L5455]              havoc addressesToWhitelist_s852;
[L5456]              havoc __ret_0_currentPrice;
[L5457]              havoc secondsSinceStart_s978;
[L5458]              havoc __ret_0_priceAtElapsedTime;
[L5459]              havoc tmpNow;
[L5460]              havoc gas;
[L5461]              assume gas > 4000000 && gas <= 8000000;
[L5462]              tmpNow := now;
[L5463]              havoc now;
[L5464]              assume now > tmpNow;
[L5465]              assume msgsender_MSG != null;
[L5466]              assume DType[msgsender_MSG] != Ownable;
[L5467]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]              assume DType[msgsender_MSG] != DepositLocker;
[L5469]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]              Alloc[msgsender_MSG] := true;
[L5471]  COND TRUE   choice == 9
[L5473]              gas := gas - 21000;
[L5474]  COND FALSE  !(gas >= 0)
[L5577]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:19:36,634 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:19:36,634 INFO  L82        PathProgramCache]: Analyzing trace with hash -1737847176, now seen corresponding path program 1 times
[2020-05-30 21:19:36,634 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:19:36,672 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:19:36,916 INFO  L134       CoverageAnalysis]: Checked inductivity of 223 backedges. 15 proven. 0 refuted. 0 times theorem prover too weak. 208 trivial. 0 not checked.
[2020-05-30 21:19:36,916 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:19:36,916 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-05-30 21:19:36,916 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:19:36,917 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-05-30 21:19:36,917 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=76, Invalid=164, Unknown=0, NotChecked=0, Total=240
[2020-05-30 21:19:36,917 INFO  L87              Difference]: Start difference. First operand 14782 states and 16648 transitions. cyclomatic complexity: 1896 Second operand 16 states.
[2020-05-30 21:19:49,479 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:19:49,479 INFO  L93              Difference]: Finished difference Result 18491 states and 20968 transitions.
[2020-05-30 21:19:49,480 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 20 states. 
[2020-05-30 21:19:49,480 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 18491 states and 20968 transitions.
[2020-05-30 21:19:49,533 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 28
[2020-05-30 21:19:49,589 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 18491 states to 18206 states and 20636 transitions.
[2020-05-30 21:19:49,589 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1529
[2020-05-30 21:19:49,590 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1529
[2020-05-30 21:19:49,590 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 18206 states and 20636 transitions.
[2020-05-30 21:19:49,602 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:19:49,602 INFO  L728         BuchiCegarLoop]: Abstraction has 18206 states and 20636 transitions.
[2020-05-30 21:19:49,612 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 18206 states and 20636 transitions.
[2020-05-30 21:19:49,702 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 18206 to 14498.
[2020-05-30 21:19:49,702 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 14498 states.
[2020-05-30 21:19:49,722 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 14498 states to 14498 states and 15980 transitions.
[2020-05-30 21:19:49,722 INFO  L751         BuchiCegarLoop]: Abstraction has 14498 states and 15980 transitions.
[2020-05-30 21:19:49,723 INFO  L631         BuchiCegarLoop]: Abstraction has 14498 states and 15980 transitions.
[2020-05-30 21:19:49,723 INFO  L445         BuchiCegarLoop]: ======== Iteration 35============
[2020-05-30 21:19:49,723 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 14498 states and 15980 transitions.
[2020-05-30 21:19:49,738 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 14
[2020-05-30 21:19:49,738 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:19:49,738 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:19:49,741 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:19:49,741 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND FALSE  !(choice == 4)
[L5525]        COND TRUE   choice == 3
[L5527]                    gas := gas - 21000;
[L5528]        COND TRUE   gas >= 0
[L5530]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5530]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L5531]                    assume msgvalue_MSG == 0;
[L5532]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L5532]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND TRUE   choice == 5
[L5509]                    gas := gas - 21000;
[L5510]        COND TRUE   gas >= 0
[L5512]                    assume msgvalue_MSG == 0;
[L5513]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5513]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:19:49,746 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:19:49,746 INFO  L82        PathProgramCache]: Analyzing trace with hash 1648671603, now seen corresponding path program 1 times
[2020-05-30 21:19:49,747 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:19:49,786 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:19:50,445 INFO  L134       CoverageAnalysis]: Checked inductivity of 223 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 221 trivial. 0 not checked.
[2020-05-30 21:19:50,445 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:19:50,445 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [24] total 24
[2020-05-30 21:19:50,446 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:19:50,446 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 25 interpolants.
[2020-05-30 21:19:50,446 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=68, Invalid=532, Unknown=0, NotChecked=0, Total=600
[2020-05-30 21:19:50,446 INFO  L87              Difference]: Start difference. First operand 14498 states and 15980 transitions. cyclomatic complexity: 1512 Second operand 25 states.
[2020-05-30 21:20:12,253 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:20:12,253 INFO  L93              Difference]: Finished difference Result 17756 states and 19794 transitions.
[2020-05-30 21:20:12,254 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 36 states. 
[2020-05-30 21:20:12,254 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 17756 states and 19794 transitions.
[2020-05-30 21:20:12,293 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 14
[2020-05-30 21:20:12,346 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 17756 states to 17756 states and 19786 transitions.
[2020-05-30 21:20:12,346 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 995
[2020-05-30 21:20:12,347 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 995
[2020-05-30 21:20:12,347 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 17756 states and 19786 transitions.
[2020-05-30 21:20:12,357 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:20:12,357 INFO  L728         BuchiCegarLoop]: Abstraction has 17756 states and 19786 transitions.
[2020-05-30 21:20:12,366 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 17756 states and 19786 transitions.
[2020-05-30 21:20:12,449 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 17756 to 17482.
[2020-05-30 21:20:12,449 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 17482 states.
[2020-05-30 21:20:12,473 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 17482 states to 17482 states and 19381 transitions.
[2020-05-30 21:20:12,473 INFO  L751         BuchiCegarLoop]: Abstraction has 17482 states and 19381 transitions.
[2020-05-30 21:20:12,474 INFO  L631         BuchiCegarLoop]: Abstraction has 17482 states and 19381 transitions.
[2020-05-30 21:20:12,474 INFO  L445         BuchiCegarLoop]: ======== Iteration 36============
[2020-05-30 21:20:12,474 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 17482 states and 19381 transitions.
[2020-05-30 21:20:12,491 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 14
[2020-05-30 21:20:12,491 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:20:12,492 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:20:12,493 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:20:12,494 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND FALSE  !(choice == 4)
[L5525]        COND TRUE   choice == 3
[L5527]                    gas := gas - 21000;
[L5528]        COND TRUE   gas >= 0
[L5530]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5530]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L5531]                    assume msgvalue_MSG == 0;
[L5532]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L5532]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND TRUE   choice == 5
[L5509]                    gas := gas - 21000;
[L5510]        COND TRUE   gas >= 0
[L5512]                    assume msgvalue_MSG == 0;
[L5513]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5513]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]  CALL        call CorralChoice_ValidatorAuction(this);
[L5446]              havoc msgsender_MSG;
[L5447]              havoc msgvalue_MSG;
[L5448]              havoc choice;
[L5449]              havoc newOwner_s43;
[L5450]              havoc _startPriceInWei_s578;
[L5451]              havoc _auctionDurationInDays_s578;
[L5452]              havoc _minimalNumberOfParticipants_s578;
[L5453]              havoc _maximalNumberOfParticipants_s578;
[L5454]              havoc _depositLocker_s578;
[L5455]              havoc addressesToWhitelist_s852;
[L5456]              havoc __ret_0_currentPrice;
[L5457]              havoc secondsSinceStart_s978;
[L5458]              havoc __ret_0_priceAtElapsedTime;
[L5459]              havoc tmpNow;
[L5460]              havoc gas;
[L5461]              assume gas > 4000000 && gas <= 8000000;
[L5462]              tmpNow := now;
[L5463]              havoc now;
[L5464]              assume now > tmpNow;
[L5465]              assume msgsender_MSG != null;
[L5466]              assume DType[msgsender_MSG] != Ownable;
[L5467]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]              assume DType[msgsender_MSG] != DepositLocker;
[L5469]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]              Alloc[msgsender_MSG] := true;
[L5471]  COND FALSE  !(choice == 9)
[L5480]  COND FALSE  !(choice == 8)
[L5489]  COND FALSE  !(choice == 7)
[L5498]  COND FALSE  !(choice == 6)
[L5507]  COND FALSE  !(choice == 5)
[L5516]  COND FALSE  !(choice == 4)
[L5525]  COND FALSE  !(choice == 3)
[L5535]  COND FALSE  !(choice == 2)
[L5544]  COND FALSE  !(choice == 1)
[L5577]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:20:12,498 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:20:12,498 INFO  L82        PathProgramCache]: Analyzing trace with hash 948539945, now seen corresponding path program 1 times
[2020-05-30 21:20:12,499 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:20:12,534 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:20:12,813 INFO  L134       CoverageAnalysis]: Checked inductivity of 281 backedges. 2 proven. 36 refuted. 0 times theorem prover too weak. 243 trivial. 0 not checked.
[2020-05-30 21:20:12,813 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:20:12,813 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 21:20:12,813 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:20:12,814 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:20:12,814 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=109, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:20:12,814 INFO  L87              Difference]: Start difference. First operand 17482 states and 19381 transitions. cyclomatic complexity: 1938 Second operand 12 states.
[2020-05-30 21:20:22,290 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:20:22,290 INFO  L93              Difference]: Finished difference Result 17590 states and 19605 transitions.
[2020-05-30 21:20:22,290 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-30 21:20:22,290 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 17590 states and 19605 transitions.
[2020-05-30 21:20:22,331 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 14
[2020-05-30 21:20:22,379 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 17590 states to 17590 states and 19605 transitions.
[2020-05-30 21:20:22,379 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 997
[2020-05-30 21:20:22,380 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 997
[2020-05-30 21:20:22,380 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 17590 states and 19605 transitions.
[2020-05-30 21:20:22,390 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:20:22,390 INFO  L728         BuchiCegarLoop]: Abstraction has 17590 states and 19605 transitions.
[2020-05-30 21:20:22,398 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 17590 states and 19605 transitions.
[2020-05-30 21:20:22,478 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 17590 to 17482.
[2020-05-30 21:20:22,478 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 17482 states.
[2020-05-30 21:20:22,498 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 17482 states to 17482 states and 19373 transitions.
[2020-05-30 21:20:22,499 INFO  L751         BuchiCegarLoop]: Abstraction has 17482 states and 19373 transitions.
[2020-05-30 21:20:22,499 INFO  L631         BuchiCegarLoop]: Abstraction has 17482 states and 19373 transitions.
[2020-05-30 21:20:22,499 INFO  L445         BuchiCegarLoop]: ======== Iteration 37============
[2020-05-30 21:20:22,499 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 17482 states and 19373 transitions.
[2020-05-30 21:20:22,516 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 14
[2020-05-30 21:20:22,516 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:20:22,516 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:20:22,518 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:20:22,519 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND FALSE  !(choice == 4)
[L5525]        COND TRUE   choice == 3
[L5527]                    gas := gas - 21000;
[L5528]        COND TRUE   gas >= 0
[L5530]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5530]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L5531]                    assume msgvalue_MSG == 0;
[L5532]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L5532]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND TRUE   choice == 5
[L5509]                    gas := gas - 21000;
[L5510]        COND TRUE   gas >= 0
[L5512]                    assume msgvalue_MSG == 0;
[L5513]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5513]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND TRUE   DType[to] == ValidatorAuction
[L4256]        CALL        call FallbackMethod_ValidatorAuction__success(to, from, amount);
[L2916]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2917]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2918]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2919]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L2919]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L2920]        COND FALSE  !(revert)
[L2925]                    gas := gas - 15;
[L2926]        CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L2926]        RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L2927]        COND FALSE  !(revert)
[L4256]        RET         call FallbackMethod_ValidatorAuction__success(to, from, amount);
[L4257]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]  CALL        call CorralChoice_ValidatorAuction(this);
[L5446]              havoc msgsender_MSG;
[L5447]              havoc msgvalue_MSG;
[L5448]              havoc choice;
[L5449]              havoc newOwner_s43;
[L5450]              havoc _startPriceInWei_s578;
[L5451]              havoc _auctionDurationInDays_s578;
[L5452]              havoc _minimalNumberOfParticipants_s578;
[L5453]              havoc _maximalNumberOfParticipants_s578;
[L5454]              havoc _depositLocker_s578;
[L5455]              havoc addressesToWhitelist_s852;
[L5456]              havoc __ret_0_currentPrice;
[L5457]              havoc secondsSinceStart_s978;
[L5458]              havoc __ret_0_priceAtElapsedTime;
[L5459]              havoc tmpNow;
[L5460]              havoc gas;
[L5461]              assume gas > 4000000 && gas <= 8000000;
[L5462]              tmpNow := now;
[L5463]              havoc now;
[L5464]              assume now > tmpNow;
[L5465]              assume msgsender_MSG != null;
[L5466]              assume DType[msgsender_MSG] != Ownable;
[L5467]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]              assume DType[msgsender_MSG] != DepositLocker;
[L5469]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]              Alloc[msgsender_MSG] := true;
[L5471]  COND FALSE  !(choice == 9)
[L5480]  COND FALSE  !(choice == 8)
[L5489]  COND FALSE  !(choice == 7)
[L5498]  COND FALSE  !(choice == 6)
[L5507]  COND FALSE  !(choice == 5)
[L5516]  COND FALSE  !(choice == 4)
[L5525]  COND FALSE  !(choice == 3)
[L5535]  COND FALSE  !(choice == 2)
[L5544]  COND FALSE  !(choice == 1)
[L5577]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:20:22,524 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:20:22,525 INFO  L82        PathProgramCache]: Analyzing trace with hash 955955483, now seen corresponding path program 1 times
[2020-05-30 21:20:22,525 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:20:22,571 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:20:22,956 INFO  L134       CoverageAnalysis]: Checked inductivity of 368 backedges. 8 proven. 3 refuted. 0 times theorem prover too weak. 357 trivial. 0 not checked.
[2020-05-30 21:20:22,957 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:20:22,957 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-05-30 21:20:22,957 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:20:22,957 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-30 21:20:22,957 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-30 21:20:22,958 INFO  L87              Difference]: Start difference. First operand 17482 states and 19373 transitions. cyclomatic complexity: 1930 Second operand 8 states.
[2020-05-30 21:20:24,451 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:20:24,452 INFO  L93              Difference]: Finished difference Result 16069 states and 17501 transitions.
[2020-05-30 21:20:24,452 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-05-30 21:20:24,452 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 16069 states and 17501 transitions.
[2020-05-30 21:20:24,489 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:20:24,512 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 16069 states to 11011 states and 11982 transitions.
[2020-05-30 21:20:24,513 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 566
[2020-05-30 21:20:24,513 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 602
[2020-05-30 21:20:24,513 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11011 states and 11982 transitions.
[2020-05-30 21:20:24,518 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:20:24,518 INFO  L728         BuchiCegarLoop]: Abstraction has 11011 states and 11982 transitions.
[2020-05-30 21:20:24,524 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11011 states and 11982 transitions.
[2020-05-30 21:20:24,568 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11011 to 10988.
[2020-05-30 21:20:24,568 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10988 states.
[2020-05-30 21:20:24,578 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10988 states to 10988 states and 11958 transitions.
[2020-05-30 21:20:24,578 INFO  L751         BuchiCegarLoop]: Abstraction has 10988 states and 11958 transitions.
[2020-05-30 21:20:24,578 INFO  L631         BuchiCegarLoop]: Abstraction has 10988 states and 11958 transitions.
[2020-05-30 21:20:24,578 INFO  L445         BuchiCegarLoop]: ======== Iteration 38============
[2020-05-30 21:20:24,579 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10988 states and 11958 transitions.
[2020-05-30 21:20:24,588 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:20:24,589 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:20:24,589 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:20:24,590 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:20:24,590 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND FALSE  !(choice == 4)
[L5525]        COND TRUE   choice == 3
[L5527]                    gas := gas - 21000;
[L5528]        COND TRUE   gas >= 0
[L5530]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5530]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L5531]                    assume msgvalue_MSG == 0;
[L5532]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L5532]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND TRUE   choice == 5
[L5509]                    gas := gas - 21000;
[L5510]        COND TRUE   gas >= 0
[L5512]                    assume msgvalue_MSG == 0;
[L5513]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5513]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND FALSE  !(Balance[from] >= amount)
[L5043]                    success := false;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:20:24,595 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:20:24,596 INFO  L82        PathProgramCache]: Analyzing trace with hash 2105592783, now seen corresponding path program 1 times
[2020-05-30 21:20:24,596 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:20:24,633 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:20:24,924 INFO  L134       CoverageAnalysis]: Checked inductivity of 326 backedges. 8 proven. 14 refuted. 0 times theorem prover too weak. 304 trivial. 0 not checked.
[2020-05-30 21:20:24,924 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:20:24,924 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [4] total 4
[2020-05-30 21:20:24,925 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:20:24,925 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 21:20:24,925 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-30 21:20:24,926 INFO  L87              Difference]: Start difference. First operand 10988 states and 11958 transitions. cyclomatic complexity: 993 Second operand 4 states.
[2020-05-30 21:20:24,988 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:20:24,988 INFO  L93              Difference]: Finished difference Result 11030 states and 11999 transitions.
[2020-05-30 21:20:24,988 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-30 21:20:24,988 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11030 states and 11999 transitions.
[2020-05-30 21:20:25,008 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:20:25,027 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11030 states to 10816 states and 11766 transitions.
[2020-05-30 21:20:25,027 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 595
[2020-05-30 21:20:25,027 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 595
[2020-05-30 21:20:25,028 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10816 states and 11766 transitions.
[2020-05-30 21:20:25,032 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:20:25,032 INFO  L728         BuchiCegarLoop]: Abstraction has 10816 states and 11766 transitions.
[2020-05-30 21:20:25,036 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10816 states and 11766 transitions.
[2020-05-30 21:20:25,075 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10816 to 10816.
[2020-05-30 21:20:25,075 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10816 states.
[2020-05-30 21:20:25,087 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10816 states to 10816 states and 11766 transitions.
[2020-05-30 21:20:25,087 INFO  L751         BuchiCegarLoop]: Abstraction has 10816 states and 11766 transitions.
[2020-05-30 21:20:25,087 INFO  L631         BuchiCegarLoop]: Abstraction has 10816 states and 11766 transitions.
[2020-05-30 21:20:25,088 INFO  L445         BuchiCegarLoop]: ======== Iteration 39============
[2020-05-30 21:20:25,088 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10816 states and 11766 transitions.
[2020-05-30 21:20:25,099 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:20:25,099 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:20:25,099 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:20:25,101 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:20:25,101 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND FALSE  !(choice == 4)
[L5525]        COND TRUE   choice == 3
[L5527]                    gas := gas - 21000;
[L5528]        COND TRUE   gas >= 0
[L5530]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5530]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L5531]                    assume msgvalue_MSG == 0;
[L5532]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L5532]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND TRUE   choice == 5
[L5509]                    gas := gas - 21000;
[L5510]        COND TRUE   gas >= 0
[L5512]                    assume msgvalue_MSG == 0;
[L5513]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5513]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND TRUE   DType[to] == DepositLockerInterface
[L4272]                    assume amount == 0;
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:20:25,106 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:20:25,106 INFO  L82        PathProgramCache]: Analyzing trace with hash 1300751811, now seen corresponding path program 1 times
[2020-05-30 21:20:25,107 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:20:25,146 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:20:25,415 INFO  L134       CoverageAnalysis]: Checked inductivity of 335 backedges. 8 proven. 18 refuted. 0 times theorem prover too weak. 309 trivial. 0 not checked.
[2020-05-30 21:20:25,415 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:20:25,415 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-05-30 21:20:25,415 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:20:25,415 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-05-30 21:20:25,416 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=12, Invalid=30, Unknown=0, NotChecked=0, Total=42
[2020-05-30 21:20:25,416 INFO  L87              Difference]: Start difference. First operand 10816 states and 11766 transitions. cyclomatic complexity: 973 Second operand 7 states.
[2020-05-30 21:20:25,582 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:20:25,582 INFO  L93              Difference]: Finished difference Result 10866 states and 11815 transitions.
[2020-05-30 21:20:25,582 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-05-30 21:20:25,582 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10866 states and 11815 transitions.
[2020-05-30 21:20:25,603 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:20:25,622 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10866 states to 10808 states and 11750 transitions.
[2020-05-30 21:20:25,622 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 595
[2020-05-30 21:20:25,622 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 595
[2020-05-30 21:20:25,623 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10808 states and 11750 transitions.
[2020-05-30 21:20:25,627 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:20:25,627 INFO  L728         BuchiCegarLoop]: Abstraction has 10808 states and 11750 transitions.
[2020-05-30 21:20:25,631 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10808 states and 11750 transitions.
[2020-05-30 21:20:25,672 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10808 to 10808.
[2020-05-30 21:20:25,672 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10808 states.
[2020-05-30 21:20:25,684 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10808 states to 10808 states and 11750 transitions.
[2020-05-30 21:20:25,684 INFO  L751         BuchiCegarLoop]: Abstraction has 10808 states and 11750 transitions.
[2020-05-30 21:20:25,684 INFO  L631         BuchiCegarLoop]: Abstraction has 10808 states and 11750 transitions.
[2020-05-30 21:20:25,684 INFO  L445         BuchiCegarLoop]: ======== Iteration 40============
[2020-05-30 21:20:25,684 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10808 states and 11750 transitions.
[2020-05-30 21:20:25,695 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:20:25,695 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:20:25,695 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:20:25,697 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:20:25,697 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND FALSE  !(choice == 4)
[L5525]        COND TRUE   choice == 3
[L5527]                    gas := gas - 21000;
[L5528]        COND TRUE   gas >= 0
[L5530]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5530]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L5531]                    assume msgvalue_MSG == 0;
[L5532]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L5532]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND TRUE   choice == 5
[L5509]                    gas := gas - 21000;
[L5510]        COND TRUE   gas >= 0
[L5512]                    assume msgvalue_MSG == 0;
[L5513]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5513]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND TRUE   DType[to] == DepositLocker
[L4264]        CALL        call FallbackMethod_DepositLocker__success(to, from, amount);
[L4264]        RET         call FallbackMethod_DepositLocker__success(to, from, amount);
[L4265]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]  CALL        call CorralChoice_ValidatorAuction(this);
[L5446]              havoc msgsender_MSG;
[L5447]              havoc msgvalue_MSG;
[L5448]              havoc choice;
[L5449]              havoc newOwner_s43;
[L5450]              havoc _startPriceInWei_s578;
[L5451]              havoc _auctionDurationInDays_s578;
[L5452]              havoc _minimalNumberOfParticipants_s578;
[L5453]              havoc _maximalNumberOfParticipants_s578;
[L5454]              havoc _depositLocker_s578;
[L5455]              havoc addressesToWhitelist_s852;
[L5456]              havoc __ret_0_currentPrice;
[L5457]              havoc secondsSinceStart_s978;
[L5458]              havoc __ret_0_priceAtElapsedTime;
[L5459]              havoc tmpNow;
[L5460]              havoc gas;
[L5461]              assume gas > 4000000 && gas <= 8000000;
[L5462]              tmpNow := now;
[L5463]              havoc now;
[L5464]              assume now > tmpNow;
[L5465]              assume msgsender_MSG != null;
[L5466]              assume DType[msgsender_MSG] != Ownable;
[L5467]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]              assume DType[msgsender_MSG] != DepositLocker;
[L5469]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]              Alloc[msgsender_MSG] := true;
[L5471]  COND FALSE  !(choice == 9)
[L5480]  COND FALSE  !(choice == 8)
[L5489]  COND FALSE  !(choice == 7)
[L5498]  COND FALSE  !(choice == 6)
[L5507]  COND FALSE  !(choice == 5)
[L5516]  COND FALSE  !(choice == 4)
[L5525]  COND FALSE  !(choice == 3)
[L5535]  COND FALSE  !(choice == 2)
[L5544]  COND FALSE  !(choice == 1)
[L5577]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:20:25,702 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:20:25,703 INFO  L82        PathProgramCache]: Analyzing trace with hash 1316422367, now seen corresponding path program 1 times
[2020-05-30 21:20:25,703 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:20:25,742 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:20:26,007 INFO  L134       CoverageAnalysis]: Checked inductivity of 334 backedges. 12 proven. 26 refuted. 0 times theorem prover too weak. 296 trivial. 0 not checked.
[2020-05-30 21:20:26,007 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:20:26,007 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-05-30 21:20:26,008 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:20:26,008 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-30 21:20:26,008 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-30 21:20:26,008 INFO  L87              Difference]: Start difference. First operand 10808 states and 11750 transitions. cyclomatic complexity: 965 Second operand 8 states.
[2020-05-30 21:20:26,793 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:20:26,793 INFO  L93              Difference]: Finished difference Result 10915 states and 11856 transitions.
[2020-05-30 21:20:26,793 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-05-30 21:20:26,794 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10915 states and 11856 transitions.
[2020-05-30 21:20:26,815 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:20:26,835 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10915 states to 10773 states and 11711 transitions.
[2020-05-30 21:20:26,835 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 595
[2020-05-30 21:20:26,836 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 595
[2020-05-30 21:20:26,836 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10773 states and 11711 transitions.
[2020-05-30 21:20:26,840 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:20:26,841 INFO  L728         BuchiCegarLoop]: Abstraction has 10773 states and 11711 transitions.
[2020-05-30 21:20:26,846 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10773 states and 11711 transitions.
[2020-05-30 21:20:26,888 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10773 to 10773.
[2020-05-30 21:20:26,888 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10773 states.
[2020-05-30 21:20:26,899 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10773 states to 10773 states and 11711 transitions.
[2020-05-30 21:20:26,899 INFO  L751         BuchiCegarLoop]: Abstraction has 10773 states and 11711 transitions.
[2020-05-30 21:20:26,900 INFO  L631         BuchiCegarLoop]: Abstraction has 10773 states and 11711 transitions.
[2020-05-30 21:20:26,900 INFO  L445         BuchiCegarLoop]: ======== Iteration 41============
[2020-05-30 21:20:26,900 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10773 states and 11711 transitions.
[2020-05-30 21:20:26,910 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:20:26,910 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:20:26,910 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:20:26,911 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:20:26,911 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND FALSE  !(choice == 4)
[L5525]        COND TRUE   choice == 3
[L5527]                    gas := gas - 21000;
[L5528]        COND TRUE   gas >= 0
[L5530]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5530]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L5531]                    assume msgvalue_MSG == 0;
[L5532]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L5532]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND TRUE   choice == 5
[L5509]                    gas := gas - 21000;
[L5510]        COND TRUE   gas >= 0
[L5512]                    assume msgvalue_MSG == 0;
[L5513]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5513]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]  CALL        call CorralChoice_ValidatorAuction(this);
[L5446]              havoc msgsender_MSG;
[L5447]              havoc msgvalue_MSG;
[L5448]              havoc choice;
[L5449]              havoc newOwner_s43;
[L5450]              havoc _startPriceInWei_s578;
[L5451]              havoc _auctionDurationInDays_s578;
[L5452]              havoc _minimalNumberOfParticipants_s578;
[L5453]              havoc _maximalNumberOfParticipants_s578;
[L5454]              havoc _depositLocker_s578;
[L5455]              havoc addressesToWhitelist_s852;
[L5456]              havoc __ret_0_currentPrice;
[L5457]              havoc secondsSinceStart_s978;
[L5458]              havoc __ret_0_priceAtElapsedTime;
[L5459]              havoc tmpNow;
[L5460]              havoc gas;
[L5461]              assume gas > 4000000 && gas <= 8000000;
[L5462]              tmpNow := now;
[L5463]              havoc now;
[L5464]              assume now > tmpNow;
[L5465]              assume msgsender_MSG != null;
[L5466]              assume DType[msgsender_MSG] != Ownable;
[L5467]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]              assume DType[msgsender_MSG] != DepositLocker;
[L5469]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]              Alloc[msgsender_MSG] := true;
[L5471]  COND FALSE  !(choice == 9)
[L5480]  COND FALSE  !(choice == 8)
[L5489]  COND FALSE  !(choice == 7)
[L5498]  COND FALSE  !(choice == 6)
[L5507]  COND FALSE  !(choice == 5)
[L5516]  COND FALSE  !(choice == 4)
[L5525]  COND FALSE  !(choice == 3)
[L5535]  COND FALSE  !(choice == 2)
[L5544]  COND FALSE  !(choice == 1)
[L5577]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:20:26,916 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:20:26,916 INFO  L82        PathProgramCache]: Analyzing trace with hash -144934301, now seen corresponding path program 1 times
[2020-05-30 21:20:26,917 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:20:26,956 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:20:27,253 INFO  L134       CoverageAnalysis]: Checked inductivity of 347 backedges. 38 proven. 51 refuted. 0 times theorem prover too weak. 258 trivial. 0 not checked.
[2020-05-30 21:20:27,253 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:20:27,253 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 21:20:27,254 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:20:27,254 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:20:27,254 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=107, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:20:27,254 INFO  L87              Difference]: Start difference. First operand 10773 states and 11711 transitions. cyclomatic complexity: 961 Second operand 12 states.
[2020-05-30 21:20:32,017 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:20:32,018 INFO  L93              Difference]: Finished difference Result 10782 states and 11720 transitions.
[2020-05-30 21:20:32,018 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-05-30 21:20:32,018 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10782 states and 11720 transitions.
[2020-05-30 21:20:32,041 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:20:32,062 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10782 states to 10782 states and 11720 transitions.
[2020-05-30 21:20:32,062 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 595
[2020-05-30 21:20:32,062 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 595
[2020-05-30 21:20:32,062 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10782 states and 11720 transitions.
[2020-05-30 21:20:32,067 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:20:32,067 INFO  L728         BuchiCegarLoop]: Abstraction has 10782 states and 11720 transitions.
[2020-05-30 21:20:32,073 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10782 states and 11720 transitions.
[2020-05-30 21:20:32,117 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10782 to 10770.
[2020-05-30 21:20:32,117 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10770 states.
[2020-05-30 21:20:32,129 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10770 states to 10770 states and 11705 transitions.
[2020-05-30 21:20:32,129 INFO  L751         BuchiCegarLoop]: Abstraction has 10770 states and 11705 transitions.
[2020-05-30 21:20:32,129 INFO  L631         BuchiCegarLoop]: Abstraction has 10770 states and 11705 transitions.
[2020-05-30 21:20:32,129 INFO  L445         BuchiCegarLoop]: ======== Iteration 42============
[2020-05-30 21:20:32,129 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10770 states and 11705 transitions.
[2020-05-30 21:20:32,139 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:20:32,140 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:20:32,140 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:20:32,141 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:20:32,141 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND FALSE  !(choice == 4)
[L5525]        COND TRUE   choice == 3
[L5527]                    gas := gas - 21000;
[L5528]        COND TRUE   gas >= 0
[L5530]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5530]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L5531]                    assume msgvalue_MSG == 0;
[L5532]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L5532]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND TRUE   slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this]
[L3193]                    gas := gas - 20014;
[L3194]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3195]                    assume slotPrice_s709 >= 0;
[L3196]                    lowestSlotPrice_ValidatorAuction[this] := slotPrice_s709;
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND TRUE   choice == 5
[L5509]                    gas := gas - 21000;
[L5510]        COND TRUE   gas >= 0
[L5512]                    assume msgvalue_MSG == 0;
[L5513]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5513]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:20:32,146 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:20:32,146 INFO  L82        PathProgramCache]: Analyzing trace with hash -50801521, now seen corresponding path program 1 times
[2020-05-30 21:20:32,147 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:20:32,183 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:20:32,695 INFO  L134       CoverageAnalysis]: Checked inductivity of 223 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 221 trivial. 0 not checked.
[2020-05-30 21:20:32,696 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:20:32,696 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [22] total 22
[2020-05-30 21:20:32,696 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:20:32,696 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 23 interpolants.
[2020-05-30 21:20:32,696 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=53, Invalid=453, Unknown=0, NotChecked=0, Total=506
[2020-05-30 21:20:32,696 INFO  L87              Difference]: Start difference. First operand 10770 states and 11705 transitions. cyclomatic complexity: 958 Second operand 23 states.
[2020-05-30 21:20:47,920 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:20:47,920 INFO  L93              Difference]: Finished difference Result 11110 states and 12124 transitions.
[2020-05-30 21:20:47,920 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 28 states. 
[2020-05-30 21:20:47,920 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11110 states and 12124 transitions.
[2020-05-30 21:20:47,940 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:20:47,960 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11110 states to 11110 states and 12122 transitions.
[2020-05-30 21:20:47,960 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 600
[2020-05-30 21:20:47,960 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 600
[2020-05-30 21:20:47,961 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11110 states and 12122 transitions.
[2020-05-30 21:20:47,965 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:20:47,965 INFO  L728         BuchiCegarLoop]: Abstraction has 11110 states and 12122 transitions.
[2020-05-30 21:20:47,969 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11110 states and 12122 transitions.
[2020-05-30 21:20:48,010 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11110 to 10655.
[2020-05-30 21:20:48,010 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10655 states.
[2020-05-30 21:20:48,021 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10655 states to 10655 states and 11557 transitions.
[2020-05-30 21:20:48,021 INFO  L751         BuchiCegarLoop]: Abstraction has 10655 states and 11557 transitions.
[2020-05-30 21:20:48,022 INFO  L631         BuchiCegarLoop]: Abstraction has 10655 states and 11557 transitions.
[2020-05-30 21:20:48,022 INFO  L445         BuchiCegarLoop]: ======== Iteration 43============
[2020-05-30 21:20:48,022 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10655 states and 11557 transitions.
[2020-05-30 21:20:48,032 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:20:48,032 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:20:48,032 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:20:48,034 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:20:48,034 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND FALSE  !(choice == 4)
[L5525]        COND TRUE   choice == 3
[L5527]                    gas := gas - 21000;
[L5528]        COND TRUE   gas >= 0
[L5530]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5530]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L5531]                    assume msgvalue_MSG == 0;
[L5532]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L5532]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND TRUE   choice == 5
[L5509]                    gas := gas - 21000;
[L5510]        COND TRUE   gas >= 0
[L5512]                    assume msgvalue_MSG == 0;
[L5513]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5513]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]  CALL        call CorralChoice_ValidatorAuction(this);
[L5446]              havoc msgsender_MSG;
[L5447]              havoc msgvalue_MSG;
[L5448]              havoc choice;
[L5449]              havoc newOwner_s43;
[L5450]              havoc _startPriceInWei_s578;
[L5451]              havoc _auctionDurationInDays_s578;
[L5452]              havoc _minimalNumberOfParticipants_s578;
[L5453]              havoc _maximalNumberOfParticipants_s578;
[L5454]              havoc _depositLocker_s578;
[L5455]              havoc addressesToWhitelist_s852;
[L5456]              havoc __ret_0_currentPrice;
[L5457]              havoc secondsSinceStart_s978;
[L5458]              havoc __ret_0_priceAtElapsedTime;
[L5459]              havoc tmpNow;
[L5460]              havoc gas;
[L5461]              assume gas > 4000000 && gas <= 8000000;
[L5462]              tmpNow := now;
[L5463]              havoc now;
[L5464]              assume now > tmpNow;
[L5465]              assume msgsender_MSG != null;
[L5466]              assume DType[msgsender_MSG] != Ownable;
[L5467]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]              assume DType[msgsender_MSG] != DepositLocker;
[L5469]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]              Alloc[msgsender_MSG] := true;
[L5471]  COND FALSE  !(choice == 9)
[L5480]  COND FALSE  !(choice == 8)
[L5489]  COND FALSE  !(choice == 7)
[L5498]  COND FALSE  !(choice == 6)
[L5507]  COND FALSE  !(choice == 5)
[L5516]  COND FALSE  !(choice == 4)
[L5525]  COND FALSE  !(choice == 3)
[L5535]  COND FALSE  !(choice == 2)
[L5544]  COND FALSE  !(choice == 1)
[L5577]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:20:48,039 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:20:48,039 INFO  L82        PathProgramCache]: Analyzing trace with hash 1145029925, now seen corresponding path program 1 times
[2020-05-30 21:20:48,039 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:20:48,080 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:20:48,403 INFO  L134       CoverageAnalysis]: Checked inductivity of 357 backedges. 4 proven. 62 refuted. 0 times theorem prover too weak. 291 trivial. 0 not checked.
[2020-05-30 21:20:48,403 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:20:48,403 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-05-30 21:20:48,404 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:20:48,404 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:20:48,404 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=129, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:20:48,404 INFO  L87              Difference]: Start difference. First operand 10655 states and 11557 transitions. cyclomatic complexity: 925 Second operand 13 states.
[2020-05-30 21:20:54,061 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:20:54,061 INFO  L93              Difference]: Finished difference Result 10658 states and 11558 transitions.
[2020-05-30 21:20:54,061 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-30 21:20:54,062 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10658 states and 11558 transitions.
[2020-05-30 21:20:54,128 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:20:54,146 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10658 states to 10658 states and 11558 transitions.
[2020-05-30 21:20:54,146 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 595
[2020-05-30 21:20:54,146 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 595
[2020-05-30 21:20:54,147 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10658 states and 11558 transitions.
[2020-05-30 21:20:54,151 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:20:54,151 INFO  L728         BuchiCegarLoop]: Abstraction has 10658 states and 11558 transitions.
[2020-05-30 21:20:54,156 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10658 states and 11558 transitions.
[2020-05-30 21:20:54,194 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10658 to 10651.
[2020-05-30 21:20:54,194 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10651 states.
[2020-05-30 21:20:54,205 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10651 states to 10651 states and 11549 transitions.
[2020-05-30 21:20:54,205 INFO  L751         BuchiCegarLoop]: Abstraction has 10651 states and 11549 transitions.
[2020-05-30 21:20:54,205 INFO  L631         BuchiCegarLoop]: Abstraction has 10651 states and 11549 transitions.
[2020-05-30 21:20:54,205 INFO  L445         BuchiCegarLoop]: ======== Iteration 44============
[2020-05-30 21:20:54,206 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10651 states and 11549 transitions.
[2020-05-30 21:20:54,215 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:20:54,215 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:20:54,215 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:20:54,217 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:20:54,217 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND FALSE  !(choice == 4)
[L5525]        COND TRUE   choice == 3
[L5527]                    gas := gas - 21000;
[L5528]        COND TRUE   gas >= 0
[L5530]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5530]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L5531]                    assume msgvalue_MSG == 0;
[L5532]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L5532]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG);
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND TRUE   choice == 5
[L5509]                    gas := gas - 21000;
[L5510]        COND TRUE   gas >= 0
[L5512]                    assume msgvalue_MSG == 0;
[L5513]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5513]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]  CALL        call CorralChoice_ValidatorAuction(this);
[L5446]              havoc msgsender_MSG;
[L5447]              havoc msgvalue_MSG;
[L5448]              havoc choice;
[L5449]              havoc newOwner_s43;
[L5450]              havoc _startPriceInWei_s578;
[L5451]              havoc _auctionDurationInDays_s578;
[L5452]              havoc _minimalNumberOfParticipants_s578;
[L5453]              havoc _maximalNumberOfParticipants_s578;
[L5454]              havoc _depositLocker_s578;
[L5455]              havoc addressesToWhitelist_s852;
[L5456]              havoc __ret_0_currentPrice;
[L5457]              havoc secondsSinceStart_s978;
[L5458]              havoc __ret_0_priceAtElapsedTime;
[L5459]              havoc tmpNow;
[L5460]              havoc gas;
[L5461]              assume gas > 4000000 && gas <= 8000000;
[L5462]              tmpNow := now;
[L5463]              havoc now;
[L5464]              assume now > tmpNow;
[L5465]              assume msgsender_MSG != null;
[L5466]              assume DType[msgsender_MSG] != Ownable;
[L5467]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]              assume DType[msgsender_MSG] != DepositLocker;
[L5469]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]              Alloc[msgsender_MSG] := true;
[L5471]  COND FALSE  !(choice == 9)
[L5480]  COND FALSE  !(choice == 8)
[L5489]  COND FALSE  !(choice == 7)
[L5498]  COND FALSE  !(choice == 6)
[L5507]  COND FALSE  !(choice == 5)
[L5516]  COND FALSE  !(choice == 4)
[L5525]  COND FALSE  !(choice == 3)
[L5535]  COND FALSE  !(choice == 2)
[L5544]  COND FALSE  !(choice == 1)
[L5577]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:20:54,228 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:20:54,228 INFO  L82        PathProgramCache]: Analyzing trace with hash -322442829, now seen corresponding path program 1 times
[2020-05-30 21:20:54,229 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:20:54,261 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:20:54,536 INFO  L134       CoverageAnalysis]: Checked inductivity of 552 backedges. 9 proven. 0 refuted. 0 times theorem prover too weak. 543 trivial. 0 not checked.
[2020-05-30 21:20:54,536 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:20:54,536 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-30 21:20:54,536 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:20:54,536 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 21:20:54,537 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 21:20:54,537 INFO  L87              Difference]: Start difference. First operand 10651 states and 11549 transitions. cyclomatic complexity: 921 Second operand 3 states.
[2020-05-30 21:20:54,582 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:20:54,582 INFO  L93              Difference]: Finished difference Result 10653 states and 11545 transitions.
[2020-05-30 21:20:54,582 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 21:20:54,582 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10653 states and 11545 transitions.
[2020-05-30 21:20:54,601 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:20:54,618 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10653 states to 10653 states and 11545 transitions.
[2020-05-30 21:20:54,618 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 595
[2020-05-30 21:20:54,618 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 595
[2020-05-30 21:20:54,619 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10653 states and 11545 transitions.
[2020-05-30 21:20:54,622 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:20:54,623 INFO  L728         BuchiCegarLoop]: Abstraction has 10653 states and 11545 transitions.
[2020-05-30 21:20:54,627 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10653 states and 11545 transitions.
[2020-05-30 21:20:54,663 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10653 to 10651.
[2020-05-30 21:20:54,663 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10651 states.
[2020-05-30 21:20:54,674 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10651 states to 10651 states and 11543 transitions.
[2020-05-30 21:20:54,674 INFO  L751         BuchiCegarLoop]: Abstraction has 10651 states and 11543 transitions.
[2020-05-30 21:20:54,674 INFO  L631         BuchiCegarLoop]: Abstraction has 10651 states and 11543 transitions.
[2020-05-30 21:20:54,674 INFO  L445         BuchiCegarLoop]: ======== Iteration 45============
[2020-05-30 21:20:54,674 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10651 states and 11543 transitions.
[2020-05-30 21:20:54,684 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:20:54,684 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:20:54,684 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:20:54,686 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:20:54,686 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND FALSE  !(choice == 4)
[L5525]        COND TRUE   choice == 3
[L5527]                    gas := gas - 21000;
[L5528]        COND TRUE   gas >= 0
[L5530]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5530]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L5531]                    assume msgvalue_MSG == 0;
[L5532]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L5532]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND TRUE   choice == 5
[L5509]                    gas := gas - 21000;
[L5510]        COND TRUE   gas >= 0
[L5512]                    assume msgvalue_MSG == 0;
[L5513]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5513]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:20:54,691 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:20:54,691 INFO  L82        PathProgramCache]: Analyzing trace with hash -1171667001, now seen corresponding path program 1 times
[2020-05-30 21:20:54,692 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:20:54,726 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:20:55,101 INFO  L134       CoverageAnalysis]: Checked inductivity of 553 backedges. 177 proven. 21 refuted. 0 times theorem prover too weak. 355 trivial. 0 not checked.
[2020-05-30 21:20:55,101 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:20:55,101 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [15] total 15
[2020-05-30 21:20:55,102 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:20:55,102 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-05-30 21:20:55,102 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=29, Invalid=181, Unknown=0, NotChecked=0, Total=210
[2020-05-30 21:20:55,102 INFO  L87              Difference]: Start difference. First operand 10651 states and 11543 transitions. cyclomatic complexity: 915 Second operand 15 states.
[2020-05-30 21:21:03,631 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:21:03,631 INFO  L93              Difference]: Finished difference Result 11645 states and 12741 transitions.
[2020-05-30 21:21:03,631 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-05-30 21:21:03,631 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11645 states and 12741 transitions.
[2020-05-30 21:21:03,659 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-30 21:21:03,685 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11645 states to 11645 states and 12741 transitions.
[2020-05-30 21:21:03,685 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 615
[2020-05-30 21:21:03,685 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 615
[2020-05-30 21:21:03,685 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11645 states and 12741 transitions.
[2020-05-30 21:21:03,691 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:21:03,691 INFO  L728         BuchiCegarLoop]: Abstraction has 11645 states and 12741 transitions.
[2020-05-30 21:21:03,697 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11645 states and 12741 transitions.
[2020-05-30 21:21:03,745 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11645 to 11628.
[2020-05-30 21:21:03,745 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11628 states.
[2020-05-30 21:21:03,759 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11628 states to 11628 states and 12700 transitions.
[2020-05-30 21:21:03,759 INFO  L751         BuchiCegarLoop]: Abstraction has 11628 states and 12700 transitions.
[2020-05-30 21:21:03,759 INFO  L631         BuchiCegarLoop]: Abstraction has 11628 states and 12700 transitions.
[2020-05-30 21:21:03,759 INFO  L445         BuchiCegarLoop]: ======== Iteration 46============
[2020-05-30 21:21:03,759 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11628 states and 12700 transitions.
[2020-05-30 21:21:03,770 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-30 21:21:03,771 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:21:03,771 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:21:03,772 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:21:03,772 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND FALSE  !(choice == 4)
[L5525]        COND TRUE   choice == 3
[L5527]                    gas := gas - 21000;
[L5528]        COND TRUE   gas >= 0
[L5530]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5530]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L5531]                    assume msgvalue_MSG == 0;
[L5532]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L5532]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND TRUE   choice == 5
[L5509]                    gas := gas - 21000;
[L5510]        COND TRUE   gas >= 0
[L5512]                    assume msgvalue_MSG == 0;
[L5513]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5513]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]  CALL        call CorralChoice_ValidatorAuction(this);
[L5446]              havoc msgsender_MSG;
[L5447]              havoc msgvalue_MSG;
[L5448]              havoc choice;
[L5449]              havoc newOwner_s43;
[L5450]              havoc _startPriceInWei_s578;
[L5451]              havoc _auctionDurationInDays_s578;
[L5452]              havoc _minimalNumberOfParticipants_s578;
[L5453]              havoc _maximalNumberOfParticipants_s578;
[L5454]              havoc _depositLocker_s578;
[L5455]              havoc addressesToWhitelist_s852;
[L5456]              havoc __ret_0_currentPrice;
[L5457]              havoc secondsSinceStart_s978;
[L5458]              havoc __ret_0_priceAtElapsedTime;
[L5459]              havoc tmpNow;
[L5460]              havoc gas;
[L5461]              assume gas > 4000000 && gas <= 8000000;
[L5462]              tmpNow := now;
[L5463]              havoc now;
[L5464]              assume now > tmpNow;
[L5465]              assume msgsender_MSG != null;
[L5466]              assume DType[msgsender_MSG] != Ownable;
[L5467]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]              assume DType[msgsender_MSG] != DepositLocker;
[L5469]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]              Alloc[msgsender_MSG] := true;
[L5471]  COND FALSE  !(choice == 9)
[L5480]  COND FALSE  !(choice == 8)
[L5489]  COND FALSE  !(choice == 7)
[L5498]  COND FALSE  !(choice == 6)
[L5507]  COND FALSE  !(choice == 5)
[L5516]  COND FALSE  !(choice == 4)
[L5525]  COND FALSE  !(choice == 3)
[L5535]  COND FALSE  !(choice == 2)
[L5544]  COND FALSE  !(choice == 1)
[L5577]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:21:03,777 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:21:03,777 INFO  L82        PathProgramCache]: Analyzing trace with hash 1395453065, now seen corresponding path program 1 times
[2020-05-30 21:21:03,777 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:21:03,816 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:21:04,116 INFO  L134       CoverageAnalysis]: Checked inductivity of 263 backedges. 8 proven. 30 refuted. 0 times theorem prover too weak. 225 trivial. 0 not checked.
[2020-05-30 21:21:04,116 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:21:04,116 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [14] total 14
[2020-05-30 21:21:04,117 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:21:04,117 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-05-30 21:21:04,117 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=29, Invalid=153, Unknown=0, NotChecked=0, Total=182
[2020-05-30 21:21:04,117 INFO  L87              Difference]: Start difference. First operand 11628 states and 12700 transitions. cyclomatic complexity: 1099 Second operand 14 states.
[2020-05-30 21:21:09,934 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:21:09,935 INFO  L93              Difference]: Finished difference Result 12374 states and 13624 transitions.
[2020-05-30 21:21:09,935 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-05-30 21:21:09,935 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12374 states and 13624 transitions.
[2020-05-30 21:21:09,962 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-30 21:21:09,991 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12374 states to 12374 states and 13624 transitions.
[2020-05-30 21:21:09,991 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 615
[2020-05-30 21:21:09,991 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 615
[2020-05-30 21:21:09,992 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12374 states and 13624 transitions.
[2020-05-30 21:21:09,998 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:21:09,998 INFO  L728         BuchiCegarLoop]: Abstraction has 12374 states and 13624 transitions.
[2020-05-30 21:21:10,004 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12374 states and 13624 transitions.
[2020-05-30 21:21:10,058 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12374 to 12326.
[2020-05-30 21:21:10,059 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 12326 states.
[2020-05-30 21:21:10,075 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 12326 states to 12326 states and 13564 transitions.
[2020-05-30 21:21:10,075 INFO  L751         BuchiCegarLoop]: Abstraction has 12326 states and 13564 transitions.
[2020-05-30 21:21:10,075 INFO  L631         BuchiCegarLoop]: Abstraction has 12326 states and 13564 transitions.
[2020-05-30 21:21:10,075 INFO  L445         BuchiCegarLoop]: ======== Iteration 47============
[2020-05-30 21:21:10,075 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12326 states and 13564 transitions.
[2020-05-30 21:21:10,088 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-30 21:21:10,088 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:21:10,088 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:21:10,090 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:21:10,090 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND FALSE  !(choice == 4)
[L5525]        COND TRUE   choice == 3
[L5527]                    gas := gas - 21000;
[L5528]        COND TRUE   gas >= 0
[L5530]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5530]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L5531]                    assume msgvalue_MSG == 0;
[L5532]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L5532]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND TRUE   choice == 5
[L5509]                    gas := gas - 21000;
[L5510]        COND TRUE   gas >= 0
[L5512]                    assume msgvalue_MSG == 0;
[L5513]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5513]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:21:10,095 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:21:10,095 INFO  L82        PathProgramCache]: Analyzing trace with hash -1877214597, now seen corresponding path program 2 times
[2020-05-30 21:21:10,096 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:21:10,135 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:21:10,461 INFO  L134       CoverageAnalysis]: Checked inductivity of 357 backedges. 4 proven. 70 refuted. 0 times theorem prover too weak. 283 trivial. 0 not checked.
[2020-05-30 21:21:10,461 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:21:10,461 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-05-30 21:21:10,461 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:21:10,462 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:21:10,462 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=131, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:21:10,462 INFO  L87              Difference]: Start difference. First operand 12326 states and 13564 transitions. cyclomatic complexity: 1266 Second operand 13 states.
[2020-05-30 21:21:17,159 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:21:17,159 INFO  L93              Difference]: Finished difference Result 11789 states and 12898 transitions.
[2020-05-30 21:21:17,159 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-05-30 21:21:17,160 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11789 states and 12898 transitions.
[2020-05-30 21:21:17,189 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-30 21:21:17,211 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11789 states to 10614 states and 11561 transitions.
[2020-05-30 21:21:17,211 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 615
[2020-05-30 21:21:17,212 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 615
[2020-05-30 21:21:17,212 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10614 states and 11561 transitions.
[2020-05-30 21:21:17,217 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:21:17,217 INFO  L728         BuchiCegarLoop]: Abstraction has 10614 states and 11561 transitions.
[2020-05-30 21:21:17,222 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10614 states and 11561 transitions.
[2020-05-30 21:21:17,266 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10614 to 10614.
[2020-05-30 21:21:17,267 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10614 states.
[2020-05-30 21:21:17,279 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10614 states to 10614 states and 11561 transitions.
[2020-05-30 21:21:17,279 INFO  L751         BuchiCegarLoop]: Abstraction has 10614 states and 11561 transitions.
[2020-05-30 21:21:17,279 INFO  L631         BuchiCegarLoop]: Abstraction has 10614 states and 11561 transitions.
[2020-05-30 21:21:17,279 INFO  L445         BuchiCegarLoop]: ======== Iteration 48============
[2020-05-30 21:21:17,280 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10614 states and 11561 transitions.
[2020-05-30 21:21:17,290 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-30 21:21:17,290 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:21:17,290 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:21:17,292 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:21:17,292 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND FALSE  !(choice == 4)
[L5525]        COND TRUE   choice == 3
[L5527]                    gas := gas - 21000;
[L5528]        COND TRUE   gas >= 0
[L5530]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5530]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L5531]                    assume msgvalue_MSG == 0;
[L5532]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L5532]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND TRUE   choice == 5
[L5509]                    gas := gas - 21000;
[L5510]        COND TRUE   gas >= 0
[L5512]                    assume msgvalue_MSG == 0;
[L5513]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5513]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]  CALL        call CorralChoice_ValidatorAuction(this);
[L5446]              havoc msgsender_MSG;
[L5447]              havoc msgvalue_MSG;
[L5448]              havoc choice;
[L5449]              havoc newOwner_s43;
[L5450]              havoc _startPriceInWei_s578;
[L5451]              havoc _auctionDurationInDays_s578;
[L5452]              havoc _minimalNumberOfParticipants_s578;
[L5453]              havoc _maximalNumberOfParticipants_s578;
[L5454]              havoc _depositLocker_s578;
[L5455]              havoc addressesToWhitelist_s852;
[L5456]              havoc __ret_0_currentPrice;
[L5457]              havoc secondsSinceStart_s978;
[L5458]              havoc __ret_0_priceAtElapsedTime;
[L5459]              havoc tmpNow;
[L5460]              havoc gas;
[L5461]              assume gas > 4000000 && gas <= 8000000;
[L5462]              tmpNow := now;
[L5463]              havoc now;
[L5464]              assume now > tmpNow;
[L5465]              assume msgsender_MSG != null;
[L5466]              assume DType[msgsender_MSG] != Ownable;
[L5467]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]              assume DType[msgsender_MSG] != DepositLocker;
[L5469]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]              Alloc[msgsender_MSG] := true;
[L5471]  COND FALSE  !(choice == 9)
[L5480]  COND FALSE  !(choice == 8)
[L5489]  COND FALSE  !(choice == 7)
[L5498]  COND FALSE  !(choice == 6)
[L5507]  COND FALSE  !(choice == 5)
[L5516]  COND FALSE  !(choice == 4)
[L5525]  COND FALSE  !(choice == 3)
[L5535]  COND FALSE  !(choice == 2)
[L5544]  COND FALSE  !(choice == 1)
[L5577]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:21:17,297 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:21:17,297 INFO  L82        PathProgramCache]: Analyzing trace with hash 2113229457, now seen corresponding path program 2 times
[2020-05-30 21:21:17,297 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:21:17,336 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:21:17,650 INFO  L134       CoverageAnalysis]: Checked inductivity of 347 backedges. 4 proven. 83 refuted. 0 times theorem prover too weak. 260 trivial. 0 not checked.
[2020-05-30 21:21:17,650 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:21:17,651 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-05-30 21:21:17,651 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:21:17,651 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:21:17,651 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=129, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:21:17,651 INFO  L87              Difference]: Start difference. First operand 10614 states and 11561 transitions. cyclomatic complexity: 972 Second operand 13 states.
[2020-05-30 21:21:21,850 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:21:21,850 INFO  L93              Difference]: Finished difference Result 10611 states and 11554 transitions.
[2020-05-30 21:21:21,850 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-30 21:21:21,850 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10611 states and 11554 transitions.
[2020-05-30 21:21:21,873 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-30 21:21:21,893 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10611 states to 10565 states and 11505 transitions.
[2020-05-30 21:21:21,894 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 615
[2020-05-30 21:21:21,894 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 615
[2020-05-30 21:21:21,894 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10565 states and 11505 transitions.
[2020-05-30 21:21:21,899 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:21:21,899 INFO  L728         BuchiCegarLoop]: Abstraction has 10565 states and 11505 transitions.
[2020-05-30 21:21:21,904 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10565 states and 11505 transitions.
[2020-05-30 21:21:21,947 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10565 to 10559.
[2020-05-30 21:21:21,947 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10559 states.
[2020-05-30 21:21:21,959 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10559 states to 10559 states and 11498 transitions.
[2020-05-30 21:21:21,959 INFO  L751         BuchiCegarLoop]: Abstraction has 10559 states and 11498 transitions.
[2020-05-30 21:21:21,959 INFO  L631         BuchiCegarLoop]: Abstraction has 10559 states and 11498 transitions.
[2020-05-30 21:21:21,959 INFO  L445         BuchiCegarLoop]: ======== Iteration 49============
[2020-05-30 21:21:21,959 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10559 states and 11498 transitions.
[2020-05-30 21:21:21,969 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-30 21:21:21,969 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:21:21,969 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:21:21,971 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:21:21,971 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND FALSE  !(choice == 4)
[L5525]        COND TRUE   choice == 3
[L5527]                    gas := gas - 21000;
[L5528]        COND TRUE   gas >= 0
[L5530]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5530]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L5531]                    assume msgvalue_MSG == 0;
[L5532]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L5532]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND TRUE   choice == 5
[L5509]                    gas := gas - 21000;
[L5510]        COND TRUE   gas >= 0
[L5512]                    assume msgvalue_MSG == 0;
[L5513]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5513]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:21:21,976 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:21:21,976 INFO  L82        PathProgramCache]: Analyzing trace with hash -1884173699, now seen corresponding path program 1 times
[2020-05-30 21:21:21,977 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:21:22,023 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:21:22,605 INFO  L134       CoverageAnalysis]: Checked inductivity of 389 backedges. 4 proven. 153 refuted. 0 times theorem prover too weak. 232 trivial. 0 not checked.
[2020-05-30 21:21:22,605 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:21:22,606 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [23] total 23
[2020-05-30 21:21:22,606 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:21:22,606 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 23 interpolants.
[2020-05-30 21:21:22,606 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=74, Invalid=432, Unknown=0, NotChecked=0, Total=506
[2020-05-30 21:21:22,607 INFO  L87              Difference]: Start difference. First operand 10559 states and 11498 transitions. cyclomatic complexity: 964 Second operand 23 states.
[2020-05-30 21:21:31,519 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:21:31,519 INFO  L93              Difference]: Finished difference Result 10580 states and 11535 transitions.
[2020-05-30 21:21:31,519 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 23 states. 
[2020-05-30 21:21:31,520 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10580 states and 11535 transitions.
[2020-05-30 21:21:31,542 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-30 21:21:31,563 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10580 states to 10576 states and 11527 transitions.
[2020-05-30 21:21:31,563 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 623
[2020-05-30 21:21:31,564 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 623
[2020-05-30 21:21:31,564 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10576 states and 11527 transitions.
[2020-05-30 21:21:31,569 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:21:31,569 INFO  L728         BuchiCegarLoop]: Abstraction has 10576 states and 11527 transitions.
[2020-05-30 21:21:31,574 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10576 states and 11527 transitions.
[2020-05-30 21:21:31,618 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10576 to 10563.
[2020-05-30 21:21:31,618 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10563 states.
[2020-05-30 21:21:31,630 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10563 states to 10563 states and 11510 transitions.
[2020-05-30 21:21:31,630 INFO  L751         BuchiCegarLoop]: Abstraction has 10563 states and 11510 transitions.
[2020-05-30 21:21:31,630 INFO  L631         BuchiCegarLoop]: Abstraction has 10563 states and 11510 transitions.
[2020-05-30 21:21:31,630 INFO  L445         BuchiCegarLoop]: ======== Iteration 50============
[2020-05-30 21:21:31,630 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10563 states and 11510 transitions.
[2020-05-30 21:21:31,640 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-30 21:21:31,640 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:21:31,640 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:21:31,642 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:21:31,642 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND FALSE  !(choice == 4)
[L5525]        COND TRUE   choice == 3
[L5527]                    gas := gas - 21000;
[L5528]        COND TRUE   gas >= 0
[L5530]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5530]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L5531]                    assume msgvalue_MSG == 0;
[L5532]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L5532]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND TRUE   choice == 5
[L5509]                    gas := gas - 21000;
[L5510]        COND TRUE   gas >= 0
[L5512]                    assume msgvalue_MSG == 0;
[L5513]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5513]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]  CALL        call CorralChoice_ValidatorAuction(this);
[L5446]              havoc msgsender_MSG;
[L5447]              havoc msgvalue_MSG;
[L5448]              havoc choice;
[L5449]              havoc newOwner_s43;
[L5450]              havoc _startPriceInWei_s578;
[L5451]              havoc _auctionDurationInDays_s578;
[L5452]              havoc _minimalNumberOfParticipants_s578;
[L5453]              havoc _maximalNumberOfParticipants_s578;
[L5454]              havoc _depositLocker_s578;
[L5455]              havoc addressesToWhitelist_s852;
[L5456]              havoc __ret_0_currentPrice;
[L5457]              havoc secondsSinceStart_s978;
[L5458]              havoc __ret_0_priceAtElapsedTime;
[L5459]              havoc tmpNow;
[L5460]              havoc gas;
[L5461]              assume gas > 4000000 && gas <= 8000000;
[L5462]              tmpNow := now;
[L5463]              havoc now;
[L5464]              assume now > tmpNow;
[L5465]              assume msgsender_MSG != null;
[L5466]              assume DType[msgsender_MSG] != Ownable;
[L5467]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]              assume DType[msgsender_MSG] != DepositLocker;
[L5469]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]              Alloc[msgsender_MSG] := true;
[L5471]  COND FALSE  !(choice == 9)
[L5480]  COND FALSE  !(choice == 8)
[L5489]  COND FALSE  !(choice == 7)
[L5498]  COND FALSE  !(choice == 6)
[L5507]  COND FALSE  !(choice == 5)
[L5516]  COND FALSE  !(choice == 4)
[L5525]  COND FALSE  !(choice == 3)
[L5535]  COND FALSE  !(choice == 2)
[L5544]  COND FALSE  !(choice == 1)
[L5577]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:21:31,647 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:21:31,647 INFO  L82        PathProgramCache]: Analyzing trace with hash 1010524479, now seen corresponding path program 1 times
[2020-05-30 21:21:31,647 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:21:31,683 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:21:32,039 INFO  L134       CoverageAnalysis]: Checked inductivity of 498 backedges. 68 proven. 30 refuted. 0 times theorem prover too weak. 400 trivial. 0 not checked.
[2020-05-30 21:21:32,039 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:21:32,039 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 21:21:32,040 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:21:32,040 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:21:32,040 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=107, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:21:32,040 INFO  L87              Difference]: Start difference. First operand 10563 states and 11510 transitions. cyclomatic complexity: 974 Second operand 12 states.
[2020-05-30 21:21:36,007 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:21:36,008 INFO  L93              Difference]: Finished difference Result 10516 states and 11441 transitions.
[2020-05-30 21:21:36,008 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-05-30 21:21:36,008 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10516 states and 11441 transitions.
[2020-05-30 21:21:36,030 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-30 21:21:36,050 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10516 states to 10431 states and 11353 transitions.
[2020-05-30 21:21:36,051 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 615
[2020-05-30 21:21:36,051 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 615
[2020-05-30 21:21:36,051 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10431 states and 11353 transitions.
[2020-05-30 21:21:36,056 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:21:36,056 INFO  L728         BuchiCegarLoop]: Abstraction has 10431 states and 11353 transitions.
[2020-05-30 21:21:36,061 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10431 states and 11353 transitions.
[2020-05-30 21:21:36,102 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10431 to 10429.
[2020-05-30 21:21:36,102 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10429 states.
[2020-05-30 21:21:36,114 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10429 states to 10429 states and 11351 transitions.
[2020-05-30 21:21:36,114 INFO  L751         BuchiCegarLoop]: Abstraction has 10429 states and 11351 transitions.
[2020-05-30 21:21:36,114 INFO  L631         BuchiCegarLoop]: Abstraction has 10429 states and 11351 transitions.
[2020-05-30 21:21:36,114 INFO  L445         BuchiCegarLoop]: ======== Iteration 51============
[2020-05-30 21:21:36,114 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10429 states and 11351 transitions.
[2020-05-30 21:21:36,124 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-30 21:21:36,124 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:21:36,124 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:21:36,126 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:21:36,126 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND FALSE  !(choice == 4)
[L5525]        COND TRUE   choice == 3
[L5527]                    gas := gas - 21000;
[L5528]        COND TRUE   gas >= 0
[L5530]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5530]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L5531]                    assume msgvalue_MSG == 0;
[L5532]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L5532]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG);
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND TRUE   choice == 5
[L5509]                    gas := gas - 21000;
[L5510]        COND TRUE   gas >= 0
[L5512]                    assume msgvalue_MSG == 0;
[L5513]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5513]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]  CALL        call CorralChoice_ValidatorAuction(this);
[L5446]              havoc msgsender_MSG;
[L5447]              havoc msgvalue_MSG;
[L5448]              havoc choice;
[L5449]              havoc newOwner_s43;
[L5450]              havoc _startPriceInWei_s578;
[L5451]              havoc _auctionDurationInDays_s578;
[L5452]              havoc _minimalNumberOfParticipants_s578;
[L5453]              havoc _maximalNumberOfParticipants_s578;
[L5454]              havoc _depositLocker_s578;
[L5455]              havoc addressesToWhitelist_s852;
[L5456]              havoc __ret_0_currentPrice;
[L5457]              havoc secondsSinceStart_s978;
[L5458]              havoc __ret_0_priceAtElapsedTime;
[L5459]              havoc tmpNow;
[L5460]              havoc gas;
[L5461]              assume gas > 4000000 && gas <= 8000000;
[L5462]              tmpNow := now;
[L5463]              havoc now;
[L5464]              assume now > tmpNow;
[L5465]              assume msgsender_MSG != null;
[L5466]              assume DType[msgsender_MSG] != Ownable;
[L5467]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]              assume DType[msgsender_MSG] != DepositLocker;
[L5469]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]              Alloc[msgsender_MSG] := true;
[L5471]  COND FALSE  !(choice == 9)
[L5480]  COND FALSE  !(choice == 8)
[L5489]  COND FALSE  !(choice == 7)
[L5498]  COND FALSE  !(choice == 6)
[L5507]  COND FALSE  !(choice == 5)
[L5516]  COND FALSE  !(choice == 4)
[L5525]  COND FALSE  !(choice == 3)
[L5535]  COND FALSE  !(choice == 2)
[L5544]  COND FALSE  !(choice == 1)
[L5577]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:21:36,131 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:21:36,131 INFO  L82        PathProgramCache]: Analyzing trace with hash -1693216353, now seen corresponding path program 1 times
[2020-05-30 21:21:36,132 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:21:36,169 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:21:36,807 INFO  L134       CoverageAnalysis]: Checked inductivity of 718 backedges. 10 proven. 4 refuted. 0 times theorem prover too weak. 704 trivial. 0 not checked.
[2020-05-30 21:21:36,808 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:21:36,808 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [19] total 19
[2020-05-30 21:21:36,808 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:21:36,808 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2020-05-30 21:21:36,809 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=53, Invalid=289, Unknown=0, NotChecked=0, Total=342
[2020-05-30 21:21:36,809 INFO  L87              Difference]: Start difference. First operand 10429 states and 11351 transitions. cyclomatic complexity: 948 Second operand 19 states.
[2020-05-30 21:21:50,639 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:21:50,639 INFO  L93              Difference]: Finished difference Result 10587 states and 11572 transitions.
[2020-05-30 21:21:50,639 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-05-30 21:21:50,639 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10587 states and 11572 transitions.
[2020-05-30 21:21:50,666 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-05-30 21:21:50,688 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10587 states to 10579 states and 11552 transitions.
[2020-05-30 21:21:50,689 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 641
[2020-05-30 21:21:50,689 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 641
[2020-05-30 21:21:50,689 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10579 states and 11552 transitions.
[2020-05-30 21:21:50,738 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:21:50,738 INFO  L728         BuchiCegarLoop]: Abstraction has 10579 states and 11552 transitions.
[2020-05-30 21:21:50,744 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10579 states and 11552 transitions.
[2020-05-30 21:21:50,790 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10579 to 10456.
[2020-05-30 21:21:50,790 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10456 states.
[2020-05-30 21:21:50,802 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10456 states to 10456 states and 11391 transitions.
[2020-05-30 21:21:50,802 INFO  L751         BuchiCegarLoop]: Abstraction has 10456 states and 11391 transitions.
[2020-05-30 21:21:50,802 INFO  L631         BuchiCegarLoop]: Abstraction has 10456 states and 11391 transitions.
[2020-05-30 21:21:50,802 INFO  L445         BuchiCegarLoop]: ======== Iteration 52============
[2020-05-30 21:21:50,802 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10456 states and 11391 transitions.
[2020-05-30 21:21:50,812 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-30 21:21:50,812 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:21:50,812 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:21:50,814 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:21:50,814 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND FALSE  !(choice == 4)
[L5525]        COND TRUE   choice == 3
[L5527]                    gas := gas - 21000;
[L5528]        COND TRUE   gas >= 0
[L5530]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5530]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L5531]                    assume msgvalue_MSG == 0;
[L5532]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L5532]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG);
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND TRUE   choice == 5
[L5509]                    gas := gas - 21000;
[L5510]        COND TRUE   gas >= 0
[L5512]                    assume msgvalue_MSG == 0;
[L5513]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5513]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:21:50,836 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:21:50,836 INFO  L82        PathProgramCache]: Analyzing trace with hash 318085263, now seen corresponding path program 2 times
[2020-05-30 21:21:50,836 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:21:50,885 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:21:51,996 INFO  L134       CoverageAnalysis]: Checked inductivity of 729 backedges. 25 proven. 85 refuted. 0 times theorem prover too weak. 619 trivial. 0 not checked.
[2020-05-30 21:21:51,997 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:21:51,997 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [31] total 31
[2020-05-30 21:21:51,997 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:21:51,997 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 32 interpolants.
[2020-05-30 21:21:51,998 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=113, Invalid=879, Unknown=0, NotChecked=0, Total=992
[2020-05-30 21:21:51,998 INFO  L87              Difference]: Start difference. First operand 10456 states and 11391 transitions. cyclomatic complexity: 965 Second operand 32 states.
[2020-05-30 21:22:08,028 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:22:08,028 INFO  L93              Difference]: Finished difference Result 10975 states and 12022 transitions.
[2020-05-30 21:22:08,028 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 35 states. 
[2020-05-30 21:22:08,028 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10975 states and 12022 transitions.
[2020-05-30 21:22:08,047 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-30 21:22:08,064 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10975 states to 10582 states and 11564 transitions.
[2020-05-30 21:22:08,064 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 623
[2020-05-30 21:22:08,065 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 623
[2020-05-30 21:22:08,065 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10582 states and 11564 transitions.
[2020-05-30 21:22:08,069 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:22:08,069 INFO  L728         BuchiCegarLoop]: Abstraction has 10582 states and 11564 transitions.
[2020-05-30 21:22:08,074 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10582 states and 11564 transitions.
[2020-05-30 21:22:08,114 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10582 to 10515.
[2020-05-30 21:22:08,114 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10515 states.
[2020-05-30 21:22:08,126 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10515 states to 10515 states and 11465 transitions.
[2020-05-30 21:22:08,126 INFO  L751         BuchiCegarLoop]: Abstraction has 10515 states and 11465 transitions.
[2020-05-30 21:22:08,126 INFO  L631         BuchiCegarLoop]: Abstraction has 10515 states and 11465 transitions.
[2020-05-30 21:22:08,126 INFO  L445         BuchiCegarLoop]: ======== Iteration 53============
[2020-05-30 21:22:08,126 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10515 states and 11465 transitions.
[2020-05-30 21:22:08,136 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-30 21:22:08,136 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:22:08,136 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:22:08,138 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:22:08,138 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND FALSE  !(choice == 4)
[L5525]        COND TRUE   choice == 3
[L5527]                    gas := gas - 21000;
[L5528]        COND TRUE   gas >= 0
[L5530]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5530]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L5531]                    assume msgvalue_MSG == 0;
[L5532]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L5532]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG);
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND TRUE   slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this]
[L3193]                    gas := gas - 20014;
[L3194]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3195]                    assume slotPrice_s709 >= 0;
[L3196]                    lowestSlotPrice_ValidatorAuction[this] := slotPrice_s709;
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND TRUE   choice == 5
[L5509]                    gas := gas - 21000;
[L5510]        COND TRUE   gas >= 0
[L5512]                    assume msgvalue_MSG == 0;
[L5513]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5513]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]  CALL        call CorralChoice_ValidatorAuction(this);
[L5446]              havoc msgsender_MSG;
[L5447]              havoc msgvalue_MSG;
[L5448]              havoc choice;
[L5449]              havoc newOwner_s43;
[L5450]              havoc _startPriceInWei_s578;
[L5451]              havoc _auctionDurationInDays_s578;
[L5452]              havoc _minimalNumberOfParticipants_s578;
[L5453]              havoc _maximalNumberOfParticipants_s578;
[L5454]              havoc _depositLocker_s578;
[L5455]              havoc addressesToWhitelist_s852;
[L5456]              havoc __ret_0_currentPrice;
[L5457]              havoc secondsSinceStart_s978;
[L5458]              havoc __ret_0_priceAtElapsedTime;
[L5459]              havoc tmpNow;
[L5460]              havoc gas;
[L5461]              assume gas > 4000000 && gas <= 8000000;
[L5462]              tmpNow := now;
[L5463]              havoc now;
[L5464]              assume now > tmpNow;
[L5465]              assume msgsender_MSG != null;
[L5466]              assume DType[msgsender_MSG] != Ownable;
[L5467]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]              assume DType[msgsender_MSG] != DepositLocker;
[L5469]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]              Alloc[msgsender_MSG] := true;
[L5471]  COND FALSE  !(choice == 9)
[L5480]  COND FALSE  !(choice == 8)
[L5489]  COND FALSE  !(choice == 7)
[L5498]  COND FALSE  !(choice == 6)
[L5507]  COND FALSE  !(choice == 5)
[L5516]  COND FALSE  !(choice == 4)
[L5525]  COND FALSE  !(choice == 3)
[L5535]  COND FALSE  !(choice == 2)
[L5544]  COND FALSE  !(choice == 1)
[L5577]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:22:08,142 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:22:08,142 INFO  L82        PathProgramCache]: Analyzing trace with hash 1906987947, now seen corresponding path program 1 times
[2020-05-30 21:22:08,143 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:22:08,196 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:22:09,227 INFO  L134       CoverageAnalysis]: Checked inductivity of 729 backedges. 25 proven. 85 refuted. 0 times theorem prover too weak. 619 trivial. 0 not checked.
[2020-05-30 21:22:09,227 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:22:09,227 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [29] total 29
[2020-05-30 21:22:09,228 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:22:09,228 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 30 interpolants.
[2020-05-30 21:22:09,228 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=91, Invalid=779, Unknown=0, NotChecked=0, Total=870
[2020-05-30 21:22:09,228 INFO  L87              Difference]: Start difference. First operand 10515 states and 11465 transitions. cyclomatic complexity: 980 Second operand 30 states.
[2020-05-30 21:22:25,566 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:22:25,566 INFO  L93              Difference]: Finished difference Result 10672 states and 11651 transitions.
[2020-05-30 21:22:25,566 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 34 states. 
[2020-05-30 21:22:25,566 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10672 states and 11651 transitions.
[2020-05-30 21:22:25,584 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-30 21:22:25,601 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10672 states to 10279 states and 11193 transitions.
[2020-05-30 21:22:25,601 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 623
[2020-05-30 21:22:25,601 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 623
[2020-05-30 21:22:25,601 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10279 states and 11193 transitions.
[2020-05-30 21:22:25,605 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:22:25,605 INFO  L728         BuchiCegarLoop]: Abstraction has 10279 states and 11193 transitions.
[2020-05-30 21:22:25,609 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10279 states and 11193 transitions.
[2020-05-30 21:22:25,647 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10279 to 9744.
[2020-05-30 21:22:25,647 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9744 states.
[2020-05-30 21:22:25,657 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9744 states to 9744 states and 10546 transitions.
[2020-05-30 21:22:25,657 INFO  L751         BuchiCegarLoop]: Abstraction has 9744 states and 10546 transitions.
[2020-05-30 21:22:25,657 INFO  L631         BuchiCegarLoop]: Abstraction has 9744 states and 10546 transitions.
[2020-05-30 21:22:25,657 INFO  L445         BuchiCegarLoop]: ======== Iteration 54============
[2020-05-30 21:22:25,657 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9744 states and 10546 transitions.
[2020-05-30 21:22:25,666 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:22:25,666 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:22:25,666 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:22:25,668 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:22:25,668 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND FALSE  !(choice == 4)
[L5525]        COND TRUE   choice == 3
[L5527]                    gas := gas - 21000;
[L5528]        COND TRUE   gas >= 0
[L5530]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5530]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L5531]                    assume msgvalue_MSG == 0;
[L5532]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L5532]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG);
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND TRUE   choice == 5
[L5509]                    gas := gas - 21000;
[L5510]        COND TRUE   gas >= 0
[L5512]                    assume msgvalue_MSG == 0;
[L5513]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5513]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]  CALL        call CorralChoice_ValidatorAuction(this);
[L5446]              havoc msgsender_MSG;
[L5447]              havoc msgvalue_MSG;
[L5448]              havoc choice;
[L5449]              havoc newOwner_s43;
[L5450]              havoc _startPriceInWei_s578;
[L5451]              havoc _auctionDurationInDays_s578;
[L5452]              havoc _minimalNumberOfParticipants_s578;
[L5453]              havoc _maximalNumberOfParticipants_s578;
[L5454]              havoc _depositLocker_s578;
[L5455]              havoc addressesToWhitelist_s852;
[L5456]              havoc __ret_0_currentPrice;
[L5457]              havoc secondsSinceStart_s978;
[L5458]              havoc __ret_0_priceAtElapsedTime;
[L5459]              havoc tmpNow;
[L5460]              havoc gas;
[L5461]              assume gas > 4000000 && gas <= 8000000;
[L5462]              tmpNow := now;
[L5463]              havoc now;
[L5464]              assume now > tmpNow;
[L5465]              assume msgsender_MSG != null;
[L5466]              assume DType[msgsender_MSG] != Ownable;
[L5467]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]              assume DType[msgsender_MSG] != DepositLocker;
[L5469]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]              Alloc[msgsender_MSG] := true;
[L5471]  COND FALSE  !(choice == 9)
[L5480]  COND FALSE  !(choice == 8)
[L5489]  COND FALSE  !(choice == 7)
[L5498]  COND FALSE  !(choice == 6)
[L5507]  COND FALSE  !(choice == 5)
[L5516]  COND FALSE  !(choice == 4)
[L5525]  COND FALSE  !(choice == 3)
[L5535]  COND FALSE  !(choice == 2)
[L5544]  COND FALSE  !(choice == 1)
[L5577]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:22:25,672 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:22:25,672 INFO  L82        PathProgramCache]: Analyzing trace with hash -1222962324, now seen corresponding path program 1 times
[2020-05-30 21:22:25,672 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:22:25,707 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:22:26,237 INFO  L134       CoverageAnalysis]: Checked inductivity of 281 backedges. 4 proven. 39 refuted. 0 times theorem prover too weak. 238 trivial. 0 not checked.
[2020-05-30 21:22:26,237 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:22:26,237 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [19] total 19
[2020-05-30 21:22:26,238 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:22:26,238 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2020-05-30 21:22:26,238 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=53, Invalid=289, Unknown=0, NotChecked=0, Total=342
[2020-05-30 21:22:26,238 INFO  L87              Difference]: Start difference. First operand 9744 states and 10546 transitions. cyclomatic complexity: 825 Second operand 19 states.
[2020-05-30 21:22:37,305 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:22:37,305 INFO  L93              Difference]: Finished difference Result 9821 states and 10627 transitions.
[2020-05-30 21:22:37,305 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-05-30 21:22:37,305 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9821 states and 10627 transitions.
[2020-05-30 21:22:37,326 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:22:37,345 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9821 states to 9817 states and 10619 transitions.
[2020-05-30 21:22:37,345 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 613
[2020-05-30 21:22:37,345 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 613
[2020-05-30 21:22:37,345 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9817 states and 10619 transitions.
[2020-05-30 21:22:37,349 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:22:37,350 INFO  L728         BuchiCegarLoop]: Abstraction has 9817 states and 10619 transitions.
[2020-05-30 21:22:37,355 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9817 states and 10619 transitions.
[2020-05-30 21:22:37,394 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9817 to 9738.
[2020-05-30 21:22:37,395 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9738 states.
[2020-05-30 21:22:37,405 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9738 states to 9738 states and 10532 transitions.
[2020-05-30 21:22:37,405 INFO  L751         BuchiCegarLoop]: Abstraction has 9738 states and 10532 transitions.
[2020-05-30 21:22:37,405 INFO  L631         BuchiCegarLoop]: Abstraction has 9738 states and 10532 transitions.
[2020-05-30 21:22:37,405 INFO  L445         BuchiCegarLoop]: ======== Iteration 55============
[2020-05-30 21:22:37,405 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9738 states and 10532 transitions.
[2020-05-30 21:22:37,415 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:22:37,415 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:22:37,415 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:22:37,417 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:22:37,417 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND FALSE  !(choice == 4)
[L5525]        COND TRUE   choice == 3
[L5527]                    gas := gas - 21000;
[L5528]        COND TRUE   gas >= 0
[L5530]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5530]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L5531]                    assume msgvalue_MSG == 0;
[L5532]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L5532]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG);
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND TRUE   choice == 5
[L5509]                    gas := gas - 21000;
[L5510]        COND TRUE   gas >= 0
[L5512]                    assume msgvalue_MSG == 0;
[L5513]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5513]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]  CALL        call CorralChoice_ValidatorAuction(this);
[L5446]              havoc msgsender_MSG;
[L5447]              havoc msgvalue_MSG;
[L5448]              havoc choice;
[L5449]              havoc newOwner_s43;
[L5450]              havoc _startPriceInWei_s578;
[L5451]              havoc _auctionDurationInDays_s578;
[L5452]              havoc _minimalNumberOfParticipants_s578;
[L5453]              havoc _maximalNumberOfParticipants_s578;
[L5454]              havoc _depositLocker_s578;
[L5455]              havoc addressesToWhitelist_s852;
[L5456]              havoc __ret_0_currentPrice;
[L5457]              havoc secondsSinceStart_s978;
[L5458]              havoc __ret_0_priceAtElapsedTime;
[L5459]              havoc tmpNow;
[L5460]              havoc gas;
[L5461]              assume gas > 4000000 && gas <= 8000000;
[L5462]              tmpNow := now;
[L5463]              havoc now;
[L5464]              assume now > tmpNow;
[L5465]              assume msgsender_MSG != null;
[L5466]              assume DType[msgsender_MSG] != Ownable;
[L5467]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]              assume DType[msgsender_MSG] != DepositLocker;
[L5469]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]              Alloc[msgsender_MSG] := true;
[L5471]  COND FALSE  !(choice == 9)
[L5480]  COND FALSE  !(choice == 8)
[L5489]  COND FALSE  !(choice == 7)
[L5498]  COND FALSE  !(choice == 6)
[L5507]  COND FALSE  !(choice == 5)
[L5516]  COND FALSE  !(choice == 4)
[L5525]  COND FALSE  !(choice == 3)
[L5535]  COND FALSE  !(choice == 2)
[L5544]  COND FALSE  !(choice == 1)
[L5577]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:22:37,421 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:22:37,422 INFO  L82        PathProgramCache]: Analyzing trace with hash -307753380, now seen corresponding path program 2 times
[2020-05-30 21:22:37,422 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:22:37,466 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:22:38,385 INFO  L134       CoverageAnalysis]: Checked inductivity of 292 backedges. 0 proven. 9 refuted. 0 times theorem prover too weak. 283 trivial. 0 not checked.
[2020-05-30 21:22:38,385 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:22:38,385 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [28] total 28
[2020-05-30 21:22:38,386 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:22:38,386 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 29 interpolants.
[2020-05-30 21:22:38,386 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=93, Invalid=719, Unknown=0, NotChecked=0, Total=812
[2020-05-30 21:22:38,386 INFO  L87              Difference]: Start difference. First operand 9738 states and 10532 transitions. cyclomatic complexity: 814 Second operand 29 states.
[2020-05-30 21:22:52,872 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:22:52,872 INFO  L93              Difference]: Finished difference Result 10127 states and 11014 transitions.
[2020-05-30 21:22:52,872 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 32 states. 
[2020-05-30 21:22:52,872 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10127 states and 11014 transitions.
[2020-05-30 21:22:52,890 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:22:52,907 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10127 states to 10127 states and 11012 transitions.
[2020-05-30 21:22:52,908 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 600
[2020-05-30 21:22:52,908 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 600
[2020-05-30 21:22:52,908 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10127 states and 11012 transitions.
[2020-05-30 21:22:52,912 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:22:52,912 INFO  L728         BuchiCegarLoop]: Abstraction has 10127 states and 11012 transitions.
[2020-05-30 21:22:52,917 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10127 states and 11012 transitions.
[2020-05-30 21:22:52,956 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10127 to 10077.
[2020-05-30 21:22:52,956 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10077 states.
[2020-05-30 21:22:52,966 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10077 states to 10077 states and 10940 transitions.
[2020-05-30 21:22:52,967 INFO  L751         BuchiCegarLoop]: Abstraction has 10077 states and 10940 transitions.
[2020-05-30 21:22:52,967 INFO  L631         BuchiCegarLoop]: Abstraction has 10077 states and 10940 transitions.
[2020-05-30 21:22:52,967 INFO  L445         BuchiCegarLoop]: ======== Iteration 56============
[2020-05-30 21:22:52,967 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10077 states and 10940 transitions.
[2020-05-30 21:22:52,976 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:22:52,976 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:22:52,976 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:22:52,978 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:22:52,978 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND FALSE  !(choice == 4)
[L5525]        COND TRUE   choice == 3
[L5527]                    gas := gas - 21000;
[L5528]        COND TRUE   gas >= 0
[L5530]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5530]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L5531]                    assume msgvalue_MSG == 0;
[L5532]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L5532]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND TRUE   slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this]
[L3193]                    gas := gas - 20014;
[L3194]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3195]                    assume slotPrice_s709 >= 0;
[L3196]                    lowestSlotPrice_ValidatorAuction[this] := slotPrice_s709;
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG);
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND TRUE   choice == 5
[L5509]                    gas := gas - 21000;
[L5510]        COND TRUE   gas >= 0
[L5512]                    assume msgvalue_MSG == 0;
[L5513]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5513]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]  CALL        call CorralChoice_ValidatorAuction(this);
[L5446]              havoc msgsender_MSG;
[L5447]              havoc msgvalue_MSG;
[L5448]              havoc choice;
[L5449]              havoc newOwner_s43;
[L5450]              havoc _startPriceInWei_s578;
[L5451]              havoc _auctionDurationInDays_s578;
[L5452]              havoc _minimalNumberOfParticipants_s578;
[L5453]              havoc _maximalNumberOfParticipants_s578;
[L5454]              havoc _depositLocker_s578;
[L5455]              havoc addressesToWhitelist_s852;
[L5456]              havoc __ret_0_currentPrice;
[L5457]              havoc secondsSinceStart_s978;
[L5458]              havoc __ret_0_priceAtElapsedTime;
[L5459]              havoc tmpNow;
[L5460]              havoc gas;
[L5461]              assume gas > 4000000 && gas <= 8000000;
[L5462]              tmpNow := now;
[L5463]              havoc now;
[L5464]              assume now > tmpNow;
[L5465]              assume msgsender_MSG != null;
[L5466]              assume DType[msgsender_MSG] != Ownable;
[L5467]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]              assume DType[msgsender_MSG] != DepositLocker;
[L5469]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]              Alloc[msgsender_MSG] := true;
[L5471]  COND FALSE  !(choice == 9)
[L5480]  COND FALSE  !(choice == 8)
[L5489]  COND FALSE  !(choice == 7)
[L5498]  COND FALSE  !(choice == 6)
[L5507]  COND FALSE  !(choice == 5)
[L5516]  COND FALSE  !(choice == 4)
[L5525]  COND FALSE  !(choice == 3)
[L5535]  COND FALSE  !(choice == 2)
[L5544]  COND FALSE  !(choice == 1)
[L5577]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:22:52,982 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:22:52,982 INFO  L82        PathProgramCache]: Analyzing trace with hash 1498932321, now seen corresponding path program 1 times
[2020-05-30 21:22:52,983 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:22:53,026 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:22:53,836 INFO  L134       CoverageAnalysis]: Checked inductivity of 292 backedges. 29 proven. 9 refuted. 0 times theorem prover too weak. 254 trivial. 0 not checked.
[2020-05-30 21:22:53,836 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:22:53,836 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [28] total 28
[2020-05-30 21:22:53,837 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:22:53,837 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 29 interpolants.
[2020-05-30 21:22:53,837 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=91, Invalid=721, Unknown=0, NotChecked=0, Total=812
[2020-05-30 21:22:53,837 INFO  L87              Difference]: Start difference. First operand 10077 states and 10940 transitions. cyclomatic complexity: 887 Second operand 29 states.
[2020-05-30 21:23:08,098 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:23:08,099 INFO  L93              Difference]: Finished difference Result 10365 states and 11286 transitions.
[2020-05-30 21:23:08,099 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 31 states. 
[2020-05-30 21:23:08,099 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10365 states and 11286 transitions.
[2020-05-30 21:23:08,118 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:23:08,136 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10365 states to 10365 states and 11284 transitions.
[2020-05-30 21:23:08,136 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 600
[2020-05-30 21:23:08,137 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 600
[2020-05-30 21:23:08,137 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10365 states and 11284 transitions.
[2020-05-30 21:23:08,141 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:23:08,141 INFO  L728         BuchiCegarLoop]: Abstraction has 10365 states and 11284 transitions.
[2020-05-30 21:23:08,146 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10365 states and 11284 transitions.
[2020-05-30 21:23:08,185 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10365 to 10009.
[2020-05-30 21:23:08,185 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10009 states.
[2020-05-30 21:23:08,196 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10009 states to 10009 states and 10850 transitions.
[2020-05-30 21:23:08,196 INFO  L751         BuchiCegarLoop]: Abstraction has 10009 states and 10850 transitions.
[2020-05-30 21:23:08,196 INFO  L631         BuchiCegarLoop]: Abstraction has 10009 states and 10850 transitions.
[2020-05-30 21:23:08,196 INFO  L445         BuchiCegarLoop]: ======== Iteration 57============
[2020-05-30 21:23:08,196 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10009 states and 10850 transitions.
[2020-05-30 21:23:08,206 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:23:08,206 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:23:08,206 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:23:08,208 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:23:08,208 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND FALSE  !(choice == 4)
[L5525]        COND TRUE   choice == 3
[L5527]                    gas := gas - 21000;
[L5528]        COND TRUE   gas >= 0
[L5530]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5530]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L5531]                    assume msgvalue_MSG == 0;
[L5532]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L5532]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG);
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND TRUE   choice == 5
[L5509]                    gas := gas - 21000;
[L5510]        COND TRUE   gas >= 0
[L5512]                    assume msgvalue_MSG == 0;
[L5513]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5513]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]  CALL        call CorralChoice_ValidatorAuction(this);
[L5446]              havoc msgsender_MSG;
[L5447]              havoc msgvalue_MSG;
[L5448]              havoc choice;
[L5449]              havoc newOwner_s43;
[L5450]              havoc _startPriceInWei_s578;
[L5451]              havoc _auctionDurationInDays_s578;
[L5452]              havoc _minimalNumberOfParticipants_s578;
[L5453]              havoc _maximalNumberOfParticipants_s578;
[L5454]              havoc _depositLocker_s578;
[L5455]              havoc addressesToWhitelist_s852;
[L5456]              havoc __ret_0_currentPrice;
[L5457]              havoc secondsSinceStart_s978;
[L5458]              havoc __ret_0_priceAtElapsedTime;
[L5459]              havoc tmpNow;
[L5460]              havoc gas;
[L5461]              assume gas > 4000000 && gas <= 8000000;
[L5462]              tmpNow := now;
[L5463]              havoc now;
[L5464]              assume now > tmpNow;
[L5465]              assume msgsender_MSG != null;
[L5466]              assume DType[msgsender_MSG] != Ownable;
[L5467]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]              assume DType[msgsender_MSG] != DepositLocker;
[L5469]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]              Alloc[msgsender_MSG] := true;
[L5471]  COND FALSE  !(choice == 9)
[L5480]  COND FALSE  !(choice == 8)
[L5489]  COND FALSE  !(choice == 7)
[L5498]  COND FALSE  !(choice == 6)
[L5507]  COND FALSE  !(choice == 5)
[L5516]  COND FALSE  !(choice == 4)
[L5525]  COND FALSE  !(choice == 3)
[L5535]  COND FALSE  !(choice == 2)
[L5544]  COND FALSE  !(choice == 1)
[L5577]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:23:08,212 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:23:08,212 INFO  L82        PathProgramCache]: Analyzing trace with hash -957351258, now seen corresponding path program 1 times
[2020-05-30 21:23:08,212 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:23:08,266 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:23:09,552 INFO  L134       CoverageAnalysis]: Checked inductivity of 458 backedges. 0 proven. 92 refuted. 0 times theorem prover too weak. 366 trivial. 0 not checked.
[2020-05-30 21:23:09,552 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:23:09,553 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [34] total 34
[2020-05-30 21:23:09,553 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:23:09,553 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 35 interpolants.
[2020-05-30 21:23:09,553 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=134, Invalid=1056, Unknown=0, NotChecked=0, Total=1190
[2020-05-30 21:23:09,554 INFO  L87              Difference]: Start difference. First operand 10009 states and 10850 transitions. cyclomatic complexity: 864 Second operand 35 states.
[2020-05-30 21:23:24,333 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:23:24,333 INFO  L93              Difference]: Finished difference Result 10522 states and 11477 transitions.
[2020-05-30 21:23:24,333 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 37 states. 
[2020-05-30 21:23:24,333 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10522 states and 11477 transitions.
[2020-05-30 21:23:24,352 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:23:24,370 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10522 states to 10129 states and 11019 transitions.
[2020-05-30 21:23:24,371 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 600
[2020-05-30 21:23:24,371 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 600
[2020-05-30 21:23:24,371 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10129 states and 11019 transitions.
[2020-05-30 21:23:24,375 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:23:24,375 INFO  L728         BuchiCegarLoop]: Abstraction has 10129 states and 11019 transitions.
[2020-05-30 21:23:24,380 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10129 states and 11019 transitions.
[2020-05-30 21:23:24,419 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10129 to 10079.
[2020-05-30 21:23:24,419 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10079 states.
[2020-05-30 21:23:24,430 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10079 states to 10079 states and 10947 transitions.
[2020-05-30 21:23:24,430 INFO  L751         BuchiCegarLoop]: Abstraction has 10079 states and 10947 transitions.
[2020-05-30 21:23:24,431 INFO  L631         BuchiCegarLoop]: Abstraction has 10079 states and 10947 transitions.
[2020-05-30 21:23:24,431 INFO  L445         BuchiCegarLoop]: ======== Iteration 58============
[2020-05-30 21:23:24,431 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10079 states and 10947 transitions.
[2020-05-30 21:23:24,440 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:23:24,440 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:23:24,440 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:23:24,442 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:23:24,442 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND FALSE  !(choice == 4)
[L5525]        COND TRUE   choice == 3
[L5527]                    gas := gas - 21000;
[L5528]        COND TRUE   gas >= 0
[L5530]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5530]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L5531]                    assume msgvalue_MSG == 0;
[L5532]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L5532]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND TRUE   slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this]
[L3193]                    gas := gas - 20014;
[L3194]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3195]                    assume slotPrice_s709 >= 0;
[L3196]                    lowestSlotPrice_ValidatorAuction[this] := slotPrice_s709;
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG);
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND TRUE   choice == 5
[L5509]                    gas := gas - 21000;
[L5510]        COND TRUE   gas >= 0
[L5512]                    assume msgvalue_MSG == 0;
[L5513]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5513]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]  CALL        call CorralChoice_ValidatorAuction(this);
[L5446]              havoc msgsender_MSG;
[L5447]              havoc msgvalue_MSG;
[L5448]              havoc choice;
[L5449]              havoc newOwner_s43;
[L5450]              havoc _startPriceInWei_s578;
[L5451]              havoc _auctionDurationInDays_s578;
[L5452]              havoc _minimalNumberOfParticipants_s578;
[L5453]              havoc _maximalNumberOfParticipants_s578;
[L5454]              havoc _depositLocker_s578;
[L5455]              havoc addressesToWhitelist_s852;
[L5456]              havoc __ret_0_currentPrice;
[L5457]              havoc secondsSinceStart_s978;
[L5458]              havoc __ret_0_priceAtElapsedTime;
[L5459]              havoc tmpNow;
[L5460]              havoc gas;
[L5461]              assume gas > 4000000 && gas <= 8000000;
[L5462]              tmpNow := now;
[L5463]              havoc now;
[L5464]              assume now > tmpNow;
[L5465]              assume msgsender_MSG != null;
[L5466]              assume DType[msgsender_MSG] != Ownable;
[L5467]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]              assume DType[msgsender_MSG] != DepositLocker;
[L5469]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]              Alloc[msgsender_MSG] := true;
[L5471]  COND FALSE  !(choice == 9)
[L5480]  COND FALSE  !(choice == 8)
[L5489]  COND FALSE  !(choice == 7)
[L5498]  COND FALSE  !(choice == 6)
[L5507]  COND FALSE  !(choice == 5)
[L5516]  COND FALSE  !(choice == 4)
[L5525]  COND FALSE  !(choice == 3)
[L5535]  COND FALSE  !(choice == 2)
[L5544]  COND FALSE  !(choice == 1)
[L5577]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:23:24,446 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:23:24,447 INFO  L82        PathProgramCache]: Analyzing trace with hash -302176021, now seen corresponding path program 1 times
[2020-05-30 21:23:24,447 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:23:24,501 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:23:25,715 INFO  L134       CoverageAnalysis]: Checked inductivity of 458 backedges. 29 proven. 92 refuted. 0 times theorem prover too weak. 337 trivial. 0 not checked.
[2020-05-30 21:23:25,715 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:23:25,715 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [35] total 35
[2020-05-30 21:23:25,716 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:23:25,716 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 36 interpolants.
[2020-05-30 21:23:25,716 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=134, Invalid=1126, Unknown=0, NotChecked=0, Total=1260
[2020-05-30 21:23:25,716 INFO  L87              Difference]: Start difference. First operand 10079 states and 10947 transitions. cyclomatic complexity: 893 Second operand 36 states.
[2020-05-30 21:23:40,313 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:23:40,313 INFO  L93              Difference]: Finished difference Result 10232 states and 11132 transitions.
[2020-05-30 21:23:40,313 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 37 states. 
[2020-05-30 21:23:40,313 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10232 states and 11132 transitions.
[2020-05-30 21:23:40,332 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:23:40,349 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10232 states to 9839 states and 10674 transitions.
[2020-05-30 21:23:40,349 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 600
[2020-05-30 21:23:40,350 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 600
[2020-05-30 21:23:40,350 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9839 states and 10674 transitions.
[2020-05-30 21:23:40,354 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:23:40,354 INFO  L728         BuchiCegarLoop]: Abstraction has 9839 states and 10674 transitions.
[2020-05-30 21:23:40,358 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9839 states and 10674 transitions.
[2020-05-30 21:23:40,397 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9839 to 9740.
[2020-05-30 21:23:40,397 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9740 states.
[2020-05-30 21:23:40,407 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9740 states to 9740 states and 10537 transitions.
[2020-05-30 21:23:40,407 INFO  L751         BuchiCegarLoop]: Abstraction has 9740 states and 10537 transitions.
[2020-05-30 21:23:40,407 INFO  L631         BuchiCegarLoop]: Abstraction has 9740 states and 10537 transitions.
[2020-05-30 21:23:40,407 INFO  L445         BuchiCegarLoop]: ======== Iteration 59============
[2020-05-30 21:23:40,408 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9740 states and 10537 transitions.
[2020-05-30 21:23:40,417 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:23:40,417 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:23:40,417 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:23:40,419 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:23:40,419 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5568]                    assume null == 0;
[L5569]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5569]        RET         call this := FreshRefGenerator__success();
[L5570]                    assume now >= 0;
[L5571]                    assume DType[this] == ValidatorAuction;
[L5572]                    gas := gas - 53000;
[L5573]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5573]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5574]                    assume !revert && gas >= 0;
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND FALSE  !(choice == 4)
[L5525]        COND TRUE   choice == 3
[L5527]                    gas := gas - 21000;
[L5528]        COND TRUE   gas >= 0
[L5530]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5530]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L5531]                    assume msgvalue_MSG == 0;
[L5532]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L5532]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND TRUE   choice == 6
[L5500]                    gas := gas - 21000;
[L5501]        COND TRUE   gas >= 0
[L5503]                    assume msgvalue_MSG == 0;
[L5504]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5066]                    gas := gas - 4257;
[L5067]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5504]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG);
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND TRUE   choice == 7
[L5491]                    gas := gas - 21000;
[L5492]        COND TRUE   gas >= 0
[L5494]                    assume msgvalue_MSG >= 0;
[L5495]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5495]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND FALSE  !(choice == 5)
[L5516]        COND TRUE   choice == 4
[L5518]                    gas := gas - 21000;
[L5519]        COND TRUE   gas >= 0
[L5521]                    assume msgvalue_MSG == 0;
[L5522]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5522]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND FALSE  !(choice == 8)
[L5489]        COND FALSE  !(choice == 7)
[L5498]        COND FALSE  !(choice == 6)
[L5507]        COND TRUE   choice == 5
[L5509]                    gas := gas - 21000;
[L5510]        COND TRUE   gas >= 0
[L5512]                    assume msgvalue_MSG == 0;
[L5513]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]                    gas := gas - 2148;
[L5091]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5138]                    gas := gas - 876;
[L5139]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5162]                    gas := gas - 1008;
[L5163]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5513]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);
[L5577]        CALL        call CorralChoice_ValidatorAuction(this);
[L5446]                    havoc msgsender_MSG;
[L5447]                    havoc msgvalue_MSG;
[L5448]                    havoc choice;
[L5449]                    havoc newOwner_s43;
[L5450]                    havoc _startPriceInWei_s578;
[L5451]                    havoc _auctionDurationInDays_s578;
[L5452]                    havoc _minimalNumberOfParticipants_s578;
[L5453]                    havoc _maximalNumberOfParticipants_s578;
[L5454]                    havoc _depositLocker_s578;
[L5455]                    havoc addressesToWhitelist_s852;
[L5456]                    havoc __ret_0_currentPrice;
[L5457]                    havoc secondsSinceStart_s978;
[L5458]                    havoc __ret_0_priceAtElapsedTime;
[L5459]                    havoc tmpNow;
[L5460]                    havoc gas;
[L5461]                    assume gas > 4000000 && gas <= 8000000;
[L5462]                    tmpNow := now;
[L5463]                    havoc now;
[L5464]                    assume now > tmpNow;
[L5465]                    assume msgsender_MSG != null;
[L5466]                    assume DType[msgsender_MSG] != Ownable;
[L5467]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]                    assume DType[msgsender_MSG] != DepositLocker;
[L5469]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]                    Alloc[msgsender_MSG] := true;
[L5471]        COND FALSE  !(choice == 9)
[L5480]        COND TRUE   choice == 8
[L5482]                    gas := gas - 21000;
[L5483]        COND TRUE   gas >= 0
[L5485]                    assume msgvalue_MSG == 0;
[L5486]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5186]                    gas := gas - 10516;
[L5187]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4987]                    havoc __exception;
[L4988]        COND FALSE  !(__exception)
[L5036]        COND TRUE   Balance[from] >= amount
[L5038]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4591]                    assume Balance[from] >= amount;
[L4592]                    Balance[from] := Balance[from] - amount;
[L4593]                    Balance[to] := Balance[to] + amount;
[L4594]        COND FALSE  !(choice == 0)
[L4600]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5038]        RET         call FallbackDispatch__success(from, to, amount);
[L5039]                    success := true;
[L5046]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5486]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5577]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5577]  CALL        call CorralChoice_ValidatorAuction(this);
[L5446]              havoc msgsender_MSG;
[L5447]              havoc msgvalue_MSG;
[L5448]              havoc choice;
[L5449]              havoc newOwner_s43;
[L5450]              havoc _startPriceInWei_s578;
[L5451]              havoc _auctionDurationInDays_s578;
[L5452]              havoc _minimalNumberOfParticipants_s578;
[L5453]              havoc _maximalNumberOfParticipants_s578;
[L5454]              havoc _depositLocker_s578;
[L5455]              havoc addressesToWhitelist_s852;
[L5456]              havoc __ret_0_currentPrice;
[L5457]              havoc secondsSinceStart_s978;
[L5458]              havoc __ret_0_priceAtElapsedTime;
[L5459]              havoc tmpNow;
[L5460]              havoc gas;
[L5461]              assume gas > 4000000 && gas <= 8000000;
[L5462]              tmpNow := now;
[L5463]              havoc now;
[L5464]              assume now > tmpNow;
[L5465]              assume msgsender_MSG != null;
[L5466]              assume DType[msgsender_MSG] != Ownable;
[L5467]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5468]              assume DType[msgsender_MSG] != DepositLocker;
[L5469]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5470]              Alloc[msgsender_MSG] := true;
[L5471]  COND FALSE  !(choice == 9)
[L5480]  COND FALSE  !(choice == 8)
[L5489]  COND FALSE  !(choice == 7)
[L5498]  COND FALSE  !(choice == 6)
[L5507]  COND FALSE  !(choice == 5)
[L5516]  COND FALSE  !(choice == 4)
[L5525]  COND FALSE  !(choice == 3)
[L5535]  COND FALSE  !(choice == 2)
[L5544]  COND FALSE  !(choice == 1)
[L5577]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:23:40,424 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:23:40,424 INFO  L82        PathProgramCache]: Analyzing trace with hash -1572731343, now seen corresponding path program 1 times
[2020-05-30 21:23:40,424 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:23:40,475 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:23:41,155 INFO  L134       CoverageAnalysis]: Checked inductivity of 1144 backedges. 356 proven. 68 refuted. 0 times theorem prover too weak. 720 trivial. 0 not checked.
[2020-05-30 21:23:41,155 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:23:41,155 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [20] total 20
[2020-05-30 21:23:41,156 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:23:41,156 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 20 interpolants.
[2020-05-30 21:23:41,156 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=49, Invalid=331, Unknown=0, NotChecked=0, Total=380
[2020-05-30 21:23:41,156 INFO  L87              Difference]: Start difference. First operand 9740 states and 10537 transitions. cyclomatic complexity: 818 Second operand 20 states.
[2020-05-30 21:23:44,628 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:23:44,628 INFO  L93              Difference]: Finished difference Result 5963 states and 6449 transitions.
[2020-05-30 21:23:44,628 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-30 21:23:44,628 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5963 states and 6449 transitions.
[2020-05-30 21:23:44,640 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-05-30 21:23:44,641 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5963 states to 0 states and 0 transitions.
[2020-05-30 21:23:44,641 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-05-30 21:23:44,641 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-05-30 21:23:44,641 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-05-30 21:23:44,641 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:23:44,641 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-30 21:23:44,641 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-30 21:23:44,641 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-30 21:23:44,641 INFO  L445         BuchiCegarLoop]: ======== Iteration 60============
[2020-05-30 21:23:44,641 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-05-30 21:23:44,641 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-05-30 21:23:44,641 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-05-30 21:23:44,646 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 30.05 09:23:44 BasicIcfg
[2020-05-30 21:23:44,646 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-05-30 21:23:44,646 INFO  L168              Benchmark]: Toolchain (without parser) took 540144.57 ms. Allocated memory was 514.9 MB in the beginning and 6.0 GB in the end (delta: 5.4 GB). Free memory was 453.4 MB in the beginning and 3.7 GB in the end (delta: -3.3 GB). Peak memory consumption was 2.2 GB. Max. memory is 15.3 GB.
[2020-05-30 21:23:44,647 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.11 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-05-30 21:23:44,648 INFO  L168              Benchmark]: Boogie Preprocessor took 89.67 ms. Allocated memory is still 514.9 MB. Free memory was 453.4 MB in the beginning and 442.7 MB in the end (delta: 10.8 MB). Peak memory consumption was 10.8 MB. Max. memory is 15.3 GB.
[2020-05-30 21:23:44,648 INFO  L168              Benchmark]: UtopiaSpecLang took 57.16 ms. Allocated memory is still 514.9 MB. Free memory was 442.7 MB in the beginning and 434.5 MB in the end (delta: 8.1 MB). Peak memory consumption was 8.1 MB. Max. memory is 15.3 GB.
[2020-05-30 21:23:44,648 INFO  L168              Benchmark]: Boogie Printer took 16.81 ms. Allocated memory is still 514.9 MB. Free memory was 434.5 MB in the beginning and 430.5 MB in the end (delta: 4.0 MB). Peak memory consumption was 4.0 MB. Max. memory is 15.3 GB.
[2020-05-30 21:23:44,649 INFO  L168              Benchmark]: RCFGBuilder took 683.54 ms. Allocated memory is still 514.9 MB. Free memory was 430.5 MB in the beginning and 410.1 MB in the end (delta: 20.4 MB). Peak memory consumption was 89.6 MB. Max. memory is 15.3 GB.
[2020-05-30 21:23:44,649 INFO  L168              Benchmark]: UtopiaLTL2Aut took 44.91 ms. Allocated memory is still 514.9 MB. Free memory was 410.1 MB in the beginning and 406.9 MB in the end (delta: 3.2 MB). Peak memory consumption was 3.2 MB. Max. memory is 15.3 GB.
[2020-05-30 21:23:44,650 INFO  L168              Benchmark]: BÃ¼chi Program Product took 9573.95 ms. Allocated memory was 514.9 MB in the beginning and 2.5 GB in the end (delta: 1.9 GB). Free memory was 406.9 MB in the beginning and 1.9 GB in the end (delta: -1.5 GB). Peak memory consumption was 1.5 GB. Max. memory is 15.3 GB.
[2020-05-30 21:23:44,650 INFO  L168              Benchmark]: BlockEncodingV2 took 735.37 ms. Allocated memory is still 2.5 GB. Free memory was 1.9 GB in the beginning and 1.3 GB in the end (delta: 542.6 MB). Peak memory consumption was 542.6 MB. Max. memory is 15.3 GB.
[2020-05-30 21:23:44,651 INFO  L168              Benchmark]: BuchiAutomizer took 528938.35 ms. Allocated memory was 2.5 GB in the beginning and 6.0 GB in the end (delta: 3.5 GB). Free memory was 1.3 GB in the beginning and 3.7 GB in the end (delta: -2.4 GB). Peak memory consumption was 1.1 GB. Max. memory is 15.3 GB.
[2020-05-30 21:23:44,653 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    24143 locations, 95400 edges
  - StatisticsResult: Encoded RCFG
    23975 locations, 94367 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.11 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 89.67 ms. Allocated memory is still 514.9 MB. Free memory was 453.4 MB in the beginning and 442.7 MB in the end (delta: 10.8 MB). Peak memory consumption was 10.8 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 57.16 ms. Allocated memory is still 514.9 MB. Free memory was 442.7 MB in the beginning and 434.5 MB in the end (delta: 8.1 MB). Peak memory consumption was 8.1 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 16.81 ms. Allocated memory is still 514.9 MB. Free memory was 434.5 MB in the beginning and 430.5 MB in the end (delta: 4.0 MB). Peak memory consumption was 4.0 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 683.54 ms. Allocated memory is still 514.9 MB. Free memory was 430.5 MB in the beginning and 410.1 MB in the end (delta: 20.4 MB). Peak memory consumption was 89.6 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 44.91 ms. Allocated memory is still 514.9 MB. Free memory was 410.1 MB in the beginning and 406.9 MB in the end (delta: 3.2 MB). Peak memory consumption was 3.2 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 9573.95 ms. Allocated memory was 514.9 MB in the beginning and 2.5 GB in the end (delta: 1.9 GB). Free memory was 406.9 MB in the beginning and 1.9 GB in the end (delta: -1.5 GB). Peak memory consumption was 1.5 GB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 735.37 ms. Allocated memory is still 2.5 GB. Free memory was 1.9 GB in the beginning and 1.3 GB in the end (delta: 542.6 MB). Peak memory consumption was 542.6 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 528938.35 ms. Allocated memory was 2.5 GB in the beginning and 6.0 GB in the end (delta: 3.5 GB). Free memory was 1.3 GB in the beginning and 3.7 GB in the end (delta: -2.4 GB). Peak memory consumption was 1.1 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    8 locations, 27 edges
  - StatisticsResult: Initial RCFG
    2616 locations, 3321 edges
  - StatisticsResult: BuchiProgram size
    24143 locations, 95400 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 59 terminating modules (59 trivial, 0 deterministic, 0 nondeterministic). 59 modules have a trivial ranking function, the largest among these consists of 36 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 528.9s and 60 iterations.  TraceHistogramMax:8. Analysis of lassos took 22.9s. Construction of modules took 408.4s. BÃ¼chi inclusion checks took 81.3s. Highest rank in rank-based complementation 0. Minimization of det autom 59. Minimization of nondet autom 0. Automata minimization 7.8s AutomataMinimizationTime, 58 MinimizatonAttempts, 23088 StatesRemovedByMinimization, 50 NontrivialMinimizations. Non-live state removal took 5.6s Buchi closure took 0.0s. Biggest automaton had 34336 states and ocurred in iteration 25.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 735865 SDtfs, 869667 SDslu, 1848975 SDs, 0 SdLazy, 3302005 SolverSat, 124926 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 408.4s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU59 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ( ( <>(success_bid_ValidatorAuction0) ) && ( <>(success_withdraw_ValidatorAuction0) ) )&& ! ( ( []( (success_closeAuction_ValidatorAuction0) ==> ( <>(success_send__success0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
