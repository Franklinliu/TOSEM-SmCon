This is Ultimate 0.1.24-9993c5c-m
[2020-05-30 21:28:15,570 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-05-30 21:28:15,571 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-05-30 21:28:15,583 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-05-30 21:28:15,584 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-05-30 21:28:15,585 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-05-30 21:28:15,587 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-05-30 21:28:15,589 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-05-30 21:28:15,591 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-05-30 21:28:15,592 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-05-30 21:28:15,593 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-05-30 21:28:15,593 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-05-30 21:28:15,595 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-05-30 21:28:15,596 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-05-30 21:28:15,598 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-05-30 21:28:15,599 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-05-30 21:28:15,600 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-05-30 21:28:15,601 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-05-30 21:28:15,602 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-05-30 21:28:15,604 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-05-30 21:28:15,605 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-05-30 21:28:15,606 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-05-30 21:28:15,608 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-05-30 21:28:15,608 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-05-30 21:28:15,608 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-05-30 21:28:15,609 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-05-30 21:28:15,609 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-05-30 21:28:15,610 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-05-30 21:28:15,611 INFO  L174        SettingsManager]: Resetting UtopiaLiveness preferences to default values
[2020-05-30 21:28:15,611 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-05-30 21:28:15,611 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-05-30 21:28:15,612 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-05-30 21:28:15,613 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-05-30 21:28:15,614 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-05-30 21:28:15,615 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-05-30 21:28:15,616 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-05-30 21:28:15,617 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-05-30 21:28:15,617 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-05-30 21:28:15,618 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-05-30 21:28:15,618 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-05-30 21:28:15,619 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-05-30 21:28:15,620 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-05-30 21:28:15,620 INFO  L98         SettingsManager]: Beginning loading settings from /Users/jon/Documents/Research/masterUltimate/SmartPulse/settings.epf
[2020-05-30 21:28:15,629 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-05-30 21:28:15,630 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-05-30 21:28:15,631 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-05-30 21:28:15,631 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-05-30 21:28:15,631 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/Users/jon/Documents/Research/devUltimate/ltl2ba
[2020-05-30 21:28:15,631 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-05-30 21:28:15,631 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-05-30 21:28:15,631 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-05-30 21:28:15,631 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-05-30 21:28:15,631 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-05-30 21:28:15,631 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-05-30 21:28:15,632 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-05-30 21:28:15,632 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-05-30 21:28:15,632 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-05-30 21:28:15,632 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-05-30 21:28:15,632 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-05-30 21:28:15,632 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-05-30 21:28:15,632 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-05-30 21:28:15,632 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-05-30 21:28:15,633 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-05-30 21:28:15,633 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-05-30 21:28:15,633 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-05-30 21:28:15,633 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-05-30 21:28:15,633 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-05-30 21:28:15,633 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-05-30 21:28:15,633 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-05-30 21:28:15,654 INFO  L81    nceAwareModelManager]: Repository-Root is: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T
[2020-05-30 21:28:15,664 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-05-30 21:28:15,666 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-05-30 21:28:15,667 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-05-30 21:28:15,667 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-05-30 21:28:15,669 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/ValidatorAuction/no-callback/L3-ValidatorAuction.bpl
[2020-05-30 21:28:15,669 INFO  L111           BoogieParser]: Parsing: '/Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/ValidatorAuction/no-callback/L3-ValidatorAuction.bpl'
[2020-05-30 21:28:15,735 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-05-30 21:28:15,736 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-05-30 21:28:15,737 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-05-30 21:28:15,737 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-05-30 21:28:15,737 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-05-30 21:28:15,750 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "L3-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:28:15" (1/1) ...
[2020-05-30 21:28:15,751 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "L3-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:28:15" (1/1) ...
[2020-05-30 21:28:15,778 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "L3-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:28:15" (1/1) ...
[2020-05-30 21:28:15,778 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "L3-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:28:15" (1/1) ...
[2020-05-30 21:28:15,797 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "L3-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:28:15" (1/1) ...
[2020-05-30 21:28:15,805 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "L3-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:28:15" (1/1) ...
[2020-05-30 21:28:15,814 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "L3-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:28:15" (1/1) ...
[2020-05-30 21:28:15,823 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-05-30 21:28:15,823 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-05-30 21:28:15,823 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-05-30 21:28:15,825 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-05-30 21:28:15,828 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "L3-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:28:15" (1/1) ...
[2020-05-30 21:28:15,847 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: []((finished(ValidatorAuction.closeAuction)) ==> (<>(finished(send(from, to, amt), (to == user && amt == fsum(ValidatorAuction.bid, 2, (user == msg.sender)))))))
[2020-05-30 21:28:15,853 INFO  L979   opiaSpecLangObserver]: Successfully lexed: []((finished(ValidatorAuction.closeAuction)) ==> (<>(finished(send(from, to, amt), (to == user && amt == fsum(ValidatorAuction.bid, 2, (user == msg.sender)))))))
[2020-05-30 21:28:15,859 INFO  L981   opiaSpecLangObserver]: Successfully parsed: []((finished(ValidatorAuction.closeAuction)) ==> (<>(finished(send(from, to, amt), (to == user && amt == fsum(ValidatorAuction.bid, 2, (user == msg.sender)))))))
[2020-05-30 21:28:15,862 INFO  L599   opiaSpecLangObserver]: Parsed user==msg.sender to BinaryExpression[COMPEQ,IdentifierExpression[user,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,bid_ValidatorAuction>]]
[2020-05-30 21:28:15,864 INFO  L599   opiaSpecLangObserver]: Parsed ( to==user && amount==fsum_bid_ValidatorAuction_2_0 ) to BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[to,<IMPLEMENTATION_INPARAM,send__success>],IdentifierExpression[user,GLOBAL]],BinaryExpression[COMPEQ,IdentifierExpression[amount,<IMPLEMENTATION_INPARAM,send__success>],IdentifierExpression[fsum_bid_ValidatorAuction_2_0,GLOBAL]]]
[2020-05-30 21:28:15,864 INFO  L968   opiaSpecLangObserver]: Compiling: []((finished(ValidatorAuction.closeAuction)) ==> (<>(finished(send(from, to, amt), (to == user && amt == fsum(ValidatorAuction.bid, 2, (user == msg.sender)))))))
[2020-05-30 21:28:15,865 INFO  L970   opiaSpecLangObserver]: Compiled to ( []( AP(success_closeAuction_ValidatorAuction0) ==> ( <>AP(success_send__success0) ) ) )
[2020-05-30 21:28:15,865 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: (<>(finished(ValidatorAuction.bid, (user == msg.sender)))) && (<>(finished(ValidatorAuction.withdraw, (user == msg.sender && auctionState_ValidatorAuction[this] == 4))))
[2020-05-30 21:28:15,865 INFO  L979   opiaSpecLangObserver]: Successfully lexed: (<>(finished(ValidatorAuction.bid, (user == msg.sender)))) && (<>(finished(ValidatorAuction.withdraw, (user == msg.sender && auctionState_ValidatorAuction[this] == 4))))
[2020-05-30 21:28:15,866 INFO  L981   opiaSpecLangObserver]: Successfully parsed: (<>(finished(ValidatorAuction.bid, (user == msg.sender)))) && (<>(finished(ValidatorAuction.withdraw, (user == msg.sender && auctionState_ValidatorAuction[this] == 4))))
[2020-05-30 21:28:15,867 INFO  L599   opiaSpecLangObserver]: Parsed user==msg.sender to BinaryExpression[COMPEQ,IdentifierExpression[user,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,bid_ValidatorAuction>]]
[2020-05-30 21:28:15,869 INFO  L599   opiaSpecLangObserver]: Parsed ( user==msg.sender && auctionState_ValidatorAuction[this]==4 ) to BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[user,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,withdraw_ValidatorAuction>]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[auctionState_ValidatorAuction,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,withdraw_ValidatorAuction>]]],IntegerLiteral[4]]]
[2020-05-30 21:28:15,869 INFO  L968   opiaSpecLangObserver]: Compiling: (<>(finished(ValidatorAuction.bid, (user == msg.sender)))) && (<>(finished(ValidatorAuction.withdraw, (user == msg.sender && auctionState_ValidatorAuction[this] == 4))))
[2020-05-30 21:28:15,870 INFO  L970   opiaSpecLangObserver]: Compiled to ( ( <>AP(success_bid_ValidatorAuction0) ) && ( <>AP(success_withdraw_ValidatorAuction0) ) )
Executed UtopiaSpecLang
[2020-05-30 21:28:15,877 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 09:28:15 PropertyContainer
[2020-05-30 21:28:15,877 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-05-30 21:28:15,878 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-05-30 21:28:15,878 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-05-30 21:28:15,878 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-05-30 21:28:15,879 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "L3-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:28:15" (1/2) ...
[2020-05-30 21:28:15,879 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-30 21:28:15,879 INFO  L120   oogiePrinterObserver]: Writing to file /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-30 21:28:15,893 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 09:28:15" (2/2) ...
[2020-05-30 21:28:15,894 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-05-30 21:28:15,894 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-05-30 21:28:15,894 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-05-30 21:28:15,894 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-05-30 21:28:15,895 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "L3-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:28:15" (1/2) ...
[2020-05-30 21:28:15,939 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-05-30 21:28:15,939 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-05-30 21:28:15,939 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-05-30 21:28:15,939 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-05-30 21:28:15,939 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership_Ownable
[2020-05-30 21:28:15,939 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership_Ownable
[2020-05-30 21:28:15,940 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLockerInterface_DepositLockerInterface_NoBaseCtor__success
[2020-05-30 21:28:15,940 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLockerInterface_DepositLockerInterface
[2020-05-30 21:28:15,940 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLockerInterface_DepositLockerInterface
[2020-05-30 21:28:15,940 INFO  L130     BoogieDeclarations]: Found specification of procedure slash_DepositLockerInterface
[2020-05-30 21:28:15,940 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLocker_DepositLocker_NoBaseCtor__success
[2020-05-30 21:28:15,940 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLocker_DepositLocker
[2020-05-30 21:28:15,940 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLocker_DepositLocker
[2020-05-30 21:28:15,941 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_DepositLocker__success
[2020-05-30 21:28:15,941 INFO  L130     BoogieDeclarations]: Found specification of procedure init_DepositLocker
[2020-05-30 21:28:15,941 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_DepositLocker
[2020-05-30 21:28:15,941 INFO  L130     BoogieDeclarations]: Found specification of procedure registerDepositor_DepositLocker
[2020-05-30 21:28:15,941 INFO  L138     BoogieDeclarations]: Found implementation of procedure registerDepositor_DepositLocker
[2020-05-30 21:28:15,941 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_DepositLocker
[2020-05-30 21:28:15,941 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_DepositLocker
[2020-05-30 21:28:15,941 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_DepositLocker
[2020-05-30 21:28:15,941 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_DepositLocker
[2020-05-30 21:28:15,941 INFO  L130     BoogieDeclarations]: Found specification of procedure slash_DepositLocker
[2020-05-30 21:28:15,941 INFO  L138     BoogieDeclarations]: Found implementation of procedure slash_DepositLocker
[2020-05-30 21:28:15,942 INFO  L130     BoogieDeclarations]: Found specification of procedure ValidatorAuction_ValidatorAuction_NoBaseCtor__success
[2020-05-30 21:28:15,942 INFO  L130     BoogieDeclarations]: Found specification of procedure ValidatorAuction_ValidatorAuction
[2020-05-30 21:28:15,942 INFO  L138     BoogieDeclarations]: Found implementation of procedure ValidatorAuction_ValidatorAuction
[2020-05-30 21:28:15,942 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ValidatorAuction__success
[2020-05-30 21:28:15,942 INFO  L130     BoogieDeclarations]: Found specification of procedure bid_ValidatorAuction
[2020-05-30 21:28:15,942 INFO  L138     BoogieDeclarations]: Found implementation of procedure bid_ValidatorAuction
[2020-05-30 21:28:15,942 INFO  L130     BoogieDeclarations]: Found specification of procedure startAuction_ValidatorAuction
[2020-05-30 21:28:15,942 INFO  L138     BoogieDeclarations]: Found implementation of procedure startAuction_ValidatorAuction
[2020-05-30 21:28:15,942 INFO  L130     BoogieDeclarations]: Found specification of procedure depositBids_ValidatorAuction
[2020-05-30 21:28:15,942 INFO  L138     BoogieDeclarations]: Found implementation of procedure depositBids_ValidatorAuction
[2020-05-30 21:28:15,942 INFO  L130     BoogieDeclarations]: Found specification of procedure closeAuction_ValidatorAuction
[2020-05-30 21:28:15,942 INFO  L138     BoogieDeclarations]: Found implementation of procedure closeAuction_ValidatorAuction
[2020-05-30 21:28:15,942 INFO  L130     BoogieDeclarations]: Found specification of procedure addToWhitelist_ValidatorAuction
[2020-05-30 21:28:15,943 INFO  L138     BoogieDeclarations]: Found implementation of procedure addToWhitelist_ValidatorAuction
[2020-05-30 21:28:15,943 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_ValidatorAuction
[2020-05-30 21:28:15,943 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_ValidatorAuction
[2020-05-30 21:28:15,943 INFO  L130     BoogieDeclarations]: Found specification of procedure currentPrice_ValidatorAuction
[2020-05-30 21:28:15,943 INFO  L138     BoogieDeclarations]: Found implementation of procedure currentPrice_ValidatorAuction
[2020-05-30 21:28:15,943 INFO  L130     BoogieDeclarations]: Found specification of procedure priceAtElapsedTime_ValidatorAuction
[2020-05-30 21:28:15,943 INFO  L138     BoogieDeclarations]: Found implementation of procedure priceAtElapsedTime_ValidatorAuction
[2020-05-30 21:28:15,943 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawAfterAuctionEnded_ValidatorAuction__success
[2020-05-30 21:28:15,943 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawAfterAuctionFailed_ValidatorAuction__success
[2020-05-30 21:28:15,943 INFO  L130     BoogieDeclarations]: Found specification of procedure transitionToDepositPending_ValidatorAuction__success
[2020-05-30 21:28:15,943 INFO  L130     BoogieDeclarations]: Found specification of procedure transitionToAuctionFailed_ValidatorAuction__success
[2020-05-30 21:28:15,943 INFO  L130     BoogieDeclarations]: Found specification of procedure isSenderContract_ValidatorAuction__success
[2020-05-30 21:28:15,943 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-05-30 21:28:15,944 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-05-30 21:28:15,944 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-05-30 21:28:15,944 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-05-30 21:28:15,944 INFO  L130     BoogieDeclarations]: Found specification of procedure isInitialised_pre__success
[2020-05-30 21:28:15,944 INFO  L130     BoogieDeclarations]: Found specification of procedure isDeposited_pre__success
[2020-05-30 21:28:15,944 INFO  L130     BoogieDeclarations]: Found specification of procedure isNotDeposited_pre__success
[2020-05-30 21:28:15,944 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyDepositorsProxy_pre__success
[2020-05-30 21:28:15,944 INFO  L130     BoogieDeclarations]: Found specification of procedure stateIs_pre__success
[2020-05-30 21:28:15,944 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-05-30 21:28:15,944 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-05-30 21:28:15,944 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DepositLockerInterface
[2020-05-30 21:28:15,944 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_DepositLockerInterface
[2020-05-30 21:28:15,944 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DepositLocker
[2020-05-30 21:28:15,945 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_DepositLocker
[2020-05-30 21:28:15,945 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ValidatorAuction
[2020-05-30 21:28:15,945 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-05-30 21:28:15,945 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-05-30 21:28:15,945 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-05-30 21:28:15,945 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-05-30 21:28:15,945 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-05-30 21:28:15,945 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership_Ownable__success
[2020-05-30 21:28:15,945 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership_Ownable__fail
[2020-05-30 21:28:15,945 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLockerInterface_DepositLockerInterface_NoBaseCtor__fail
[2020-05-30 21:28:15,945 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLockerInterface_DepositLockerInterface__success
[2020-05-30 21:28:15,945 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLockerInterface_DepositLockerInterface__fail
[2020-05-30 21:28:15,946 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLocker_DepositLocker_NoBaseCtor__fail
[2020-05-30 21:28:15,946 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLocker_DepositLocker__success
[2020-05-30 21:28:15,946 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLocker_DepositLocker__fail
[2020-05-30 21:28:15,946 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_DepositLocker__fail
[2020-05-30 21:28:15,946 INFO  L130     BoogieDeclarations]: Found specification of procedure init_DepositLocker__success
[2020-05-30 21:28:15,946 INFO  L130     BoogieDeclarations]: Found specification of procedure init_DepositLocker__fail
[2020-05-30 21:28:15,946 INFO  L130     BoogieDeclarations]: Found specification of procedure registerDepositor_DepositLocker__success
[2020-05-30 21:28:15,946 INFO  L130     BoogieDeclarations]: Found specification of procedure registerDepositor_DepositLocker__fail
[2020-05-30 21:28:15,946 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_DepositLocker__success
[2020-05-30 21:28:15,946 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_DepositLocker__fail
[2020-05-30 21:28:15,946 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_DepositLocker__success
[2020-05-30 21:28:15,946 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_DepositLocker__fail
[2020-05-30 21:28:15,946 INFO  L130     BoogieDeclarations]: Found specification of procedure slash_DepositLocker__success
[2020-05-30 21:28:15,946 INFO  L130     BoogieDeclarations]: Found specification of procedure slash_DepositLocker__fail
[2020-05-30 21:28:15,947 INFO  L130     BoogieDeclarations]: Found specification of procedure ValidatorAuction_ValidatorAuction_NoBaseCtor__fail
[2020-05-30 21:28:15,947 INFO  L130     BoogieDeclarations]: Found specification of procedure ValidatorAuction_ValidatorAuction__success
[2020-05-30 21:28:15,947 INFO  L130     BoogieDeclarations]: Found specification of procedure ValidatorAuction_ValidatorAuction__fail
[2020-05-30 21:28:15,947 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ValidatorAuction__fail
[2020-05-30 21:28:15,947 INFO  L130     BoogieDeclarations]: Found specification of procedure bid_ValidatorAuction__success
[2020-05-30 21:28:15,947 INFO  L130     BoogieDeclarations]: Found specification of procedure bid_ValidatorAuction__fail
[2020-05-30 21:28:15,947 INFO  L130     BoogieDeclarations]: Found specification of procedure startAuction_ValidatorAuction__success
[2020-05-30 21:28:15,947 INFO  L130     BoogieDeclarations]: Found specification of procedure startAuction_ValidatorAuction__fail
[2020-05-30 21:28:15,947 INFO  L130     BoogieDeclarations]: Found specification of procedure depositBids_ValidatorAuction__success
[2020-05-30 21:28:15,947 INFO  L130     BoogieDeclarations]: Found specification of procedure depositBids_ValidatorAuction__fail
[2020-05-30 21:28:15,947 INFO  L130     BoogieDeclarations]: Found specification of procedure closeAuction_ValidatorAuction__success
[2020-05-30 21:28:15,947 INFO  L130     BoogieDeclarations]: Found specification of procedure closeAuction_ValidatorAuction__fail
[2020-05-30 21:28:15,948 INFO  L130     BoogieDeclarations]: Found specification of procedure addToWhitelist_ValidatorAuction__success
[2020-05-30 21:28:15,948 INFO  L130     BoogieDeclarations]: Found specification of procedure addToWhitelist_ValidatorAuction__fail
[2020-05-30 21:28:15,948 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_ValidatorAuction__success
[2020-05-30 21:28:15,948 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_ValidatorAuction__fail
[2020-05-30 21:28:15,948 INFO  L130     BoogieDeclarations]: Found specification of procedure currentPrice_ValidatorAuction__success
[2020-05-30 21:28:15,948 INFO  L130     BoogieDeclarations]: Found specification of procedure currentPrice_ValidatorAuction__fail
[2020-05-30 21:28:15,948 INFO  L130     BoogieDeclarations]: Found specification of procedure priceAtElapsedTime_ValidatorAuction__success
[2020-05-30 21:28:15,948 INFO  L130     BoogieDeclarations]: Found specification of procedure priceAtElapsedTime_ValidatorAuction__fail
[2020-05-30 21:28:15,949 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawAfterAuctionEnded_ValidatorAuction__fail
[2020-05-30 21:28:15,949 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawAfterAuctionFailed_ValidatorAuction__fail
[2020-05-30 21:28:15,949 INFO  L130     BoogieDeclarations]: Found specification of procedure transitionToDepositPending_ValidatorAuction__fail
[2020-05-30 21:28:15,949 INFO  L130     BoogieDeclarations]: Found specification of procedure transitionToAuctionFailed_ValidatorAuction__fail
[2020-05-30 21:28:15,949 INFO  L130     BoogieDeclarations]: Found specification of procedure isSenderContract_ValidatorAuction__fail
[2020-05-30 21:28:15,949 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-05-30 21:28:15,949 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-05-30 21:28:15,949 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-05-30 21:28:15,949 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-05-30 21:28:15,950 INFO  L130     BoogieDeclarations]: Found specification of procedure isInitialised_pre__fail
[2020-05-30 21:28:15,950 INFO  L130     BoogieDeclarations]: Found specification of procedure isDeposited_pre__fail
[2020-05-30 21:28:15,950 INFO  L130     BoogieDeclarations]: Found specification of procedure isNotDeposited_pre__fail
[2020-05-30 21:28:15,950 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyDepositorsProxy_pre__fail
[2020-05-30 21:28:15,950 INFO  L130     BoogieDeclarations]: Found specification of procedure stateIs_pre__fail
[2020-05-30 21:28:15,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-05-30 21:28:15,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-05-30 21:28:15,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-05-30 21:28:15,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-05-30 21:28:15,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-05-30 21:28:15,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-05-30 21:28:15,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership_Ownable__fail
[2020-05-30 21:28:15,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership_Ownable__success
[2020-05-30 21:28:15,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLockerInterface_DepositLockerInterface_NoBaseCtor__fail
[2020-05-30 21:28:15,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLockerInterface_DepositLockerInterface_NoBaseCtor__success
[2020-05-30 21:28:15,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLockerInterface_DepositLockerInterface__fail
[2020-05-30 21:28:15,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLockerInterface_DepositLockerInterface__success
[2020-05-30 21:28:15,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLocker_DepositLocker_NoBaseCtor__fail
[2020-05-30 21:28:15,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLocker_DepositLocker_NoBaseCtor__success
[2020-05-30 21:28:15,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLocker_DepositLocker__fail
[2020-05-30 21:28:15,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLocker_DepositLocker__success
[2020-05-30 21:28:15,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_DepositLocker__fail
[2020-05-30 21:28:15,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_DepositLocker__success
[2020-05-30 21:28:15,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_DepositLocker__fail
[2020-05-30 21:28:15,953 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_DepositLocker__success
[2020-05-30 21:28:15,953 INFO  L138     BoogieDeclarations]: Found implementation of procedure registerDepositor_DepositLocker__fail
[2020-05-30 21:28:15,953 INFO  L138     BoogieDeclarations]: Found implementation of procedure registerDepositor_DepositLocker__success
[2020-05-30 21:28:15,953 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_DepositLocker__fail
[2020-05-30 21:28:15,953 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_DepositLocker__success
[2020-05-30 21:28:15,953 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_DepositLocker__fail
[2020-05-30 21:28:15,953 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_DepositLocker__success
[2020-05-30 21:28:15,953 INFO  L138     BoogieDeclarations]: Found implementation of procedure slash_DepositLocker__fail
[2020-05-30 21:28:15,954 INFO  L138     BoogieDeclarations]: Found implementation of procedure slash_DepositLocker__success
[2020-05-30 21:28:15,954 INFO  L138     BoogieDeclarations]: Found implementation of procedure ValidatorAuction_ValidatorAuction_NoBaseCtor__fail
[2020-05-30 21:28:15,954 INFO  L138     BoogieDeclarations]: Found implementation of procedure ValidatorAuction_ValidatorAuction_NoBaseCtor__success
[2020-05-30 21:28:15,954 INFO  L138     BoogieDeclarations]: Found implementation of procedure ValidatorAuction_ValidatorAuction__fail
[2020-05-30 21:28:15,954 INFO  L138     BoogieDeclarations]: Found implementation of procedure ValidatorAuction_ValidatorAuction__success
[2020-05-30 21:28:15,954 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ValidatorAuction__fail
[2020-05-30 21:28:15,954 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ValidatorAuction__success
[2020-05-30 21:28:15,954 INFO  L138     BoogieDeclarations]: Found implementation of procedure bid_ValidatorAuction__fail
[2020-05-30 21:28:15,954 INFO  L138     BoogieDeclarations]: Found implementation of procedure bid_ValidatorAuction__success
[2020-05-30 21:28:15,955 INFO  L138     BoogieDeclarations]: Found implementation of procedure startAuction_ValidatorAuction__fail
[2020-05-30 21:28:15,955 INFO  L138     BoogieDeclarations]: Found implementation of procedure startAuction_ValidatorAuction__success
[2020-05-30 21:28:15,955 INFO  L138     BoogieDeclarations]: Found implementation of procedure depositBids_ValidatorAuction__fail
[2020-05-30 21:28:15,955 INFO  L138     BoogieDeclarations]: Found implementation of procedure depositBids_ValidatorAuction__success
[2020-05-30 21:28:15,955 INFO  L138     BoogieDeclarations]: Found implementation of procedure closeAuction_ValidatorAuction__fail
[2020-05-30 21:28:15,955 INFO  L138     BoogieDeclarations]: Found implementation of procedure closeAuction_ValidatorAuction__success
[2020-05-30 21:28:15,955 INFO  L138     BoogieDeclarations]: Found implementation of procedure addToWhitelist_ValidatorAuction__fail
[2020-05-30 21:28:15,955 INFO  L138     BoogieDeclarations]: Found implementation of procedure addToWhitelist_ValidatorAuction__success
[2020-05-30 21:28:15,955 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_ValidatorAuction__fail
[2020-05-30 21:28:15,955 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_ValidatorAuction__success
[2020-05-30 21:28:15,955 INFO  L138     BoogieDeclarations]: Found implementation of procedure currentPrice_ValidatorAuction__fail
[2020-05-30 21:28:15,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure currentPrice_ValidatorAuction__success
[2020-05-30 21:28:15,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure priceAtElapsedTime_ValidatorAuction__fail
[2020-05-30 21:28:15,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure priceAtElapsedTime_ValidatorAuction__success
[2020-05-30 21:28:15,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawAfterAuctionEnded_ValidatorAuction__fail
[2020-05-30 21:28:15,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawAfterAuctionEnded_ValidatorAuction__success
[2020-05-30 21:28:15,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawAfterAuctionFailed_ValidatorAuction__fail
[2020-05-30 21:28:15,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawAfterAuctionFailed_ValidatorAuction__success
[2020-05-30 21:28:15,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure transitionToDepositPending_ValidatorAuction__fail
[2020-05-30 21:28:15,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure transitionToDepositPending_ValidatorAuction__success
[2020-05-30 21:28:15,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure transitionToAuctionFailed_ValidatorAuction__fail
[2020-05-30 21:28:15,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure transitionToAuctionFailed_ValidatorAuction__success
[2020-05-30 21:28:15,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure isSenderContract_ValidatorAuction__fail
[2020-05-30 21:28:15,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure isSenderContract_ValidatorAuction__success
[2020-05-30 21:28:15,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-05-30 21:28:15,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-05-30 21:28:15,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-05-30 21:28:15,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-05-30 21:28:15,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-05-30 21:28:15,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-05-30 21:28:15,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-05-30 21:28:15,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-05-30 21:28:15,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure isInitialised_pre__fail
[2020-05-30 21:28:15,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure isInitialised_pre__success
[2020-05-30 21:28:15,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure isDeposited_pre__fail
[2020-05-30 21:28:15,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure isDeposited_pre__success
[2020-05-30 21:28:15,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure isNotDeposited_pre__fail
[2020-05-30 21:28:15,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure isNotDeposited_pre__success
[2020-05-30 21:28:15,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyDepositorsProxy_pre__fail
[2020-05-30 21:28:15,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyDepositorsProxy_pre__success
[2020-05-30 21:28:15,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure stateIs_pre__fail
[2020-05-30 21:28:15,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure stateIs_pre__success
[2020-05-30 21:28:15,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-05-30 21:28:15,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-05-30 21:28:15,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DepositLockerInterface
[2020-05-30 21:28:15,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_DepositLockerInterface
[2020-05-30 21:28:15,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DepositLocker
[2020-05-30 21:28:15,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_DepositLocker
[2020-05-30 21:28:15,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ValidatorAuction
[2020-05-30 21:28:15,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-05-30 21:28:15,958 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-05-30 21:28:15,959 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-05-30 21:28:16,083 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 21:28:16,362 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 21:28:16,488 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 21:28:16,503 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 21:28:16,504 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 21:28:16,543 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-05-30 21:28:16,543 INFO  L286             CfgBuilder]: Removed 4 assue(true) statements.
[2020-05-30 21:28:16,545 INFO  L202        PluginConnector]: Adding new model L3-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 09:28:16 BoogieIcfgContainer
[2020-05-30 21:28:16,545 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 09:28:15" (2/2) ...
[2020-05-30 21:28:16,545 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-05-30 21:28:16,545 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@7db2e298 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 09:28:16, skipping insertion in model container
[2020-05-30 21:28:16,545 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-05-30 21:28:16,546 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-05-30 21:28:16,546 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-05-30 21:28:16,547 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-05-30 21:28:16,547 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "L3-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:28:15" (1/3) ...
[2020-05-30 21:28:16,548 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@4dc9e76d and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 09:28:16, skipping insertion in model container
[2020-05-30 21:28:16,548 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 09:28:15" (2/3) ...
No working directory specified, using /Users/jon/Documents/Research/devUltimate/ltl2ba
Starting monitored process 1 with /Users/jon/Documents/Research/devUltimate/ltl2ba -f  ( ( <>a ) && ( <>b ) ) && ! ( ( [] ( c -> ( <>d ) ) ) )  (exit command is null, workingDir is null)
[2020-05-30 21:28:16,594 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 09:28:16 NWAContainer
[2020-05-30 21:28:16,594 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-05-30 21:28:16,594 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-05-30 21:28:16,594 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-05-30 21:28:16,595 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-05-30 21:28:16,596 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "L3-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 09:28:16" (3/4) ...
[2020-05-30 21:28:16,597 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@15ec565c and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 09:28:16, skipping insertion in model container
[2020-05-30 21:28:16,597 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 09:28:16" (4/4) ...
[2020-05-30 21:28:16,600 INFO  L104   BuchiProductObserver]: Initial property automaton 8 locations, 27 edges
[2020-05-30 21:28:16,604 INFO  L110   BuchiProductObserver]: Initial RCFG 2394 locations, 2916 edges
[2020-05-30 21:28:16,604 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-05-30 21:28:16,617 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-05-30 21:28:24,955 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-05-30 21:28:24,981 INFO  L110   BuchiProductObserver]: BuchiProgram size 21823 locations, 83581 edges
[2020-05-30 21:28:24,981 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 09:28:24 BoogieIcfgContainer
[2020-05-30 21:28:24,981 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-05-30 21:28:24,982 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-05-30 21:28:24,982 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-05-30 21:28:24,983 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-05-30 21:28:24,983 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 09:28:24" (1/1) ...
[2020-05-30 21:28:25,367 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:28:25,368 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLocker_DepositLocker__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:28:25,368 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLocker_DepositLocker__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:28:25,368 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLocker_DepositLocker__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:28:25,368 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLocker_DepositLocker__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:28:25,368 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLocker_DepositLocker__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:28:25,368 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLocker_DepositLocker__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:28:25,368 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:28:25,368 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:28:25,369 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:28:25,369 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:28:25,369 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:28:25,370 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLocker_DepositLocker__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:28:25,370 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLocker_DepositLocker__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:28:25,370 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLocker_DepositLocker__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:28:25,370 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLocker_DepositLocker__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:28:25,371 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLocker_DepositLocker__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:28:25,371 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLocker_DepositLocker__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:28:25,375 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:28:25,375 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:28:25,375 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:28:25,375 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:28:25,375 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:28:25,375 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:28:25,376 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:28:25,376 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:28:25,376 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:28:25,376 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:28:25,376 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:28:25,376 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:28:25,377 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:28:25,377 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:28:25,377 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:28:25,377 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:28:25,377 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:28:25,377 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:28:25,378 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:28:25,378 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:28:25,379 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:28:25,379 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:28:25,379 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:28:25,379 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:28:25,380 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:28:25,380 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:28:25,380 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:28:25,380 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:28:25,380 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:28:25,380 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:28:25,408 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:28:25,408 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:28:25,408 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:28:25,408 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:28:25,408 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:28:25,408 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:28:25,409 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:28:25,409 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:28:25,409 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:28:25,409 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:28:25,409 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:28:25,409 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:28:25,445 INFO  L313           BlockEncoder]: Initial Icfg 21823 locations, 83581 edges
[2020-05-30 21:28:25,445 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-05-30 21:28:25,446 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-05-30 21:28:25,446 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-05-30 21:28:25,446 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-05-30 21:28:25,490 INFO  L70    emoveInfeasibleEdges]: Removed 629 edges and 44 locations because of local infeasibility
[2020-05-30 21:28:25,519 INFO  L70        RemoveSinkStates]: Removed 18 edges and 4 locations by removing sink states
[2020-05-30 21:28:25,585 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-05-30 21:28:25,606 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-05-30 21:28:25,629 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-05-30 21:28:25,630 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-05-30 21:28:25,651 INFO  L313           BlockEncoder]: Encoded RCFG 21655 locations, 82548 edges
[2020-05-30 21:28:25,651 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 30.05 09:28:25 BasicIcfg
[2020-05-30 21:28:25,652 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-05-30 21:28:25,652 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-05-30 21:28:25,652 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-05-30 21:28:25,654 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-05-30 21:28:25,654 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 21:28:25,654 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L3-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:28:15" (1/6) ...
[2020-05-30 21:28:25,656 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@24b0acb0 and model type L3-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 30.05 09:28:25, skipping insertion in model container
[2020-05-30 21:28:25,656 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 21:28:25,656 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 09:28:15" (2/6) ...
[2020-05-30 21:28:25,656 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@24b0acb0 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 30.05 09:28:25, skipping insertion in model container
[2020-05-30 21:28:25,656 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 21:28:25,656 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L3-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 09:28:16" (3/6) ...
[2020-05-30 21:28:25,657 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@24b0acb0 and model type L3-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 30.05 09:28:25, skipping insertion in model container
[2020-05-30 21:28:25,657 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 21:28:25,657 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 09:28:16" (4/6) ...
[2020-05-30 21:28:25,657 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@24b0acb0 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 30.05 09:28:25, skipping insertion in model container
[2020-05-30 21:28:25,657 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 21:28:25,657 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 09:28:24" (5/6) ...
[2020-05-30 21:28:25,657 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@24b0acb0 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 30.05 09:28:25, skipping insertion in model container
[2020-05-30 21:28:25,657 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 21:28:25,657 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 30.05 09:28:25" (6/6) ...
[2020-05-30 21:28:25,658 INFO  L404   chiAutomizerObserver]: Analyzing ICFG L3-ValidatorAuction.bpl_BEv2
[2020-05-30 21:28:25,690 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-05-30 21:28:25,691 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-05-30 21:28:25,691 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-05-30 21:28:25,691 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-05-30 21:28:25,691 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-05-30 21:28:25,691 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-05-30 21:28:25,691 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-05-30 21:28:25,691 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-05-30 21:28:25,691 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-05-30 21:28:26,030 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21655 states.
[2020-05-30 21:28:26,234 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:28:26,234 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:28:26,235 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:28:26,243 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:28:26,243 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:28:26,243 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-05-30 21:28:26,243 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21655 states.
[2020-05-30 21:28:26,344 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:28:26,344 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:28:26,344 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:28:26,347 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:28:26,347 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_withdraw_ValidatorAuction0 := false;
[L7]                 success_bid_ValidatorAuction0 := false;
[L7]                 fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                 success_send__success0 := false;
[L7]                 success_closeAuction_ValidatorAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc user;
[L5032]              assume null == 0;
[L5033]  CALL        call this := FreshRefGenerator__success();
[L1807]              havoc newRef;
[L1808]              assume Alloc[newRef] == false;
[L1809]              Alloc[newRef] := true;
[L1810]              assume newRef != null;
[L5033]  RET         call this := FreshRefGenerator__success();
[L5034]              assume now >= 0;
[L5035]              assume DType[this] == ValidatorAuction;
[L5036]              gas := gas - 53000;
[L5037]  CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]               havoc __exception;
[L753]               revert := false;
[L754]   COND FALSE  !(__exception)
[L796]   CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]              assume msgsender_MSG != null;
[L1828]              Balance[this] := 0;
[L1829]              owner_Ownable[this] := null;
[L1830]              owner_Ownable[this] := msgsender_MSG;
[L1848]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  COND FALSE  !(revert)
[L2878]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND TRUE   revert
[L796]   RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]               assume !revert && gas >= 0;
[L5037]  RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]              assume !revert && gas >= 0;

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND TRUE   choice == 9
[L4937]              gas := gas - 21000;
[L4938]  COND FALSE  !(gas >= 0)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:28:26,361 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:28:26,361 INFO  L82        PathProgramCache]: Analyzing trace with hash -1601799078, now seen corresponding path program 1 times
[2020-05-30 21:28:26,365 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:28:26,389 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:28:26,436 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-30 21:28:26,438 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:28:26,439 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-30 21:28:26,442 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:28:26,453 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 21:28:26,454 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 21:28:26,455 INFO  L87              Difference]: Start difference. First operand 21655 states. Second operand 3 states.
[2020-05-30 21:28:27,821 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:28:27,821 INFO  L93              Difference]: Finished difference Result 15055 states and 36051 transitions.
[2020-05-30 21:28:27,821 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 21:28:27,822 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 15055 states and 36051 transitions.
[2020-05-30 21:28:27,934 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:28:28,078 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 15055 states to 15055 states and 36051 transitions.
[2020-05-30 21:28:28,079 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 8
[2020-05-30 21:28:28,083 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 466
[2020-05-30 21:28:28,084 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 15055 states and 36051 transitions.
[2020-05-30 21:28:28,128 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:28:28,128 INFO  L728         BuchiCegarLoop]: Abstraction has 15055 states and 36051 transitions.
[2020-05-30 21:28:28,163 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 15055 states and 36051 transitions.
[2020-05-30 21:28:28,408 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 15055 to 15055.
[2020-05-30 21:28:28,409 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 15055 states.
[2020-05-30 21:28:28,444 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 15055 states to 15055 states and 36051 transitions.
[2020-05-30 21:28:28,445 INFO  L751         BuchiCegarLoop]: Abstraction has 15055 states and 36051 transitions.
[2020-05-30 21:28:28,445 INFO  L631         BuchiCegarLoop]: Abstraction has 15055 states and 36051 transitions.
[2020-05-30 21:28:28,445 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-05-30 21:28:28,445 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 15055 states and 36051 transitions.
[2020-05-30 21:28:28,474 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:28:28,474 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:28:28,474 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:28:28,476 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:28:28,476 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_withdraw_ValidatorAuction0 := false;
[L7]                 success_bid_ValidatorAuction0 := false;
[L7]                 fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                 success_send__success0 := false;
[L7]                 success_closeAuction_ValidatorAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc user;
[L5032]              assume null == 0;
[L5033]  CALL        call this := FreshRefGenerator__success();
[L1807]              havoc newRef;
[L1808]              assume Alloc[newRef] == false;
[L1809]              Alloc[newRef] := true;
[L1810]              assume newRef != null;
[L5033]  RET         call this := FreshRefGenerator__success();
[L5034]              assume now >= 0;
[L5035]              assume DType[this] == ValidatorAuction;
[L5036]              gas := gas - 53000;
[L5037]  CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]               havoc __exception;
[L753]               revert := false;
[L754]   COND FALSE  !(__exception)
[L796]   CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]              assume msgsender_MSG != null;
[L1828]              Balance[this] := 0;
[L1829]              owner_Ownable[this] := null;
[L1830]              owner_Ownable[this] := msgsender_MSG;
[L1848]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  COND FALSE  !(revert)
[L2878]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND TRUE   revert
[L796]   RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]               assume !revert && gas >= 0;
[L5037]  RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]              assume !revert && gas >= 0;
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND FALSE  !(choice == 9)
[L4944]  COND FALSE  !(choice == 8)
[L4953]  COND FALSE  !(choice == 7)
[L4962]  COND FALSE  !(choice == 6)
[L4971]  COND FALSE  !(choice == 5)
[L4980]  COND TRUE   choice == 4
[L4982]              gas := gas - 21000;
[L4983]  COND TRUE   gas >= 0
[L4985]              assume msgvalue_MSG == 0;
[L4986]  CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]               havoc __exception;
[L998]               revert := false;
[L999]   COND FALSE  !(__exception)
[L1041]  CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]  CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]              gas := gas - 10516;
[L4651]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]  RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]  COND TRUE   revert
[L1041]  RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_closeAuction_ValidatorAuction0 := true;
[L7]                 success_closeAuction_ValidatorAuction0 := false;
[L7]                 revert := revert_hold;
[L4986]  RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND FALSE  !(choice == 9)
[L4944]  COND FALSE  !(choice == 8)
[L4953]  COND FALSE  !(choice == 7)
[L4962]  COND FALSE  !(choice == 6)
[L4971]  COND FALSE  !(choice == 5)
[L4980]  COND TRUE   choice == 4
[L4982]              gas := gas - 21000;
[L4983]  COND TRUE   gas >= 0
[L4985]              assume msgvalue_MSG == 0;
[L4986]  CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]               havoc __exception;
[L998]               revert := false;
[L999]   COND FALSE  !(__exception)
[L1041]  CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]  CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]              gas := gas - 10516;
[L4651]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]  RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]  COND TRUE   revert
[L1041]  RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_closeAuction_ValidatorAuction0 := true;
[L7]                 success_closeAuction_ValidatorAuction0 := false;
[L7]                 revert := revert_hold;
[L4986]  RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:28:28,480 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:28:28,480 INFO  L82        PathProgramCache]: Analyzing trace with hash -905383096, now seen corresponding path program 1 times
[2020-05-30 21:28:28,481 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:28:28,490 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:28:28,506 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-30 21:28:28,506 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:28:28,506 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-30 21:28:28,507 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:28:28,507 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 21:28:28,507 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 21:28:28,508 INFO  L87              Difference]: Start difference. First operand 15055 states and 36051 transitions. cyclomatic complexity: 21020 Second operand 3 states.
[2020-05-30 21:28:29,269 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:28:29,269 INFO  L93              Difference]: Finished difference Result 14567 states and 23867 transitions.
[2020-05-30 21:28:29,269 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 21:28:29,270 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 14567 states and 23867 transitions.
[2020-05-30 21:28:29,319 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:28:29,384 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 14567 states to 14567 states and 23867 transitions.
[2020-05-30 21:28:29,384 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 466
[2020-05-30 21:28:29,385 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 466
[2020-05-30 21:28:29,385 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 14567 states and 23867 transitions.
[2020-05-30 21:28:29,401 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:28:29,401 INFO  L728         BuchiCegarLoop]: Abstraction has 14567 states and 23867 transitions.
[2020-05-30 21:28:29,419 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 14567 states and 23867 transitions.
[2020-05-30 21:28:30,540 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 14567 to 14567.
[2020-05-30 21:28:30,540 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 14567 states.
[2020-05-30 21:28:30,564 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 14567 states to 14567 states and 23867 transitions.
[2020-05-30 21:28:30,564 INFO  L751         BuchiCegarLoop]: Abstraction has 14567 states and 23867 transitions.
[2020-05-30 21:28:30,564 INFO  L631         BuchiCegarLoop]: Abstraction has 14567 states and 23867 transitions.
[2020-05-30 21:28:30,564 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-05-30 21:28:30,564 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 14567 states and 23867 transitions.
[2020-05-30 21:28:30,583 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:28:30,583 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:28:30,584 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:28:30,585 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:28:30,585 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_withdraw_ValidatorAuction0 := false;
[L7]                 success_bid_ValidatorAuction0 := false;
[L7]                 fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                 success_send__success0 := false;
[L7]                 success_closeAuction_ValidatorAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc user;
[L5032]              assume null == 0;
[L5033]  CALL        call this := FreshRefGenerator__success();
[L1807]              havoc newRef;
[L1808]              assume Alloc[newRef] == false;
[L1809]              Alloc[newRef] := true;
[L1810]              assume newRef != null;
[L5033]  RET         call this := FreshRefGenerator__success();
[L5034]              assume now >= 0;
[L5035]              assume DType[this] == ValidatorAuction;
[L5036]              gas := gas - 53000;
[L5037]  CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]               havoc __exception;
[L753]               revert := false;
[L754]   COND FALSE  !(__exception)
[L796]   CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]              assume msgsender_MSG != null;
[L1828]              Balance[this] := 0;
[L1829]              owner_Ownable[this] := null;
[L1830]              owner_Ownable[this] := msgsender_MSG;
[L1848]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  COND FALSE  !(revert)
[L2878]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND TRUE   revert
[L796]   RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]               assume !revert && gas >= 0;
[L5037]  RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]              assume !revert && gas >= 0;
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND FALSE  !(choice == 9)
[L4944]  COND FALSE  !(choice == 8)
[L4953]  COND FALSE  !(choice == 7)
[L4962]  COND FALSE  !(choice == 6)
[L4971]  COND FALSE  !(choice == 5)
[L4980]  COND TRUE   choice == 4
[L4982]              gas := gas - 21000;
[L4983]  COND TRUE   gas >= 0
[L4985]              assume msgvalue_MSG == 0;
[L4986]  CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]               havoc __exception;
[L998]               revert := false;
[L999]   COND FALSE  !(__exception)
[L1041]  CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]  CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]              gas := gas - 10516;
[L4651]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]  RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]  COND TRUE   revert
[L1041]  RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_closeAuction_ValidatorAuction0 := true;
[L7]                 success_closeAuction_ValidatorAuction0 := false;
[L7]                 revert := revert_hold;
[L4986]  RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]  RET         call CorralChoice_ValidatorAuction(this);
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND FALSE  !(choice == 9)
[L4944]  COND FALSE  !(choice == 8)
[L4953]  COND TRUE   choice == 7
[L4955]              gas := gas - 21000;
[L4956]  COND TRUE   gas >= 0
[L4958]              assume msgvalue_MSG >= 0;
[L4959]  CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]               havoc __exception;
[L818]               revert := false;
[L819]   COND FALSE  !(__exception)
[L861]   CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]              Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]  CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]              gas := gas - 10516;
[L4651]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]  RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]  COND TRUE   revert
[L861]   RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume user == msgsender_MSG;
[L7]                 success_bid_ValidatorAuction0 := true;
[L7]                 success_bid_ValidatorAuction0 := false;
[L7]                 revert := revert_hold;
[L7]                 assume !(user == msgsender_MSG);
[L4959]  RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND FALSE  !(choice == 9)
[L4944]  COND FALSE  !(choice == 8)
[L4953]  COND TRUE   choice == 7
[L4955]              gas := gas - 21000;
[L4956]  COND TRUE   gas >= 0
[L4958]              assume msgvalue_MSG >= 0;
[L4959]  CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]               havoc __exception;
[L818]               revert := false;
[L819]   COND FALSE  !(__exception)
[L861]   CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]              Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]  CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]              gas := gas - 10516;
[L4651]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]  RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]  COND TRUE   revert
[L861]   RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume user == msgsender_MSG;
[L7]                 success_bid_ValidatorAuction0 := true;
[L7]                 success_bid_ValidatorAuction0 := false;
[L7]                 revert := revert_hold;
[L7]                 assume !(user == msgsender_MSG);
[L4959]  RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:28:30,607 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:28:30,608 INFO  L82        PathProgramCache]: Analyzing trace with hash 969317732, now seen corresponding path program 1 times
[2020-05-30 21:28:30,608 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:28:30,617 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:28:30,640 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-30 21:28:30,641 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:28:30,641 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-30 21:28:30,641 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:28:30,641 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 21:28:30,641 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-30 21:28:30,641 INFO  L87              Difference]: Start difference. First operand 14567 states and 23867 transitions. cyclomatic complexity: 9324 Second operand 4 states.
[2020-05-30 21:28:32,196 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:28:32,196 INFO  L93              Difference]: Finished difference Result 14323 states and 16234 transitions.
[2020-05-30 21:28:32,196 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-30 21:28:32,196 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 14323 states and 16234 transitions.
[2020-05-30 21:28:32,225 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:28:32,262 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 14323 states to 14323 states and 16234 transitions.
[2020-05-30 21:28:32,262 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 466
[2020-05-30 21:28:32,262 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 466
[2020-05-30 21:28:32,262 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 14323 states and 16234 transitions.
[2020-05-30 21:28:32,271 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:28:32,271 INFO  L728         BuchiCegarLoop]: Abstraction has 14323 states and 16234 transitions.
[2020-05-30 21:28:32,284 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 14323 states and 16234 transitions.
[2020-05-30 21:28:32,361 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 14323 to 14323.
[2020-05-30 21:28:32,361 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 14323 states.
[2020-05-30 21:28:32,374 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 14323 states to 14323 states and 16234 transitions.
[2020-05-30 21:28:32,374 INFO  L751         BuchiCegarLoop]: Abstraction has 14323 states and 16234 transitions.
[2020-05-30 21:28:32,374 INFO  L631         BuchiCegarLoop]: Abstraction has 14323 states and 16234 transitions.
[2020-05-30 21:28:32,374 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-05-30 21:28:32,374 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 14323 states and 16234 transitions.
[2020-05-30 21:28:32,387 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:28:32,387 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:28:32,387 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:28:32,389 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:28:32,389 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND TRUE   revert
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND TRUE   revert
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND TRUE   !(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4)
[L3604]                    revert := true;
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND TRUE   revert
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND TRUE   revert
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND FALSE  !(choice == 9)
[L4944]  COND FALSE  !(choice == 8)
[L4953]  COND TRUE   choice == 7
[L4955]              gas := gas - 21000;
[L4956]  COND TRUE   gas >= 0
[L4958]              assume msgvalue_MSG >= 0;
[L4959]  CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]               havoc __exception;
[L818]               revert := false;
[L819]   COND FALSE  !(__exception)
[L861]   CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]              Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]  CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]              gas := gas - 10516;
[L4651]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]  RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]  COND TRUE   revert
[L861]   RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume user == msgsender_MSG;
[L7]                 success_bid_ValidatorAuction0 := true;
[L7]                 success_bid_ValidatorAuction0 := false;
[L7]                 revert := revert_hold;
[L7]                 assume !(user == msgsender_MSG);
[L4959]  RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:28:32,391 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:28:32,392 INFO  L82        PathProgramCache]: Analyzing trace with hash 554893706, now seen corresponding path program 1 times
[2020-05-30 21:28:32,392 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:28:32,403 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:28:32,434 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-30 21:28:32,434 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:28:32,435 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-30 21:28:32,435 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:28:32,435 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 21:28:32,435 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 21:28:32,435 INFO  L87              Difference]: Start difference. First operand 14323 states and 16234 transitions. cyclomatic complexity: 1935 Second operand 3 states.
[2020-05-30 21:28:32,648 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:28:32,648 INFO  L93              Difference]: Finished difference Result 17831 states and 20300 transitions.
[2020-05-30 21:28:32,648 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 21:28:32,648 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 17831 states and 20300 transitions.
[2020-05-30 21:28:32,684 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:28:32,743 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 17831 states to 16503 states and 18374 transitions.
[2020-05-30 21:28:32,743 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 589
[2020-05-30 21:28:32,744 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 649
[2020-05-30 21:28:32,744 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 16503 states and 18374 transitions.
[2020-05-30 21:28:32,758 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:28:32,758 INFO  L728         BuchiCegarLoop]: Abstraction has 16503 states and 18374 transitions.
[2020-05-30 21:28:32,775 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 16503 states and 18374 transitions.
[2020-05-30 21:28:32,906 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 16503 to 15735.
[2020-05-30 21:28:32,907 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 15735 states.
[2020-05-30 21:28:32,924 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 15735 states to 15735 states and 17450 transitions.
[2020-05-30 21:28:32,924 INFO  L751         BuchiCegarLoop]: Abstraction has 15735 states and 17450 transitions.
[2020-05-30 21:28:32,924 INFO  L631         BuchiCegarLoop]: Abstraction has 15735 states and 17450 transitions.
[2020-05-30 21:28:32,924 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-05-30 21:28:32,924 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 15735 states and 17450 transitions.
[2020-05-30 21:28:32,943 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:28:32,943 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:28:32,943 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:28:32,946 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:28:32,946 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND TRUE   __exception
[L756]                     __tmp__Balance := Balance;
[L757]                     __tmp__DType := DType;
[L758]                     __tmp__Alloc := Alloc;
[L759]                     __tmp__balance_ADDR := balance_ADDR;
[L760]                     __tmp__M_Ref_bool_canWithdraw0 := M_Ref_bool_canWithdraw0;
[L761]                     __tmp__sum_canWithdraw0 := sum_canWithdraw0;
[L762]                     __tmp__M_Ref_bool_whitelist1 := M_Ref_bool_whitelist1;
[L763]                     __tmp__sum_whitelist1 := sum_whitelist1;
[L764]                     __tmp__M_Ref_int_bids2 := M_Ref_int_bids2;
[L765]                     __tmp__sum_bids2 := sum_bids2;
[L766]                     __tmp__M_int_Ref := M_int_Ref;
[L767]                     __tmp__sum := sum;
[L768]                     __tmp__Length := Length;
[L769]                     __tmp__now := now;
[L770]                     __tmp__owner_Ownable := owner_Ownable;
[L771]                     __tmp__initialized_DepositLocker := initialized_DepositLocker;
[L772]                     __tmp__deposited_DepositLocker := deposited_DepositLocker;
[L773]                     __tmp__slasher_DepositLocker := slasher_DepositLocker;
[L774]                     __tmp__depositorsProxy_DepositLocker := depositorsProxy_DepositLocker;
[L775]                     __tmp__releaseTimestamp_DepositLocker := releaseTimestamp_DepositLocker;
[L776]                     __tmp__canWithdraw_DepositLocker := canWithdraw_DepositLocker;
[L777]                     __tmp__numberOfDepositors_DepositLocker := numberOfDepositors_DepositLocker;
[L778]                     __tmp__valuePerDepositor_DepositLocker := valuePerDepositor_DepositLocker;
[L779]                     __tmp__auctionDurationInDays_ValidatorAuction := auctionDurationInDays_ValidatorAuction;
[L780]                     __tmp__startPrice_ValidatorAuction := startPrice_ValidatorAuction;
[L781]                     __tmp__minimalNumberOfParticipants_ValidatorAuction := minimalNumberOfParticipants_ValidatorAuction;
[L782]                     __tmp__maximalNumberOfParticipants_ValidatorAuction := maximalNumberOfParticipants_ValidatorAuction;
[L783]                     __tmp__auctionState_ValidatorAuction := auctionState_ValidatorAuction;
[L784]                     __tmp__depositLocker_ValidatorAuction := depositLocker_ValidatorAuction;
[L785]                     __tmp__whitelist_ValidatorAuction := whitelist_ValidatorAuction;
[L786]                     __tmp__bids_ValidatorAuction := bids_ValidatorAuction;
[L787]                     __tmp__bidders_ValidatorAuction := bidders_ValidatorAuction;
[L788]                     __tmp__startTime_ValidatorAuction := startTime_ValidatorAuction;
[L789]                     __tmp__closeTime_ValidatorAuction := closeTime_ValidatorAuction;
[L790]                     __tmp__lowestSlotPrice_ValidatorAuction := lowestSlotPrice_ValidatorAuction;
[L791]         CALL        call ValidatorAuction_ValidatorAuction__fail(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2849]        CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L1837]        CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1817]                    assume msgsender_MSG != null;
[L1818]                    __tmp__Balance[this] := 0;
[L1819]                    __tmp__owner_Ownable[this] := null;
[L1820]                    __tmp__owner_Ownable[this] := msgsender_MSG;
[L1837]        RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1838]        COND FALSE  !(revert)
[L2849]        RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2850]        COND FALSE  !(revert)
[L2855]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2622]                    assume msgsender_MSG != null;
[L2623]                    __tmp__Balance[this] := 0;
[L2624]                    __tmp__auctionDurationInDays_ValidatorAuction[this] := 0;
[L2625]                    __tmp__startPrice_ValidatorAuction[this] := 0;
[L2626]                    __tmp__minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2627]                    __tmp__maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2628]        CALL        call __var_10 := FreshRefGenerator__fail();
[L1797]                    havoc newRef;
[L1798]                    assume __tmp__Alloc[newRef] == false;
[L1799]                    __tmp__Alloc[newRef] := true;
[L1800]                    assume newRef != null;
[L2628]        RET         call __var_10 := FreshRefGenerator__fail();
[L2629]        COND FALSE  !(revert)
[L2634]                    __tmp__whitelist_ValidatorAuction[this] := __var_10;
[L2635]                    __tmp__M_Ref_bool_whitelist1[__tmp__whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2636]        CALL        call __var_11 := FreshRefGenerator__fail();
[L1797]                    havoc newRef;
[L1798]                    assume __tmp__Alloc[newRef] == false;
[L1799]                    __tmp__Alloc[newRef] := true;
[L1800]                    assume newRef != null;
[L2636]        RET         call __var_11 := FreshRefGenerator__fail();
[L2637]        COND FALSE  !(revert)
[L2642]                    __tmp__bids_ValidatorAuction[this] := __var_11;
[L2643]                    __tmp__M_Ref_int_bids2[__tmp__bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2644]                    __tmp__sum_bids2[__tmp__bids_ValidatorAuction[this]] := 0;
[L2645]        CALL        call __var_12 := FreshRefGenerator__fail();
[L1797]                    havoc newRef;
[L1798]                    assume __tmp__Alloc[newRef] == false;
[L1799]                    __tmp__Alloc[newRef] := true;
[L1800]                    assume newRef != null;
[L2645]        RET         call __var_12 := FreshRefGenerator__fail();
[L2646]        COND FALSE  !(revert)
[L2651]                    __tmp__bidders_ValidatorAuction[this] := __var_12;
[L2652]                    assume __tmp__Length[__tmp__bidders_ValidatorAuction[this]] == 0;
[L2653]                    __tmp__startTime_ValidatorAuction[this] := 0;
[L2654]                    __tmp__closeTime_ValidatorAuction[this] := 0;
[L2655]                    __tmp__lowestSlotPrice_ValidatorAuction[this] := 0;
[L2656]                    assume _auctionDurationInDays_s578 >= 0;
[L2657]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2663]                    assume _auctionDurationInDays_s578 >= 0;
[L2664]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2670]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2671]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2677]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2678]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2684]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2685]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2686]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2692]                    assume _startPriceInWei_s578 >= 0;
[L2693]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2699]                    assume __tmp__startPrice_ValidatorAuction[this] >= 0;
[L2700]                    assume _startPriceInWei_s578 >= 0;
[L2701]                    __tmp__startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2702]                    assume __tmp__auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2703]                    assume _auctionDurationInDays_s578 >= 0;
[L2704]                    __tmp__auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2705]                    assume __tmp__maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2706]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2707]                    __tmp__maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2708]                    assume __tmp__minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2709]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2710]                    __tmp__minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2711]                    __tmp__depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2712]                    assume __tmp__lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2713]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2714]                    __tmp__lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2715]                    assume __var_9 >= 0;
[L2716]                    __tmp__auctionState_ValidatorAuction[this] := 0;
[L2855]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2856]        COND FALSE  !(revert)
[L791]         RET         call ValidatorAuction_ValidatorAuction__fail(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L792]                     assume revert || gas < 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND FALSE  !(Balance[from] >= amount)
[L4507]                    success := false;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND FALSE  !(Balance[from] >= amount)
[L4507]                    success := false;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:28:32,954 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:28:32,954 INFO  L82        PathProgramCache]: Analyzing trace with hash 611931863, now seen corresponding path program 1 times
[2020-05-30 21:28:32,955 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:28:32,987 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:28:33,185 INFO  L134       CoverageAnalysis]: Checked inductivity of 26 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 26 trivial. 0 not checked.
[2020-05-30 21:28:33,185 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:28:33,185 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-30 21:28:33,186 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:28:33,186 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 21:28:33,186 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-30 21:28:33,186 INFO  L87              Difference]: Start difference. First operand 15735 states and 17450 transitions. cyclomatic complexity: 1739 Second operand 4 states.
[2020-05-30 21:28:34,024 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:28:34,024 INFO  L93              Difference]: Finished difference Result 18035 states and 20125 transitions.
[2020-05-30 21:28:34,024 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-30 21:28:34,024 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 18035 states and 20125 transitions.
[2020-05-30 21:28:34,061 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-05-30 21:28:34,111 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 18035 states to 17871 states and 19959 transitions.
[2020-05-30 21:28:34,111 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 733
[2020-05-30 21:28:34,111 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 733
[2020-05-30 21:28:34,112 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 17871 states and 19959 transitions.
[2020-05-30 21:28:34,123 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:28:34,123 INFO  L728         BuchiCegarLoop]: Abstraction has 17871 states and 19959 transitions.
[2020-05-30 21:28:34,138 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 17871 states and 19959 transitions.
[2020-05-30 21:28:34,257 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 17871 to 15361.
[2020-05-30 21:28:34,257 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 15361 states.
[2020-05-30 21:28:34,273 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 15361 states to 15361 states and 16818 transitions.
[2020-05-30 21:28:34,273 INFO  L751         BuchiCegarLoop]: Abstraction has 15361 states and 16818 transitions.
[2020-05-30 21:28:34,273 INFO  L631         BuchiCegarLoop]: Abstraction has 15361 states and 16818 transitions.
[2020-05-30 21:28:34,273 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-05-30 21:28:34,273 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 15361 states and 16818 transitions.
[2020-05-30 21:28:34,289 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:28:34,289 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:28:34,289 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:28:34,292 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:28:34,292 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND FALSE  !(Balance[from] >= amount)
[L4507]                    success := false;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND TRUE   choice == 9
[L4937]              gas := gas - 21000;
[L4938]  COND FALSE  !(gas >= 0)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:28:34,297 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:28:34,297 INFO  L82        PathProgramCache]: Analyzing trace with hash 9665376, now seen corresponding path program 1 times
[2020-05-30 21:28:34,298 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:28:34,323 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:28:34,495 INFO  L134       CoverageAnalysis]: Checked inductivity of 44 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 42 trivial. 0 not checked.
[2020-05-30 21:28:34,495 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:28:34,496 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 21:28:34,496 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:28:34,496 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:28:34,496 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=109, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:28:34,497 INFO  L87              Difference]: Start difference. First operand 15361 states and 16818 transitions. cyclomatic complexity: 1481 Second operand 12 states.
[2020-05-30 21:28:41,213 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:28:41,213 INFO  L93              Difference]: Finished difference Result 15971 states and 17596 transitions.
[2020-05-30 21:28:41,213 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-05-30 21:28:41,213 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 15971 states and 17596 transitions.
[2020-05-30 21:28:41,246 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:28:41,287 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 15971 states to 15971 states and 17596 transitions.
[2020-05-30 21:28:41,287 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 631
[2020-05-30 21:28:41,288 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 631
[2020-05-30 21:28:41,288 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 15971 states and 17596 transitions.
[2020-05-30 21:28:41,297 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:28:41,297 INFO  L728         BuchiCegarLoop]: Abstraction has 15971 states and 17596 transitions.
[2020-05-30 21:28:41,312 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 15971 states and 17596 transitions.
[2020-05-30 21:28:41,411 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 15971 to 15614.
[2020-05-30 21:28:41,411 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 15614 states.
[2020-05-30 21:28:41,426 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 15614 states to 15614 states and 17172 transitions.
[2020-05-30 21:28:41,427 INFO  L751         BuchiCegarLoop]: Abstraction has 15614 states and 17172 transitions.
[2020-05-30 21:28:41,427 INFO  L631         BuchiCegarLoop]: Abstraction has 15614 states and 17172 transitions.
[2020-05-30 21:28:41,427 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-05-30 21:28:41,427 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 15614 states and 17172 transitions.
[2020-05-30 21:28:41,442 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:28:41,442 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:28:41,442 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:28:41,445 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:28:41,445 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND FALSE  !(Balance[from] >= amount)
[L4507]                    success := false;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND FALSE  !(Balance[from] >= amount)
[L4507]                    success := false;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:28:41,451 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:28:41,451 INFO  L82        PathProgramCache]: Analyzing trace with hash -1000694232, now seen corresponding path program 1 times
[2020-05-30 21:28:41,451 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:28:41,473 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:28:41,677 INFO  L134       CoverageAnalysis]: Checked inductivity of 87 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 85 trivial. 0 not checked.
[2020-05-30 21:28:41,677 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:28:41,677 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 21:28:41,678 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:28:41,678 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:28:41,678 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=107, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:28:41,678 INFO  L87              Difference]: Start difference. First operand 15614 states and 17172 transitions. cyclomatic complexity: 1586 Second operand 12 states.
[2020-05-30 21:28:49,251 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:28:49,251 INFO  L93              Difference]: Finished difference Result 16104 states and 17723 transitions.
[2020-05-30 21:28:49,251 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-30 21:28:49,252 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 16104 states and 17723 transitions.
[2020-05-30 21:28:49,271 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:28:49,301 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 16104 states to 16104 states and 17723 transitions.
[2020-05-30 21:28:49,301 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 659
[2020-05-30 21:28:49,301 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 659
[2020-05-30 21:28:49,301 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 16104 states and 17723 transitions.
[2020-05-30 21:28:49,308 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:28:49,308 INFO  L728         BuchiCegarLoop]: Abstraction has 16104 states and 17723 transitions.
[2020-05-30 21:28:49,319 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 16104 states and 17723 transitions.
[2020-05-30 21:28:49,403 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 16104 to 15642.
[2020-05-30 21:28:49,403 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 15642 states.
[2020-05-30 21:28:49,419 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 15642 states to 15642 states and 17154 transitions.
[2020-05-30 21:28:49,419 INFO  L751         BuchiCegarLoop]: Abstraction has 15642 states and 17154 transitions.
[2020-05-30 21:28:49,419 INFO  L631         BuchiCegarLoop]: Abstraction has 15642 states and 17154 transitions.
[2020-05-30 21:28:49,419 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-05-30 21:28:49,419 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 15642 states and 17154 transitions.
[2020-05-30 21:28:49,436 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:28:49,436 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:28:49,436 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:28:49,438 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:28:49,438 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND TRUE   DType[to] == ValidatorAuction
[L4256]        CALL        call FallbackMethod_ValidatorAuction__success(to, from, amount);
[L2916]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2917]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2918]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2919]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L2919]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L2920]        COND FALSE  !(revert)
[L2925]                    gas := gas - 15;
[L2926]        CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L2926]        RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L2927]        COND FALSE  !(revert)
[L4256]        RET         call FallbackMethod_ValidatorAuction__success(to, from, amount);
[L4257]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:28:49,445 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:28:49,445 INFO  L82        PathProgramCache]: Analyzing trace with hash -93988399, now seen corresponding path program 1 times
[2020-05-30 21:28:49,445 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:28:49,466 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:28:49,652 INFO  L134       CoverageAnalysis]: Checked inductivity of 84 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 84 trivial. 0 not checked.
[2020-05-30 21:28:49,652 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:28:49,652 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-05-30 21:28:49,653 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:28:49,653 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:28:49,653 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=107, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:28:49,653 INFO  L87              Difference]: Start difference. First operand 15642 states and 17154 transitions. cyclomatic complexity: 1538 Second operand 12 states.
[2020-05-30 21:28:53,740 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:28:53,741 INFO  L93              Difference]: Finished difference Result 16000 states and 17560 transitions.
[2020-05-30 21:28:53,741 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-30 21:28:53,741 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 16000 states and 17560 transitions.
[2020-05-30 21:28:53,769 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:28:53,801 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 16000 states to 16000 states and 17560 transitions.
[2020-05-30 21:28:53,801 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 663
[2020-05-30 21:28:53,802 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 663
[2020-05-30 21:28:53,802 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 16000 states and 17560 transitions.
[2020-05-30 21:28:53,810 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:28:53,810 INFO  L728         BuchiCegarLoop]: Abstraction has 16000 states and 17560 transitions.
[2020-05-30 21:28:53,821 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 16000 states and 17560 transitions.
[2020-05-30 21:28:53,902 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 16000 to 15546.
[2020-05-30 21:28:53,902 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 15546 states.
[2020-05-30 21:28:53,918 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 15546 states to 15546 states and 17017 transitions.
[2020-05-30 21:28:53,918 INFO  L751         BuchiCegarLoop]: Abstraction has 15546 states and 17017 transitions.
[2020-05-30 21:28:53,918 INFO  L631         BuchiCegarLoop]: Abstraction has 15546 states and 17017 transitions.
[2020-05-30 21:28:53,918 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-05-30 21:28:53,918 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 15546 states and 17017 transitions.
[2020-05-30 21:28:53,933 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:28:53,933 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:28:53,933 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:28:53,935 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:28:53,935 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND FALSE  !(Balance[from] >= amount)
[L4507]                    success := false;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND FALSE  !(Balance[from] >= amount)
[L4507]                    success := false;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:28:53,940 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:28:53,940 INFO  L82        PathProgramCache]: Analyzing trace with hash 1376326573, now seen corresponding path program 1 times
[2020-05-30 21:28:53,941 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:28:53,957 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:28:54,106 INFO  L134       CoverageAnalysis]: Checked inductivity of 77 backedges. 1 proven. 30 refuted. 0 times theorem prover too weak. 46 trivial. 0 not checked.
[2020-05-30 21:28:54,106 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:28:54,106 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 21:28:54,107 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:28:54,107 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:28:54,107 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=109, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:28:54,107 INFO  L87              Difference]: Start difference. First operand 15546 states and 17017 transitions. cyclomatic complexity: 1497 Second operand 12 states.
[2020-05-30 21:29:01,257 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:29:01,258 INFO  L93              Difference]: Finished difference Result 15876 states and 17408 transitions.
[2020-05-30 21:29:01,258 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-05-30 21:29:01,258 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 15876 states and 17408 transitions.
[2020-05-30 21:29:01,290 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:29:01,323 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 15876 states to 15876 states and 17408 transitions.
[2020-05-30 21:29:01,323 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 650
[2020-05-30 21:29:01,324 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 650
[2020-05-30 21:29:01,324 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 15876 states and 17408 transitions.
[2020-05-30 21:29:01,331 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:29:01,331 INFO  L728         BuchiCegarLoop]: Abstraction has 15876 states and 17408 transitions.
[2020-05-30 21:29:01,344 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 15876 states and 17408 transitions.
[2020-05-30 21:29:01,420 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 15876 to 15550.
[2020-05-30 21:29:01,421 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 15550 states.
[2020-05-30 21:29:01,437 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 15550 states to 15550 states and 17024 transitions.
[2020-05-30 21:29:01,437 INFO  L751         BuchiCegarLoop]: Abstraction has 15550 states and 17024 transitions.
[2020-05-30 21:29:01,437 INFO  L631         BuchiCegarLoop]: Abstraction has 15550 states and 17024 transitions.
[2020-05-30 21:29:01,437 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-05-30 21:29:01,437 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 15550 states and 17024 transitions.
[2020-05-30 21:29:01,452 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:29:01,452 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:29:01,452 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:29:01,454 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:29:01,454 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND FALSE  !(Balance[from] >= amount)
[L4507]                    success := false;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND FALSE  !(choice == 9)
[L4944]  COND FALSE  !(choice == 8)
[L4953]  COND FALSE  !(choice == 7)
[L4962]  COND FALSE  !(choice == 6)
[L4971]  COND FALSE  !(choice == 5)
[L4980]  COND FALSE  !(choice == 4)
[L4989]  COND FALSE  !(choice == 3)
[L4999]  COND FALSE  !(choice == 2)
[L5008]  COND FALSE  !(choice == 1)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:29:01,459 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:29:01,459 INFO  L82        PathProgramCache]: Analyzing trace with hash 923246835, now seen corresponding path program 1 times
[2020-05-30 21:29:01,459 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:29:01,482 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:29:01,591 INFO  L134       CoverageAnalysis]: Checked inductivity of 77 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 77 trivial. 0 not checked.
[2020-05-30 21:29:01,591 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:29:01,591 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-30 21:29:01,592 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:29:01,592 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 21:29:01,592 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-30 21:29:01,593 INFO  L87              Difference]: Start difference. First operand 15550 states and 17024 transitions. cyclomatic complexity: 1500 Second operand 4 states.
[2020-05-30 21:29:01,704 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:29:01,704 INFO  L93              Difference]: Finished difference Result 15630 states and 17108 transitions.
[2020-05-30 21:29:01,704 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-30 21:29:01,704 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 15630 states and 17108 transitions.
[2020-05-30 21:29:01,730 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:29:01,762 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 15630 states to 15614 states and 17092 transitions.
[2020-05-30 21:29:01,762 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 610
[2020-05-30 21:29:01,762 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 610
[2020-05-30 21:29:01,762 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 15614 states and 17092 transitions.
[2020-05-30 21:29:01,772 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:29:01,772 INFO  L728         BuchiCegarLoop]: Abstraction has 15614 states and 17092 transitions.
[2020-05-30 21:29:01,785 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 15614 states and 17092 transitions.
[2020-05-30 21:29:01,859 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 15614 to 15614.
[2020-05-30 21:29:01,860 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 15614 states.
[2020-05-30 21:29:01,877 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 15614 states to 15614 states and 17092 transitions.
[2020-05-30 21:29:01,877 INFO  L751         BuchiCegarLoop]: Abstraction has 15614 states and 17092 transitions.
[2020-05-30 21:29:01,877 INFO  L631         BuchiCegarLoop]: Abstraction has 15614 states and 17092 transitions.
[2020-05-30 21:29:01,877 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-05-30 21:29:01,877 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 15614 states and 17092 transitions.
[2020-05-30 21:29:01,895 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:29:01,895 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:29:01,895 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:29:01,897 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:29:01,897 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND TRUE   DType[to] == DepositLockerInterface
[L4272]                    assume amount == 0;
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND TRUE   DType[to] == DepositLockerInterface
[L4272]                    assume amount == 0;
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:29:01,903 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:29:01,903 INFO  L82        PathProgramCache]: Analyzing trace with hash -1337133311, now seen corresponding path program 1 times
[2020-05-30 21:29:01,903 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:29:01,967 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:29:02,112 INFO  L134       CoverageAnalysis]: Checked inductivity of 77 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 77 trivial. 0 not checked.
[2020-05-30 21:29:02,113 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:29:02,113 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-05-30 21:29:02,113 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:29:02,114 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-05-30 21:29:02,114 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=12, Invalid=30, Unknown=0, NotChecked=0, Total=42
[2020-05-30 21:29:02,114 INFO  L87              Difference]: Start difference. First operand 15614 states and 17092 transitions. cyclomatic complexity: 1504 Second operand 7 states.
[2020-05-30 21:29:02,292 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:29:02,292 INFO  L93              Difference]: Finished difference Result 15710 states and 17192 transitions.
[2020-05-30 21:29:02,292 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-05-30 21:29:02,292 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 15710 states and 17192 transitions.
[2020-05-30 21:29:02,322 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:29:02,356 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 15710 states to 15710 states and 17192 transitions.
[2020-05-30 21:29:02,356 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 621
[2020-05-30 21:29:02,357 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 621
[2020-05-30 21:29:02,357 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 15710 states and 17192 transitions.
[2020-05-30 21:29:02,365 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:29:02,365 INFO  L728         BuchiCegarLoop]: Abstraction has 15710 states and 17192 transitions.
[2020-05-30 21:29:02,379 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 15710 states and 17192 transitions.
[2020-05-30 21:29:02,456 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 15710 to 15646.
[2020-05-30 21:29:02,457 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 15646 states.
[2020-05-30 21:29:02,472 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 15646 states to 15646 states and 17124 transitions.
[2020-05-30 21:29:02,472 INFO  L751         BuchiCegarLoop]: Abstraction has 15646 states and 17124 transitions.
[2020-05-30 21:29:02,472 INFO  L631         BuchiCegarLoop]: Abstraction has 15646 states and 17124 transitions.
[2020-05-30 21:29:02,472 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-05-30 21:29:02,472 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 15646 states and 17124 transitions.
[2020-05-30 21:29:02,487 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:29:02,487 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:29:02,487 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:29:02,489 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:29:02,489 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND TRUE   DType[to] == DepositLocker
[L4264]        CALL        call FallbackMethod_DepositLocker__success(to, from, amount);
[L4264]        RET         call FallbackMethod_DepositLocker__success(to, from, amount);
[L4265]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND TRUE   choice == 9
[L4937]              gas := gas - 21000;
[L4938]  COND FALSE  !(gas >= 0)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:29:02,493 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:29:02,493 INFO  L82        PathProgramCache]: Analyzing trace with hash 1332205540, now seen corresponding path program 1 times
[2020-05-30 21:29:02,494 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:29:02,516 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:29:02,643 INFO  L134       CoverageAnalysis]: Checked inductivity of 77 backedges. 4 proven. 0 refuted. 0 times theorem prover too weak. 73 trivial. 0 not checked.
[2020-05-30 21:29:02,644 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:29:02,644 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-05-30 21:29:02,644 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:29:02,645 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-30 21:29:02,645 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-30 21:29:02,645 INFO  L87              Difference]: Start difference. First operand 15646 states and 17124 transitions. cyclomatic complexity: 1504 Second operand 8 states.
[2020-05-30 21:29:03,093 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:29:03,093 INFO  L93              Difference]: Finished difference Result 15894 states and 17388 transitions.
[2020-05-30 21:29:03,094 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-05-30 21:29:03,094 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 15894 states and 17388 transitions.
[2020-05-30 21:29:03,121 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:29:03,152 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 15894 states to 15742 states and 17224 transitions.
[2020-05-30 21:29:03,152 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 625
[2020-05-30 21:29:03,152 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 625
[2020-05-30 21:29:03,152 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 15742 states and 17224 transitions.
[2020-05-30 21:29:03,160 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:29:03,160 INFO  L728         BuchiCegarLoop]: Abstraction has 15742 states and 17224 transitions.
[2020-05-30 21:29:03,172 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 15742 states and 17224 transitions.
[2020-05-30 21:29:03,245 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 15742 to 15646.
[2020-05-30 21:29:03,245 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 15646 states.
[2020-05-30 21:29:03,263 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 15646 states to 15646 states and 17124 transitions.
[2020-05-30 21:29:03,263 INFO  L751         BuchiCegarLoop]: Abstraction has 15646 states and 17124 transitions.
[2020-05-30 21:29:03,263 INFO  L631         BuchiCegarLoop]: Abstraction has 15646 states and 17124 transitions.
[2020-05-30 21:29:03,263 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-05-30 21:29:03,263 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 15646 states and 17124 transitions.
[2020-05-30 21:29:03,280 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:29:03,280 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:29:03,280 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:29:03,282 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:29:03,282 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:29:03,287 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:29:03,288 INFO  L82        PathProgramCache]: Analyzing trace with hash 2051837424, now seen corresponding path program 1 times
[2020-05-30 21:29:03,288 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:29:03,312 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:29:03,444 INFO  L134       CoverageAnalysis]: Checked inductivity of 77 backedges. 29 proven. 0 refuted. 0 times theorem prover too weak. 48 trivial. 0 not checked.
[2020-05-30 21:29:03,445 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:29:03,445 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-05-30 21:29:03,445 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:29:03,445 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:29:03,445 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=107, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:29:03,445 INFO  L87              Difference]: Start difference. First operand 15646 states and 17124 transitions. cyclomatic complexity: 1504 Second operand 12 states.
[2020-05-30 21:29:14,146 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:29:14,147 INFO  L93              Difference]: Finished difference Result 17721 states and 19813 transitions.
[2020-05-30 21:29:14,147 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-30 21:29:14,147 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 17721 states and 19813 transitions.
[2020-05-30 21:29:14,190 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:29:14,237 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 17721 states to 17721 states and 19813 transitions.
[2020-05-30 21:29:14,237 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 720
[2020-05-30 21:29:14,237 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 720
[2020-05-30 21:29:14,237 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 17721 states and 19813 transitions.
[2020-05-30 21:29:14,247 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:29:14,247 INFO  L728         BuchiCegarLoop]: Abstraction has 17721 states and 19813 transitions.
[2020-05-30 21:29:14,261 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 17721 states and 19813 transitions.
[2020-05-30 21:29:14,363 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 17721 to 17521.
[2020-05-30 21:29:14,363 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 17521 states.
[2020-05-30 21:29:14,384 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 17521 states to 17521 states and 19574 transitions.
[2020-05-30 21:29:14,385 INFO  L751         BuchiCegarLoop]: Abstraction has 17521 states and 19574 transitions.
[2020-05-30 21:29:14,385 INFO  L631         BuchiCegarLoop]: Abstraction has 17521 states and 19574 transitions.
[2020-05-30 21:29:14,385 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-05-30 21:29:14,385 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 17521 states and 19574 transitions.
[2020-05-30 21:29:14,403 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:29:14,404 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:29:14,404 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:29:14,405 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:29:14,405 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND FALSE  !(choice == 9)
[L4944]  COND FALSE  !(choice == 8)
[L4953]  COND FALSE  !(choice == 7)
[L4962]  COND FALSE  !(choice == 6)
[L4971]  COND FALSE  !(choice == 5)
[L4980]  COND FALSE  !(choice == 4)
[L4989]  COND FALSE  !(choice == 3)
[L4999]  COND FALSE  !(choice == 2)
[L5008]  COND FALSE  !(choice == 1)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:29:14,410 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:29:14,410 INFO  L82        PathProgramCache]: Analyzing trace with hash -1372107651, now seen corresponding path program 1 times
[2020-05-30 21:29:14,411 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:29:14,434 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:29:14,634 INFO  L134       CoverageAnalysis]: Checked inductivity of 83 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 83 trivial. 0 not checked.
[2020-05-30 21:29:14,634 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:29:14,634 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-05-30 21:29:14,634 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:29:14,634 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:29:14,635 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=129, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:29:14,635 INFO  L87              Difference]: Start difference. First operand 17521 states and 19574 transitions. cyclomatic complexity: 2079 Second operand 13 states.
[2020-05-30 21:29:26,082 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:29:26,082 INFO  L93              Difference]: Finished difference Result 19712 states and 22448 transitions.
[2020-05-30 21:29:26,082 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-05-30 21:29:26,082 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 19712 states and 22448 transitions.
[2020-05-30 21:29:26,131 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-05-30 21:29:26,185 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 19712 states to 19712 states and 22448 transitions.
[2020-05-30 21:29:26,185 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 793
[2020-05-30 21:29:26,186 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 793
[2020-05-30 21:29:26,186 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 19712 states and 22448 transitions.
[2020-05-30 21:29:26,198 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:29:26,198 INFO  L728         BuchiCegarLoop]: Abstraction has 19712 states and 22448 transitions.
[2020-05-30 21:29:26,214 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 19712 states and 22448 transitions.
[2020-05-30 21:29:26,325 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 19712 to 19455.
[2020-05-30 21:29:26,325 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 19455 states.
[2020-05-30 21:29:26,351 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 19455 states to 19455 states and 22137 transitions.
[2020-05-30 21:29:26,351 INFO  L751         BuchiCegarLoop]: Abstraction has 19455 states and 22137 transitions.
[2020-05-30 21:29:26,351 INFO  L631         BuchiCegarLoop]: Abstraction has 19455 states and 22137 transitions.
[2020-05-30 21:29:26,351 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-05-30 21:29:26,352 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 19455 states and 22137 transitions.
[2020-05-30 21:29:26,382 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-05-30 21:29:26,382 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:29:26,382 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:29:26,386 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:29:26,386 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND TRUE   DType[to] == ValidatorAuction
[L4256]        CALL        call FallbackMethod_ValidatorAuction__success(to, from, amount);
[L2916]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2917]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2918]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2919]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L2919]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L2920]        COND FALSE  !(revert)
[L2925]                    gas := gas - 15;
[L2926]        CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L2926]        RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L2927]        COND FALSE  !(revert)
[L4256]        RET         call FallbackMethod_ValidatorAuction__success(to, from, amount);
[L4257]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:29:26,392 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:29:26,392 INFO  L82        PathProgramCache]: Analyzing trace with hash 2130865564, now seen corresponding path program 1 times
[2020-05-30 21:29:26,393 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:29:26,422 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:29:26,702 INFO  L134       CoverageAnalysis]: Checked inductivity of 141 backedges. 3 proven. 0 refuted. 0 times theorem prover too weak. 138 trivial. 0 not checked.
[2020-05-30 21:29:26,702 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:29:26,702 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-05-30 21:29:26,703 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:29:26,703 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-30 21:29:26,703 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-30 21:29:26,703 INFO  L87              Difference]: Start difference. First operand 19455 states and 22137 transitions. cyclomatic complexity: 2708 Second operand 8 states.
[2020-05-30 21:29:27,137 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:29:27,137 INFO  L93              Difference]: Finished difference Result 19671 states and 22280 transitions.
[2020-05-30 21:29:27,137 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-05-30 21:29:27,137 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 19671 states and 22280 transitions.
[2020-05-30 21:29:27,171 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-05-30 21:29:27,216 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 19671 states to 19383 states and 21980 transitions.
[2020-05-30 21:29:27,217 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 755
[2020-05-30 21:29:27,217 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 755
[2020-05-30 21:29:27,217 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 19383 states and 21980 transitions.
[2020-05-30 21:29:27,228 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:29:27,228 INFO  L728         BuchiCegarLoop]: Abstraction has 19383 states and 21980 transitions.
[2020-05-30 21:29:27,242 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 19383 states and 21980 transitions.
[2020-05-30 21:29:27,343 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 19383 to 19237.
[2020-05-30 21:29:27,343 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 19237 states.
[2020-05-30 21:29:27,367 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 19237 states to 19237 states and 21828 transitions.
[2020-05-30 21:29:27,367 INFO  L751         BuchiCegarLoop]: Abstraction has 19237 states and 21828 transitions.
[2020-05-30 21:29:27,367 INFO  L631         BuchiCegarLoop]: Abstraction has 19237 states and 21828 transitions.
[2020-05-30 21:29:27,367 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-05-30 21:29:27,367 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 19237 states and 21828 transitions.
[2020-05-30 21:29:27,386 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-05-30 21:29:27,386 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:29:27,386 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:29:27,388 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:29:27,388 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND TRUE   choice == 9
[L4937]              gas := gas - 21000;
[L4938]  COND FALSE  !(gas >= 0)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:29:27,392 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:29:27,392 INFO  L82        PathProgramCache]: Analyzing trace with hash -155671168, now seen corresponding path program 1 times
[2020-05-30 21:29:27,392 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:29:27,415 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:29:27,608 INFO  L134       CoverageAnalysis]: Checked inductivity of 83 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 83 trivial. 0 not checked.
[2020-05-30 21:29:27,608 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:29:27,608 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-05-30 21:29:27,609 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:29:27,609 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:29:27,609 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=129, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:29:27,609 INFO  L87              Difference]: Start difference. First operand 19237 states and 21828 transitions. cyclomatic complexity: 2617 Second operand 13 states.
[2020-05-30 21:29:35,297 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:29:35,297 INFO  L93              Difference]: Finished difference Result 19403 states and 22162 transitions.
[2020-05-30 21:29:35,297 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-30 21:29:35,298 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 19403 states and 22162 transitions.
[2020-05-30 21:29:35,342 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-05-30 21:29:35,392 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 19403 states to 19403 states and 22162 transitions.
[2020-05-30 21:29:35,392 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 749
[2020-05-30 21:29:35,392 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 749
[2020-05-30 21:29:35,393 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 19403 states and 22162 transitions.
[2020-05-30 21:29:35,404 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:29:35,404 INFO  L728         BuchiCegarLoop]: Abstraction has 19403 states and 22162 transitions.
[2020-05-30 21:29:35,419 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 19403 states and 22162 transitions.
[2020-05-30 21:29:35,523 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 19403 to 18554.
[2020-05-30 21:29:35,523 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 18554 states.
[2020-05-30 21:29:35,549 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 18554 states to 18554 states and 20957 transitions.
[2020-05-30 21:29:35,549 INFO  L751         BuchiCegarLoop]: Abstraction has 18554 states and 20957 transitions.
[2020-05-30 21:29:35,549 INFO  L631         BuchiCegarLoop]: Abstraction has 18554 states and 20957 transitions.
[2020-05-30 21:29:35,549 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-05-30 21:29:35,549 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 18554 states and 20957 transitions.
[2020-05-30 21:29:35,569 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:29:35,569 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:29:35,569 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:29:35,571 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:29:35,571 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND FALSE  !(Balance[from] >= amount)
[L4507]                    success := false;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4);
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND TRUE   choice == 9
[L4937]              gas := gas - 21000;
[L4938]  COND FALSE  !(gas >= 0)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:29:35,576 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:29:35,576 INFO  L82        PathProgramCache]: Analyzing trace with hash 194565052, now seen corresponding path program 1 times
[2020-05-30 21:29:35,577 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:29:35,601 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:29:35,808 INFO  L134       CoverageAnalysis]: Checked inductivity of 156 backedges. 5 proven. 0 refuted. 0 times theorem prover too weak. 151 trivial. 0 not checked.
[2020-05-30 21:29:35,808 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:29:35,809 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-30 21:29:35,809 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:29:35,809 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 21:29:35,809 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-30 21:29:35,809 INFO  L87              Difference]: Start difference. First operand 18554 states and 20957 transitions. cyclomatic complexity: 2432 Second operand 4 states.
[2020-05-30 21:29:35,893 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:29:35,893 INFO  L93              Difference]: Finished difference Result 18634 states and 21033 transitions.
[2020-05-30 21:29:35,893 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-30 21:29:35,893 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 18634 states and 21033 transitions.
[2020-05-30 21:29:35,924 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:29:35,966 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 18634 states to 18210 states and 20573 transitions.
[2020-05-30 21:29:35,966 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 710
[2020-05-30 21:29:35,966 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 710
[2020-05-30 21:29:35,966 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 18210 states and 20573 transitions.
[2020-05-30 21:29:35,977 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:29:35,977 INFO  L728         BuchiCegarLoop]: Abstraction has 18210 states and 20573 transitions.
[2020-05-30 21:29:35,989 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 18210 states and 20573 transitions.
[2020-05-30 21:29:36,081 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 18210 to 18210.
[2020-05-30 21:29:36,081 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 18210 states.
[2020-05-30 21:29:36,105 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 18210 states to 18210 states and 20573 transitions.
[2020-05-30 21:29:36,105 INFO  L751         BuchiCegarLoop]: Abstraction has 18210 states and 20573 transitions.
[2020-05-30 21:29:36,105 INFO  L631         BuchiCegarLoop]: Abstraction has 18210 states and 20573 transitions.
[2020-05-30 21:29:36,105 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-05-30 21:29:36,105 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 18210 states and 20573 transitions.
[2020-05-30 21:29:36,125 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:29:36,126 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:29:36,126 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:29:36,128 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:29:36,128 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND TRUE   DType[to] == DepositLockerInterface
[L4272]                    assume amount == 0;
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4);
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:29:36,135 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:29:36,135 INFO  L82        PathProgramCache]: Analyzing trace with hash -781317223, now seen corresponding path program 1 times
[2020-05-30 21:29:36,135 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:29:36,161 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:29:36,365 INFO  L134       CoverageAnalysis]: Checked inductivity of 301 backedges. 13 proven. 34 refuted. 0 times theorem prover too weak. 254 trivial. 0 not checked.
[2020-05-30 21:29:36,365 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:29:36,365 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-05-30 21:29:36,366 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:29:36,366 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-30 21:29:36,366 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-30 21:29:36,366 INFO  L87              Difference]: Start difference. First operand 18210 states and 20573 transitions. cyclomatic complexity: 2392 Second operand 8 states.
[2020-05-30 21:29:36,743 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:29:36,743 INFO  L93              Difference]: Finished difference Result 18442 states and 20801 transitions.
[2020-05-30 21:29:36,744 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-05-30 21:29:36,744 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 18442 states and 20801 transitions.
[2020-05-30 21:29:36,775 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:29:36,818 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 18442 states to 18202 states and 20557 transitions.
[2020-05-30 21:29:36,818 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 709
[2020-05-30 21:29:36,818 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 709
[2020-05-30 21:29:36,819 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 18202 states and 20557 transitions.
[2020-05-30 21:29:36,829 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:29:36,829 INFO  L728         BuchiCegarLoop]: Abstraction has 18202 states and 20557 transitions.
[2020-05-30 21:29:36,842 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 18202 states and 20557 transitions.
[2020-05-30 21:29:36,935 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 18202 to 18202.
[2020-05-30 21:29:36,935 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 18202 states.
[2020-05-30 21:29:36,959 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 18202 states to 18202 states and 20557 transitions.
[2020-05-30 21:29:36,959 INFO  L751         BuchiCegarLoop]: Abstraction has 18202 states and 20557 transitions.
[2020-05-30 21:29:36,959 INFO  L631         BuchiCegarLoop]: Abstraction has 18202 states and 20557 transitions.
[2020-05-30 21:29:36,959 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-05-30 21:29:36,959 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 18202 states and 20557 transitions.
[2020-05-30 21:29:36,979 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:29:36,979 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:29:36,979 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:29:36,981 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:29:36,981 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND TRUE   DType[to] == Ownable
[L4276]                    assume amount == 0;
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4);
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND TRUE   choice == 9
[L4937]              gas := gas - 21000;
[L4938]  COND FALSE  !(gas >= 0)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:29:36,987 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:29:36,987 INFO  L82        PathProgramCache]: Analyzing trace with hash 1362865018, now seen corresponding path program 1 times
[2020-05-30 21:29:36,988 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:29:37,013 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:29:37,254 INFO  L134       CoverageAnalysis]: Checked inductivity of 302 backedges. 14 proven. 36 refuted. 0 times theorem prover too weak. 252 trivial. 0 not checked.
[2020-05-30 21:29:37,254 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:29:37,254 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-05-30 21:29:37,254 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:29:37,255 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-30 21:29:37,255 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-30 21:29:37,255 INFO  L87              Difference]: Start difference. First operand 18202 states and 20557 transitions. cyclomatic complexity: 2384 Second operand 8 states.
[2020-05-30 21:29:37,630 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:29:37,630 INFO  L93              Difference]: Finished difference Result 18434 states and 20785 transitions.
[2020-05-30 21:29:37,630 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-05-30 21:29:37,630 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 18434 states and 20785 transitions.
[2020-05-30 21:29:37,662 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:29:37,703 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 18434 states to 18194 states and 20541 transitions.
[2020-05-30 21:29:37,704 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 708
[2020-05-30 21:29:37,704 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 708
[2020-05-30 21:29:37,704 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 18194 states and 20541 transitions.
[2020-05-30 21:29:37,714 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:29:37,715 INFO  L728         BuchiCegarLoop]: Abstraction has 18194 states and 20541 transitions.
[2020-05-30 21:29:37,728 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 18194 states and 20541 transitions.
[2020-05-30 21:29:37,821 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 18194 to 18194.
[2020-05-30 21:29:37,821 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 18194 states.
[2020-05-30 21:29:37,845 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 18194 states to 18194 states and 20541 transitions.
[2020-05-30 21:29:37,846 INFO  L751         BuchiCegarLoop]: Abstraction has 18194 states and 20541 transitions.
[2020-05-30 21:29:37,846 INFO  L631         BuchiCegarLoop]: Abstraction has 18194 states and 20541 transitions.
[2020-05-30 21:29:37,846 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-05-30 21:29:37,846 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 18194 states and 20541 transitions.
[2020-05-30 21:29:37,865 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:29:37,866 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:29:37,866 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:29:37,868 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:29:37,868 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND TRUE   DType[to] == DepositLocker
[L4264]        CALL        call FallbackMethod_DepositLocker__success(to, from, amount);
[L4264]        RET         call FallbackMethod_DepositLocker__success(to, from, amount);
[L4265]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4);
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:29:37,874 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:29:37,874 INFO  L82        PathProgramCache]: Analyzing trace with hash 190557609, now seen corresponding path program 1 times
[2020-05-30 21:29:37,875 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:29:37,899 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:29:38,053 INFO  L134       CoverageAnalysis]: Checked inductivity of 156 backedges. 9 proven. 4 refuted. 0 times theorem prover too weak. 143 trivial. 0 not checked.
[2020-05-30 21:29:38,053 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:29:38,053 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-05-30 21:29:38,054 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:29:38,054 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-30 21:29:38,054 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-30 21:29:38,054 INFO  L87              Difference]: Start difference. First operand 18194 states and 20541 transitions. cyclomatic complexity: 2376 Second operand 8 states.
[2020-05-30 21:29:38,760 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:29:38,761 INFO  L93              Difference]: Finished difference Result 18330 states and 20669 transitions.
[2020-05-30 21:29:38,761 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-05-30 21:29:38,761 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 18330 states and 20669 transitions.
[2020-05-30 21:29:38,798 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:29:38,842 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 18330 states to 18050 states and 20385 transitions.
[2020-05-30 21:29:38,842 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 691
[2020-05-30 21:29:38,843 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 691
[2020-05-30 21:29:38,843 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 18050 states and 20385 transitions.
[2020-05-30 21:29:38,854 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:29:38,854 INFO  L728         BuchiCegarLoop]: Abstraction has 18050 states and 20385 transitions.
[2020-05-30 21:29:38,867 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 18050 states and 20385 transitions.
[2020-05-30 21:29:38,960 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 18050 to 18050.
[2020-05-30 21:29:38,960 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 18050 states.
[2020-05-30 21:29:38,984 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 18050 states to 18050 states and 20385 transitions.
[2020-05-30 21:29:38,984 INFO  L751         BuchiCegarLoop]: Abstraction has 18050 states and 20385 transitions.
[2020-05-30 21:29:38,984 INFO  L631         BuchiCegarLoop]: Abstraction has 18050 states and 20385 transitions.
[2020-05-30 21:29:38,984 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-05-30 21:29:38,984 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 18050 states and 20385 transitions.
[2020-05-30 21:29:39,004 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:29:39,004 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:29:39,005 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:29:39,007 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:29:39,007 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4);
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:29:39,012 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:29:39,013 INFO  L82        PathProgramCache]: Analyzing trace with hash -584062429, now seen corresponding path program 1 times
[2020-05-30 21:29:39,013 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:29:39,038 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:29:39,203 INFO  L134       CoverageAnalysis]: Checked inductivity of 156 backedges. 32 proven. 30 refuted. 0 times theorem prover too weak. 94 trivial. 0 not checked.
[2020-05-30 21:29:39,203 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:29:39,204 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 21:29:39,204 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:29:39,204 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:29:39,204 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=107, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:29:39,204 INFO  L87              Difference]: Start difference. First operand 18050 states and 20385 transitions. cyclomatic complexity: 2364 Second operand 12 states.
[2020-05-30 21:29:48,506 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:29:48,506 INFO  L93              Difference]: Finished difference Result 18437 states and 20810 transitions.
[2020-05-30 21:29:48,506 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-30 21:29:48,506 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 18437 states and 20810 transitions.
[2020-05-30 21:29:48,555 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:29:48,608 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 18437 states to 18437 states and 20810 transitions.
[2020-05-30 21:29:48,608 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 738
[2020-05-30 21:29:48,609 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 738
[2020-05-30 21:29:48,609 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 18437 states and 20810 transitions.
[2020-05-30 21:29:48,620 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:29:48,620 INFO  L728         BuchiCegarLoop]: Abstraction has 18437 states and 20810 transitions.
[2020-05-30 21:29:48,634 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 18437 states and 20810 transitions.
[2020-05-30 21:29:48,736 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 18437 to 18058.
[2020-05-30 21:29:48,736 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 18058 states.
[2020-05-30 21:29:48,762 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 18058 states to 18058 states and 20395 transitions.
[2020-05-30 21:29:48,762 INFO  L751         BuchiCegarLoop]: Abstraction has 18058 states and 20395 transitions.
[2020-05-30 21:29:48,762 INFO  L631         BuchiCegarLoop]: Abstraction has 18058 states and 20395 transitions.
[2020-05-30 21:29:48,762 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-05-30 21:29:48,763 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 18058 states and 20395 transitions.
[2020-05-30 21:29:48,783 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:29:48,783 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:29:48,783 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:29:48,785 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:29:48,785 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:29:48,790 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:29:48,790 INFO  L82        PathProgramCache]: Analyzing trace with hash -5281332, now seen corresponding path program 1 times
[2020-05-30 21:29:48,790 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:29:48,805 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:29:48,929 INFO  L134       CoverageAnalysis]: Checked inductivity of 52 backedges. 2 proven. 2 refuted. 0 times theorem prover too weak. 48 trivial. 0 not checked.
[2020-05-30 21:29:48,930 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:29:48,930 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 21:29:48,930 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:29:48,930 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:29:48,930 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=111, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:29:48,930 INFO  L87              Difference]: Start difference. First operand 18058 states and 20395 transitions. cyclomatic complexity: 2366 Second operand 12 states.
[2020-05-30 21:29:56,902 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:29:56,902 INFO  L93              Difference]: Finished difference Result 18489 states and 20848 transitions.
[2020-05-30 21:29:56,902 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-05-30 21:29:56,902 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 18489 states and 20848 transitions.
[2020-05-30 21:29:56,947 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:29:56,998 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 18489 states to 18489 states and 20848 transitions.
[2020-05-30 21:29:56,998 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 737
[2020-05-30 21:29:56,999 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 737
[2020-05-30 21:29:56,999 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 18489 states and 20848 transitions.
[2020-05-30 21:29:57,011 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:29:57,011 INFO  L728         BuchiCegarLoop]: Abstraction has 18489 states and 20848 transitions.
[2020-05-30 21:29:57,026 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 18489 states and 20848 transitions.
[2020-05-30 21:29:57,123 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 18489 to 18045.
[2020-05-30 21:29:57,123 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 18045 states.
[2020-05-30 21:29:57,148 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 18045 states to 18045 states and 20343 transitions.
[2020-05-30 21:29:57,148 INFO  L751         BuchiCegarLoop]: Abstraction has 18045 states and 20343 transitions.
[2020-05-30 21:29:57,148 INFO  L631         BuchiCegarLoop]: Abstraction has 18045 states and 20343 transitions.
[2020-05-30 21:29:57,148 INFO  L445         BuchiCegarLoop]: ======== Iteration 23============
[2020-05-30 21:29:57,148 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 18045 states and 20343 transitions.
[2020-05-30 21:29:57,167 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:29:57,168 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:29:57,168 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:29:57,170 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:29:57,170 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:29:57,175 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:29:57,175 INFO  L82        PathProgramCache]: Analyzing trace with hash 1373356971, now seen corresponding path program 1 times
[2020-05-30 21:29:57,175 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:29:57,194 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:29:57,367 INFO  L134       CoverageAnalysis]: Checked inductivity of 94 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 94 trivial. 0 not checked.
[2020-05-30 21:29:57,367 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:29:57,367 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-05-30 21:29:57,368 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:29:57,368 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-30 21:29:57,368 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-05-30 21:29:57,368 INFO  L87              Difference]: Start difference. First operand 18045 states and 20343 transitions. cyclomatic complexity: 2325 Second operand 10 states.
[2020-05-30 21:30:05,741 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:30:05,741 INFO  L93              Difference]: Finished difference Result 18291 states and 20900 transitions.
[2020-05-30 21:30:05,741 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-05-30 21:30:05,741 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 18291 states and 20900 transitions.
[2020-05-30 21:30:05,789 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:30:05,843 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 18291 states to 18291 states and 20900 transitions.
[2020-05-30 21:30:05,843 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 708
[2020-05-30 21:30:05,843 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 708
[2020-05-30 21:30:05,843 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 18291 states and 20900 transitions.
[2020-05-30 21:30:05,856 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:30:05,856 INFO  L728         BuchiCegarLoop]: Abstraction has 18291 states and 20900 transitions.
[2020-05-30 21:30:05,870 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 18291 states and 20900 transitions.
[2020-05-30 21:30:05,970 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 18291 to 18203.
[2020-05-30 21:30:05,971 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 18203 states.
[2020-05-30 21:30:05,997 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 18203 states to 18203 states and 20800 transitions.
[2020-05-30 21:30:05,998 INFO  L751         BuchiCegarLoop]: Abstraction has 18203 states and 20800 transitions.
[2020-05-30 21:30:05,998 INFO  L631         BuchiCegarLoop]: Abstraction has 18203 states and 20800 transitions.
[2020-05-30 21:30:05,998 INFO  L445         BuchiCegarLoop]: ======== Iteration 24============
[2020-05-30 21:30:05,998 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 18203 states and 20800 transitions.
[2020-05-30 21:30:06,018 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:30:06,018 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:30:06,018 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:30:06,021 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:30:06,021 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG);
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:30:06,027 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:30:06,027 INFO  L82        PathProgramCache]: Analyzing trace with hash -868811158, now seen corresponding path program 1 times
[2020-05-30 21:30:06,028 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:30:06,049 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:30:06,248 INFO  L134       CoverageAnalysis]: Checked inductivity of 191 backedges. 36 proven. 38 refuted. 0 times theorem prover too weak. 117 trivial. 0 not checked.
[2020-05-30 21:30:06,248 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:30:06,248 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-30 21:30:06,249 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:30:06,249 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 21:30:06,249 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=20, Invalid=90, Unknown=0, NotChecked=0, Total=110
[2020-05-30 21:30:06,249 INFO  L87              Difference]: Start difference. First operand 18203 states and 20800 transitions. cyclomatic complexity: 2631 Second operand 11 states.
[2020-05-30 21:30:16,443 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:30:16,444 INFO  L93              Difference]: Finished difference Result 18454 states and 21109 transitions.
[2020-05-30 21:30:16,444 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-30 21:30:16,444 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 18454 states and 21109 transitions.
[2020-05-30 21:30:16,496 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:30:16,554 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 18454 states to 18406 states and 21045 transitions.
[2020-05-30 21:30:16,554 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 723
[2020-05-30 21:30:16,554 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 723
[2020-05-30 21:30:16,555 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 18406 states and 21045 transitions.
[2020-05-30 21:30:16,567 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:30:16,567 INFO  L728         BuchiCegarLoop]: Abstraction has 18406 states and 21045 transitions.
[2020-05-30 21:30:16,582 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 18406 states and 21045 transitions.
[2020-05-30 21:30:16,683 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 18406 to 18023.
[2020-05-30 21:30:16,683 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 18023 states.
[2020-05-30 21:30:16,709 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 18023 states to 18023 states and 20587 transitions.
[2020-05-30 21:30:16,709 INFO  L751         BuchiCegarLoop]: Abstraction has 18023 states and 20587 transitions.
[2020-05-30 21:30:16,710 INFO  L631         BuchiCegarLoop]: Abstraction has 18023 states and 20587 transitions.
[2020-05-30 21:30:16,710 INFO  L445         BuchiCegarLoop]: ======== Iteration 25============
[2020-05-30 21:30:16,710 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 18023 states and 20587 transitions.
[2020-05-30 21:30:16,729 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:30:16,729 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:30:16,729 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:30:16,732 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:30:16,732 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:30:16,738 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:30:16,739 INFO  L82        PathProgramCache]: Analyzing trace with hash -1412570252, now seen corresponding path program 1 times
[2020-05-30 21:30:16,739 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:30:16,761 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:30:17,021 INFO  L134       CoverageAnalysis]: Checked inductivity of 314 backedges. 77 proven. 35 refuted. 0 times theorem prover too weak. 202 trivial. 0 not checked.
[2020-05-30 21:30:17,021 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:30:17,021 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-30 21:30:17,022 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:30:17,022 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 21:30:17,022 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=20, Invalid=90, Unknown=0, NotChecked=0, Total=110
[2020-05-30 21:30:17,022 INFO  L87              Difference]: Start difference. First operand 18023 states and 20587 transitions. cyclomatic complexity: 2598 Second operand 11 states.
[2020-05-30 21:30:27,194 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:30:27,194 INFO  L93              Difference]: Finished difference Result 19677 states and 22902 transitions.
[2020-05-30 21:30:27,194 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-30 21:30:27,194 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 19677 states and 22902 transitions.
[2020-05-30 21:30:27,249 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:30:27,312 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 19677 states to 19653 states and 22870 transitions.
[2020-05-30 21:30:27,312 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 746
[2020-05-30 21:30:27,313 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 746
[2020-05-30 21:30:27,313 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 19653 states and 22870 transitions.
[2020-05-30 21:30:27,328 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:30:27,328 INFO  L728         BuchiCegarLoop]: Abstraction has 19653 states and 22870 transitions.
[2020-05-30 21:30:27,343 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 19653 states and 22870 transitions.
[2020-05-30 21:30:27,462 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 19653 to 19590.
[2020-05-30 21:30:27,463 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 19590 states.
[2020-05-30 21:30:27,497 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 19590 states to 19590 states and 22770 transitions.
[2020-05-30 21:30:27,497 INFO  L751         BuchiCegarLoop]: Abstraction has 19590 states and 22770 transitions.
[2020-05-30 21:30:27,497 INFO  L631         BuchiCegarLoop]: Abstraction has 19590 states and 22770 transitions.
[2020-05-30 21:30:27,497 INFO  L445         BuchiCegarLoop]: ======== Iteration 26============
[2020-05-30 21:30:27,497 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 19590 states and 22770 transitions.
[2020-05-30 21:30:27,520 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:30:27,520 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:30:27,520 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:30:27,523 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:30:27,523 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4);
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:30:27,530 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:30:27,530 INFO  L82        PathProgramCache]: Analyzing trace with hash 1774708511, now seen corresponding path program 1 times
[2020-05-30 21:30:27,531 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:30:27,559 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:30:27,862 INFO  L134       CoverageAnalysis]: Checked inductivity of 345 backedges. 39 proven. 66 refuted. 0 times theorem prover too weak. 240 trivial. 0 not checked.
[2020-05-30 21:30:27,863 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:30:27,863 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 21:30:27,864 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:30:27,864 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:30:27,864 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=109, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:30:27,864 INFO  L87              Difference]: Start difference. First operand 19590 states and 22770 transitions. cyclomatic complexity: 3214 Second operand 12 states.
[2020-05-30 21:30:37,605 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:30:37,605 INFO  L93              Difference]: Finished difference Result 19621 states and 22773 transitions.
[2020-05-30 21:30:37,605 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-30 21:30:37,606 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 19621 states and 22773 transitions.
[2020-05-30 21:30:37,661 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:30:37,724 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 19621 states to 19621 states and 22773 transitions.
[2020-05-30 21:30:37,724 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 740
[2020-05-30 21:30:37,725 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 740
[2020-05-30 21:30:37,725 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 19621 states and 22773 transitions.
[2020-05-30 21:30:37,739 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:30:37,739 INFO  L728         BuchiCegarLoop]: Abstraction has 19621 states and 22773 transitions.
[2020-05-30 21:30:37,754 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 19621 states and 22773 transitions.
[2020-05-30 21:30:37,867 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 19621 to 19590.
[2020-05-30 21:30:37,867 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 19590 states.
[2020-05-30 21:30:37,978 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 19590 states to 19590 states and 22741 transitions.
[2020-05-30 21:30:37,978 INFO  L751         BuchiCegarLoop]: Abstraction has 19590 states and 22741 transitions.
[2020-05-30 21:30:37,978 INFO  L631         BuchiCegarLoop]: Abstraction has 19590 states and 22741 transitions.
[2020-05-30 21:30:37,978 INFO  L445         BuchiCegarLoop]: ======== Iteration 27============
[2020-05-30 21:30:37,978 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 19590 states and 22741 transitions.
[2020-05-30 21:30:38,002 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:30:38,002 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:30:38,002 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:30:38,005 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:30:38,005 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4);
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:30:38,014 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:30:38,014 INFO  L82        PathProgramCache]: Analyzing trace with hash 1480804169, now seen corresponding path program 1 times
[2020-05-30 21:30:38,014 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:30:38,055 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:30:38,370 INFO  L134       CoverageAnalysis]: Checked inductivity of 523 backedges. 139 proven. 30 refuted. 0 times theorem prover too weak. 354 trivial. 0 not checked.
[2020-05-30 21:30:38,370 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:30:38,370 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 21:30:38,371 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:30:38,371 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:30:38,371 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=26, Invalid=106, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:30:38,371 INFO  L87              Difference]: Start difference. First operand 19590 states and 22741 transitions. cyclomatic complexity: 3185 Second operand 12 states.
[2020-05-30 21:30:50,112 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:30:50,112 INFO  L93              Difference]: Finished difference Result 22592 states and 27219 transitions.
[2020-05-30 21:30:50,112 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-30 21:30:50,113 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 22592 states and 27219 transitions.
[2020-05-30 21:30:50,173 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 14
[2020-05-30 21:30:50,248 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 22592 states to 22592 states and 27219 transitions.
[2020-05-30 21:30:50,248 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 792
[2020-05-30 21:30:50,248 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 792
[2020-05-30 21:30:50,248 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 22592 states and 27219 transitions.
[2020-05-30 21:30:50,266 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:30:50,266 INFO  L728         BuchiCegarLoop]: Abstraction has 22592 states and 27219 transitions.
[2020-05-30 21:30:50,280 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 22592 states and 27219 transitions.
[2020-05-30 21:30:50,410 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 22592 to 22580.
[2020-05-30 21:30:50,410 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 22580 states.
[2020-05-30 21:30:50,451 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 22580 states to 22580 states and 27207 transitions.
[2020-05-30 21:30:50,451 INFO  L751         BuchiCegarLoop]: Abstraction has 22580 states and 27207 transitions.
[2020-05-30 21:30:50,451 INFO  L631         BuchiCegarLoop]: Abstraction has 22580 states and 27207 transitions.
[2020-05-30 21:30:50,451 INFO  L445         BuchiCegarLoop]: ======== Iteration 28============
[2020-05-30 21:30:50,452 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 22580 states and 27207 transitions.
[2020-05-30 21:30:50,476 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 14
[2020-05-30 21:30:50,476 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:30:50,476 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:30:50,478 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:30:50,478 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND TRUE   choice == 9
[L4937]              gas := gas - 21000;
[L4938]  COND FALSE  !(gas >= 0)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:30:50,482 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:30:50,482 INFO  L82        PathProgramCache]: Analyzing trace with hash -167842562, now seen corresponding path program 1 times
[2020-05-30 21:30:50,482 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:30:50,504 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:30:50,693 INFO  L134       CoverageAnalysis]: Checked inductivity of 323 backedges. 80 proven. 35 refuted. 0 times theorem prover too weak. 208 trivial. 0 not checked.
[2020-05-30 21:30:50,693 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:30:50,694 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 21:30:50,694 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:30:50,694 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:30:50,694 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=22, Invalid=110, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:30:50,694 INFO  L87              Difference]: Start difference. First operand 22580 states and 27207 transitions. cyclomatic complexity: 4661 Second operand 12 states.
[2020-05-30 21:31:05,342 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:31:05,342 INFO  L93              Difference]: Finished difference Result 24778 states and 30289 transitions.
[2020-05-30 21:31:05,342 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-05-30 21:31:05,342 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 24778 states and 30289 transitions.
[2020-05-30 21:31:05,413 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 18
[2020-05-30 21:31:05,505 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 24778 states to 24754 states and 30257 transitions.
[2020-05-30 21:31:05,506 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 843
[2020-05-30 21:31:05,506 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 843
[2020-05-30 21:31:05,506 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 24754 states and 30257 transitions.
[2020-05-30 21:31:05,527 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:31:05,528 INFO  L728         BuchiCegarLoop]: Abstraction has 24754 states and 30257 transitions.
[2020-05-30 21:31:05,544 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 24754 states and 30257 transitions.
[2020-05-30 21:31:05,696 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 24754 to 24691.
[2020-05-30 21:31:05,696 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 24691 states.
[2020-05-30 21:31:05,746 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 24691 states to 24691 states and 30153 transitions.
[2020-05-30 21:31:05,746 INFO  L751         BuchiCegarLoop]: Abstraction has 24691 states and 30153 transitions.
[2020-05-30 21:31:05,746 INFO  L631         BuchiCegarLoop]: Abstraction has 24691 states and 30153 transitions.
[2020-05-30 21:31:05,746 INFO  L445         BuchiCegarLoop]: ======== Iteration 29============
[2020-05-30 21:31:05,746 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 24691 states and 30153 transitions.
[2020-05-30 21:31:05,775 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 18
[2020-05-30 21:31:05,775 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:31:05,775 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:31:05,778 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [7, 7, 7, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:31:05,778 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:31:05,783 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:31:05,783 INFO  L82        PathProgramCache]: Analyzing trace with hash -1450190916, now seen corresponding path program 1 times
[2020-05-30 21:31:05,783 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:31:05,807 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:31:06,000 INFO  L134       CoverageAnalysis]: Checked inductivity of 360 backedges. 80 proven. 44 refuted. 0 times theorem prover too weak. 236 trivial. 0 not checked.
[2020-05-30 21:31:06,000 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:31:06,000 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 21:31:06,001 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:31:06,001 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:31:06,001 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=22, Invalid=110, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:31:06,002 INFO  L87              Difference]: Start difference. First operand 24691 states and 30153 transitions. cyclomatic complexity: 5496 Second operand 12 states.
[2020-05-30 21:31:20,410 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:31:20,410 INFO  L93              Difference]: Finished difference Result 24295 states and 29525 transitions.
[2020-05-30 21:31:20,410 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-05-30 21:31:20,410 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 24295 states and 29525 transitions.
[2020-05-30 21:31:20,478 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 18
[2020-05-30 21:31:20,564 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 24295 states to 24271 states and 29493 transitions.
[2020-05-30 21:31:20,565 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 810
[2020-05-30 21:31:20,565 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 810
[2020-05-30 21:31:20,565 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 24271 states and 29493 transitions.
[2020-05-30 21:31:20,585 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:31:20,585 INFO  L728         BuchiCegarLoop]: Abstraction has 24271 states and 29493 transitions.
[2020-05-30 21:31:20,600 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 24271 states and 29493 transitions.
[2020-05-30 21:31:20,742 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 24271 to 24241.
[2020-05-30 21:31:20,742 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 24241 states.
[2020-05-30 21:31:20,787 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 24241 states to 24241 states and 29445 transitions.
[2020-05-30 21:31:20,787 INFO  L751         BuchiCegarLoop]: Abstraction has 24241 states and 29445 transitions.
[2020-05-30 21:31:20,787 INFO  L631         BuchiCegarLoop]: Abstraction has 24241 states and 29445 transitions.
[2020-05-30 21:31:20,787 INFO  L445         BuchiCegarLoop]: ======== Iteration 30============
[2020-05-30 21:31:20,787 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 24241 states and 29445 transitions.
[2020-05-30 21:31:20,813 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 18
[2020-05-30 21:31:20,813 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:31:20,813 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:31:20,816 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:31:20,816 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:31:20,821 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:31:20,821 INFO  L82        PathProgramCache]: Analyzing trace with hash -385206527, now seen corresponding path program 1 times
[2020-05-30 21:31:20,821 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:31:20,853 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:31:21,036 INFO  L134       CoverageAnalysis]: Checked inductivity of 239 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 239 trivial. 0 not checked.
[2020-05-30 21:31:21,036 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:31:21,036 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-30 21:31:21,036 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:31:21,037 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 21:31:21,037 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 21:31:21,037 INFO  L87              Difference]: Start difference. First operand 24241 states and 29445 transitions. cyclomatic complexity: 5238 Second operand 3 states.
[2020-05-30 21:31:21,303 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:31:21,304 INFO  L93              Difference]: Finished difference Result 24305 states and 29637 transitions.
[2020-05-30 21:31:21,304 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 21:31:21,304 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 24305 states and 29637 transitions.
[2020-05-30 21:31:21,372 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 18
[2020-05-30 21:31:21,460 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 24305 states to 24305 states and 29637 transitions.
[2020-05-30 21:31:21,460 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 815
[2020-05-30 21:31:21,461 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 815
[2020-05-30 21:31:21,461 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 24305 states and 29637 transitions.
[2020-05-30 21:31:21,481 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:31:21,481 INFO  L728         BuchiCegarLoop]: Abstraction has 24305 states and 29637 transitions.
[2020-05-30 21:31:21,497 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 24305 states and 29637 transitions.
[2020-05-30 21:31:21,640 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 24305 to 24289.
[2020-05-30 21:31:21,640 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 24289 states.
[2020-05-30 21:31:21,685 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 24289 states to 24289 states and 29557 transitions.
[2020-05-30 21:31:21,686 INFO  L751         BuchiCegarLoop]: Abstraction has 24289 states and 29557 transitions.
[2020-05-30 21:31:21,686 INFO  L631         BuchiCegarLoop]: Abstraction has 24289 states and 29557 transitions.
[2020-05-30 21:31:21,686 INFO  L445         BuchiCegarLoop]: ======== Iteration 31============
[2020-05-30 21:31:21,686 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 24289 states and 29557 transitions.
[2020-05-30 21:31:21,711 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 18
[2020-05-30 21:31:21,712 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:31:21,712 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:31:21,714 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:31:21,714 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:31:21,719 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:31:21,719 INFO  L82        PathProgramCache]: Analyzing trace with hash -1184076914, now seen corresponding path program 1 times
[2020-05-30 21:31:21,719 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:31:21,748 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:31:21,983 INFO  L134       CoverageAnalysis]: Checked inductivity of 203 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 203 trivial. 0 not checked.
[2020-05-30 21:31:21,983 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:31:21,983 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-05-30 21:31:21,984 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:31:21,984 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:31:21,984 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=129, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:31:21,984 INFO  L87              Difference]: Start difference. First operand 24289 states and 29557 transitions. cyclomatic complexity: 5302 Second operand 13 states.
[2020-05-30 21:31:39,384 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:31:39,384 INFO  L93              Difference]: Finished difference Result 27380 states and 33630 transitions.
[2020-05-30 21:31:39,384 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-05-30 21:31:39,384 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 27380 states and 33630 transitions.
[2020-05-30 21:31:39,474 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 22
[2020-05-30 21:31:39,589 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 27380 states to 27380 states and 33630 transitions.
[2020-05-30 21:31:39,589 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 906
[2020-05-30 21:31:39,590 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 906
[2020-05-30 21:31:39,590 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 27380 states and 33630 transitions.
[2020-05-30 21:31:39,615 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:31:39,615 INFO  L728         BuchiCegarLoop]: Abstraction has 27380 states and 33630 transitions.
[2020-05-30 21:31:39,634 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 27380 states and 33630 transitions.
[2020-05-30 21:31:39,810 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 27380 to 27317.
[2020-05-30 21:31:39,810 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 27317 states.
[2020-05-30 21:31:39,869 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 27317 states to 27317 states and 33561 transitions.
[2020-05-30 21:31:39,869 INFO  L751         BuchiCegarLoop]: Abstraction has 27317 states and 33561 transitions.
[2020-05-30 21:31:39,869 INFO  L631         BuchiCegarLoop]: Abstraction has 27317 states and 33561 transitions.
[2020-05-30 21:31:39,869 INFO  L445         BuchiCegarLoop]: ======== Iteration 32============
[2020-05-30 21:31:39,869 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 27317 states and 33561 transitions.
[2020-05-30 21:31:39,901 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 22
[2020-05-30 21:31:39,901 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:31:39,901 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:31:39,903 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:31:39,903 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:31:39,908 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:31:39,908 INFO  L82        PathProgramCache]: Analyzing trace with hash 222804006, now seen corresponding path program 1 times
[2020-05-30 21:31:39,909 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:31:39,938 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:31:40,192 INFO  L134       CoverageAnalysis]: Checked inductivity of 187 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 187 trivial. 0 not checked.
[2020-05-30 21:31:40,193 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:31:40,193 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-05-30 21:31:40,193 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:31:40,193 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-05-30 21:31:40,194 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=76, Invalid=164, Unknown=0, NotChecked=0, Total=240
[2020-05-30 21:31:40,194 INFO  L87              Difference]: Start difference. First operand 27317 states and 33561 transitions. cyclomatic complexity: 6278 Second operand 16 states.
[2020-05-30 21:31:51,968 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:31:51,968 INFO  L93              Difference]: Finished difference Result 32919 states and 41740 transitions.
[2020-05-30 21:31:51,968 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-05-30 21:31:51,968 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 32919 states and 41740 transitions.
[2020-05-30 21:31:52,085 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 44
[2020-05-30 21:31:52,245 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 32919 states to 32541 states and 41299 transitions.
[2020-05-30 21:31:52,245 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1294
[2020-05-30 21:31:52,246 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1294
[2020-05-30 21:31:52,246 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 32541 states and 41299 transitions.
[2020-05-30 21:31:52,282 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:31:52,282 INFO  L728         BuchiCegarLoop]: Abstraction has 32541 states and 41299 transitions.
[2020-05-30 21:31:52,304 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 32541 states and 41299 transitions.
[2020-05-30 21:31:52,520 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 32541 to 25961.
[2020-05-30 21:31:52,520 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 25961 states.
[2020-05-30 21:31:52,572 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 25961 states to 25961 states and 30453 transitions.
[2020-05-30 21:31:52,572 INFO  L751         BuchiCegarLoop]: Abstraction has 25961 states and 30453 transitions.
[2020-05-30 21:31:52,573 INFO  L631         BuchiCegarLoop]: Abstraction has 25961 states and 30453 transitions.
[2020-05-30 21:31:52,573 INFO  L445         BuchiCegarLoop]: ======== Iteration 33============
[2020-05-30 21:31:52,573 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 25961 states and 30453 transitions.
[2020-05-30 21:31:52,603 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 22
[2020-05-30 21:31:52,603 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:31:52,603 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:31:52,606 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:31:52,606 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:31:52,612 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:31:52,612 INFO  L82        PathProgramCache]: Analyzing trace with hash 281051214, now seen corresponding path program 1 times
[2020-05-30 21:31:52,612 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:31:52,646 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:31:52,867 INFO  L134       CoverageAnalysis]: Checked inductivity of 239 backedges. 0 proven. 4 refuted. 0 times theorem prover too weak. 235 trivial. 0 not checked.
[2020-05-30 21:31:52,868 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:31:52,868 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-05-30 21:31:52,868 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:31:52,868 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:31:52,869 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=131, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:31:52,869 INFO  L87              Difference]: Start difference. First operand 25961 states and 30453 transitions. cyclomatic complexity: 4526 Second operand 13 states.
[2020-05-30 21:32:09,142 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:32:09,142 INFO  L93              Difference]: Finished difference Result 24995 states and 29233 transitions.
[2020-05-30 21:32:09,143 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-30 21:32:09,143 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 24995 states and 29233 transitions.
[2020-05-30 21:32:09,226 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 22
[2020-05-30 21:32:09,335 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 24995 states to 24947 states and 29177 transitions.
[2020-05-30 21:32:09,335 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 854
[2020-05-30 21:32:09,336 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 854
[2020-05-30 21:32:09,336 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 24947 states and 29177 transitions.
[2020-05-30 21:32:09,360 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:32:09,360 INFO  L728         BuchiCegarLoop]: Abstraction has 24947 states and 29177 transitions.
[2020-05-30 21:32:09,377 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 24947 states and 29177 transitions.
[2020-05-30 21:32:09,543 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 24947 to 24947.
[2020-05-30 21:32:09,543 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 24947 states.
[2020-05-30 21:32:09,596 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 24947 states to 24947 states and 29177 transitions.
[2020-05-30 21:32:09,596 INFO  L751         BuchiCegarLoop]: Abstraction has 24947 states and 29177 transitions.
[2020-05-30 21:32:09,597 INFO  L631         BuchiCegarLoop]: Abstraction has 24947 states and 29177 transitions.
[2020-05-30 21:32:09,597 INFO  L445         BuchiCegarLoop]: ======== Iteration 34============
[2020-05-30 21:32:09,597 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 24947 states and 29177 transitions.
[2020-05-30 21:32:09,627 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 22
[2020-05-30 21:32:09,627 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:32:09,627 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:32:09,629 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:32:09,629 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:32:09,635 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:32:09,635 INFO  L82        PathProgramCache]: Analyzing trace with hash 1179118722, now seen corresponding path program 1 times
[2020-05-30 21:32:09,635 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:32:09,695 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:32:10,485 INFO  L134       CoverageAnalysis]: Checked inductivity of 187 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 187 trivial. 0 not checked.
[2020-05-30 21:32:10,486 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:32:10,486 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [32] imperfect sequences [] total 32
[2020-05-30 21:32:10,487 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:32:10,487 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 33 interpolants.
[2020-05-30 21:32:10,487 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=88, Invalid=968, Unknown=0, NotChecked=0, Total=1056
[2020-05-30 21:32:10,487 INFO  L87              Difference]: Start difference. First operand 24947 states and 29177 transitions. cyclomatic complexity: 4264 Second operand 33 states.
[2020-05-30 21:32:59,248 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:32:59,249 INFO  L93              Difference]: Finished difference Result 40048 states and 47423 transitions.
[2020-05-30 21:32:59,249 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 54 states. 
[2020-05-30 21:32:59,249 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 40048 states and 47423 transitions.
[2020-05-30 21:32:59,358 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 22
[2020-05-30 21:32:59,527 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 40048 states to 40048 states and 47415 transitions.
[2020-05-30 21:32:59,528 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 938
[2020-05-30 21:32:59,528 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 938
[2020-05-30 21:32:59,528 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 40048 states and 47415 transitions.
[2020-05-30 21:32:59,561 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:32:59,561 INFO  L728         BuchiCegarLoop]: Abstraction has 40048 states and 47415 transitions.
[2020-05-30 21:32:59,584 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 40048 states and 47415 transitions.
[2020-05-30 21:32:59,846 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 40048 to 39260.
[2020-05-30 21:32:59,846 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 39260 states.
[2020-05-30 21:32:59,928 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 39260 states to 39260 states and 46350 transitions.
[2020-05-30 21:32:59,928 INFO  L751         BuchiCegarLoop]: Abstraction has 39260 states and 46350 transitions.
[2020-05-30 21:32:59,928 INFO  L631         BuchiCegarLoop]: Abstraction has 39260 states and 46350 transitions.
[2020-05-30 21:32:59,928 INFO  L445         BuchiCegarLoop]: ======== Iteration 35============
[2020-05-30 21:32:59,928 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 39260 states and 46350 transitions.
[2020-05-30 21:32:59,972 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 22
[2020-05-30 21:32:59,972 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:32:59,972 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:32:59,975 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:32:59,975 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG);
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND FALSE  !(choice == 9)
[L4944]  COND FALSE  !(choice == 8)
[L4953]  COND FALSE  !(choice == 7)
[L4962]  COND FALSE  !(choice == 6)
[L4971]  COND FALSE  !(choice == 5)
[L4980]  COND FALSE  !(choice == 4)
[L4989]  COND FALSE  !(choice == 3)
[L4999]  COND FALSE  !(choice == 2)
[L5008]  COND FALSE  !(choice == 1)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:32:59,981 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:32:59,981 INFO  L82        PathProgramCache]: Analyzing trace with hash -2004619723, now seen corresponding path program 1 times
[2020-05-30 21:32:59,981 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:33:00,015 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:33:00,284 INFO  L134       CoverageAnalysis]: Checked inductivity of 359 backedges. 9 proven. 0 refuted. 0 times theorem prover too weak. 350 trivial. 0 not checked.
[2020-05-30 21:33:00,284 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:33:00,284 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-30 21:33:00,285 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:33:00,285 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 21:33:00,285 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 21:33:00,285 INFO  L87              Difference]: Start difference. First operand 39260 states and 46350 transitions. cyclomatic complexity: 7146 Second operand 3 states.
[2020-05-30 21:33:00,498 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:33:00,498 INFO  L93              Difference]: Finished difference Result 39268 states and 46366 transitions.
[2020-05-30 21:33:00,498 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 21:33:00,498 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 39268 states and 46366 transitions.
[2020-05-30 21:33:00,609 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 22
[2020-05-30 21:33:00,765 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 39268 states to 39268 states and 46366 transitions.
[2020-05-30 21:33:00,765 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 885
[2020-05-30 21:33:00,766 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 885
[2020-05-30 21:33:00,766 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 39268 states and 46366 transitions.
[2020-05-30 21:33:00,801 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:33:00,801 INFO  L728         BuchiCegarLoop]: Abstraction has 39268 states and 46366 transitions.
[2020-05-30 21:33:00,825 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 39268 states and 46366 transitions.
[2020-05-30 21:33:01,072 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 39268 to 39260.
[2020-05-30 21:33:01,072 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 39260 states.
[2020-05-30 21:33:01,151 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 39260 states to 39260 states and 46326 transitions.
[2020-05-30 21:33:01,151 INFO  L751         BuchiCegarLoop]: Abstraction has 39260 states and 46326 transitions.
[2020-05-30 21:33:01,152 INFO  L631         BuchiCegarLoop]: Abstraction has 39260 states and 46326 transitions.
[2020-05-30 21:33:01,152 INFO  L445         BuchiCegarLoop]: ======== Iteration 36============
[2020-05-30 21:33:01,152 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 39260 states and 46326 transitions.
[2020-05-30 21:33:01,194 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 22
[2020-05-30 21:33:01,194 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:33:01,194 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:33:01,196 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:33:01,197 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND FALSE  !(choice == 9)
[L4944]  COND FALSE  !(choice == 8)
[L4953]  COND FALSE  !(choice == 7)
[L4962]  COND FALSE  !(choice == 6)
[L4971]  COND FALSE  !(choice == 5)
[L4980]  COND FALSE  !(choice == 4)
[L4989]  COND FALSE  !(choice == 3)
[L4999]  COND FALSE  !(choice == 2)
[L5008]  COND FALSE  !(choice == 1)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:33:01,202 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:33:01,202 INFO  L82        PathProgramCache]: Analyzing trace with hash 404617014, now seen corresponding path program 1 times
[2020-05-30 21:33:01,202 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:33:01,238 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:33:01,622 INFO  L134       CoverageAnalysis]: Checked inductivity of 359 backedges. 32 proven. 0 refuted. 0 times theorem prover too weak. 327 trivial. 0 not checked.
[2020-05-30 21:33:01,622 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:33:01,622 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-05-30 21:33:01,622 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:33:01,623 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:33:01,623 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=107, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:33:01,623 INFO  L87              Difference]: Start difference. First operand 39260 states and 46326 transitions. cyclomatic complexity: 7122 Second operand 12 states.
[2020-05-30 21:33:16,320 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:33:16,320 INFO  L93              Difference]: Finished difference Result 39269 states and 46234 transitions.
[2020-05-30 21:33:16,320 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-05-30 21:33:16,320 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 39269 states and 46234 transitions.
[2020-05-30 21:33:16,441 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 22
[2020-05-30 21:33:16,606 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 39269 states to 39269 states and 46234 transitions.
[2020-05-30 21:33:16,607 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 880
[2020-05-30 21:33:16,607 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 880
[2020-05-30 21:33:16,608 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 39269 states and 46234 transitions.
[2020-05-30 21:33:16,644 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:33:16,644 INFO  L728         BuchiCegarLoop]: Abstraction has 39269 states and 46234 transitions.
[2020-05-30 21:33:16,670 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 39269 states and 46234 transitions.
[2020-05-30 21:33:16,999 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 39269 to 39234.
[2020-05-30 21:33:16,999 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 39234 states.
[2020-05-30 21:33:17,075 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 39234 states to 39234 states and 46194 transitions.
[2020-05-30 21:33:17,075 INFO  L751         BuchiCegarLoop]: Abstraction has 39234 states and 46194 transitions.
[2020-05-30 21:33:17,075 INFO  L631         BuchiCegarLoop]: Abstraction has 39234 states and 46194 transitions.
[2020-05-30 21:33:17,076 INFO  L445         BuchiCegarLoop]: ======== Iteration 37============
[2020-05-30 21:33:17,076 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 39234 states and 46194 transitions.
[2020-05-30 21:33:17,119 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 22
[2020-05-30 21:33:17,119 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:33:17,119 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:33:17,122 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:33:17,122 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND TRUE   DType[to] == ValidatorAuction
[L4256]        CALL        call FallbackMethod_ValidatorAuction__success(to, from, amount);
[L2916]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2917]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2918]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2919]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L2919]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L2920]        COND FALSE  !(revert)
[L2925]                    gas := gas - 15;
[L2926]        CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L2926]        RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L2927]        COND FALSE  !(revert)
[L4256]        RET         call FallbackMethod_ValidatorAuction__success(to, from, amount);
[L4257]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:33:17,139 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:33:17,140 INFO  L82        PathProgramCache]: Analyzing trace with hash 649453773, now seen corresponding path program 1 times
[2020-05-30 21:33:17,140 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:33:17,170 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:33:17,387 INFO  L134       CoverageAnalysis]: Checked inductivity of 211 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 211 trivial. 0 not checked.
[2020-05-30 21:33:17,387 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:33:17,387 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-05-30 21:33:17,387 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:33:17,387 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-30 21:33:17,388 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-30 21:33:17,388 INFO  L87              Difference]: Start difference. First operand 39234 states and 46194 transitions. cyclomatic complexity: 7016 Second operand 8 states.
[2020-05-30 21:33:19,282 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:33:19,282 INFO  L93              Difference]: Finished difference Result 37173 states and 42937 transitions.
[2020-05-30 21:33:19,282 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-05-30 21:33:19,282 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 37173 states and 42937 transitions.
[2020-05-30 21:33:19,383 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 18
[2020-05-30 21:33:19,515 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 37173 states to 36051 states and 41560 transitions.
[2020-05-30 21:33:19,516 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 767
[2020-05-30 21:33:19,516 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 825
[2020-05-30 21:33:19,516 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 36051 states and 41560 transitions.
[2020-05-30 21:33:19,547 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:33:19,547 INFO  L728         BuchiCegarLoop]: Abstraction has 36051 states and 41560 transitions.
[2020-05-30 21:33:19,569 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 36051 states and 41560 transitions.
[2020-05-30 21:33:19,814 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 36051 to 35958.
[2020-05-30 21:33:19,814 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 35958 states.
[2020-05-30 21:33:19,883 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 35958 states to 35958 states and 41448 transitions.
[2020-05-30 21:33:19,884 INFO  L751         BuchiCegarLoop]: Abstraction has 35958 states and 41448 transitions.
[2020-05-30 21:33:19,884 INFO  L631         BuchiCegarLoop]: Abstraction has 35958 states and 41448 transitions.
[2020-05-30 21:33:19,884 INFO  L445         BuchiCegarLoop]: ======== Iteration 38============
[2020-05-30 21:33:19,884 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 35958 states and 41448 transitions.
[2020-05-30 21:33:19,926 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 18
[2020-05-30 21:33:19,926 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:33:19,926 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:33:19,928 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:33:19,928 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:33:19,935 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:33:19,935 INFO  L82        PathProgramCache]: Analyzing trace with hash 3589190, now seen corresponding path program 1 times
[2020-05-30 21:33:19,936 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:33:19,968 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:33:20,261 INFO  L134       CoverageAnalysis]: Checked inductivity of 323 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 321 trivial. 0 not checked.
[2020-05-30 21:33:20,261 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:33:20,261 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-05-30 21:33:20,262 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:33:20,262 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:33:20,262 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=26, Invalid=130, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:33:20,263 INFO  L87              Difference]: Start difference. First operand 35958 states and 41448 transitions. cyclomatic complexity: 5540 Second operand 13 states.
[2020-05-30 21:33:37,290 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:33:37,291 INFO  L93              Difference]: Finished difference Result 36110 states and 41532 transitions.
[2020-05-30 21:33:37,291 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-05-30 21:33:37,291 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 36110 states and 41532 transitions.
[2020-05-30 21:33:37,391 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 18
[2020-05-30 21:33:37,524 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 36110 states to 36110 states and 41532 transitions.
[2020-05-30 21:33:37,524 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 833
[2020-05-30 21:33:37,525 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 833
[2020-05-30 21:33:37,525 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 36110 states and 41532 transitions.
[2020-05-30 21:33:37,555 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:33:37,555 INFO  L728         BuchiCegarLoop]: Abstraction has 36110 states and 41532 transitions.
[2020-05-30 21:33:37,578 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 36110 states and 41532 transitions.
[2020-05-30 21:33:37,806 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 36110 to 35912.
[2020-05-30 21:33:37,806 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 35912 states.
[2020-05-30 21:33:37,873 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 35912 states to 35912 states and 41322 transitions.
[2020-05-30 21:33:37,873 INFO  L751         BuchiCegarLoop]: Abstraction has 35912 states and 41322 transitions.
[2020-05-30 21:33:37,873 INFO  L631         BuchiCegarLoop]: Abstraction has 35912 states and 41322 transitions.
[2020-05-30 21:33:37,873 INFO  L445         BuchiCegarLoop]: ======== Iteration 39============
[2020-05-30 21:33:37,873 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 35912 states and 41322 transitions.
[2020-05-30 21:33:37,910 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 18
[2020-05-30 21:33:37,910 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:33:37,910 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:33:37,912 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:33:37,912 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG);
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND FALSE  !(choice == 9)
[L4944]  COND FALSE  !(choice == 8)
[L4953]  COND FALSE  !(choice == 7)
[L4962]  COND FALSE  !(choice == 6)
[L4971]  COND FALSE  !(choice == 5)
[L4980]  COND FALSE  !(choice == 4)
[L4989]  COND FALSE  !(choice == 3)
[L4999]  COND FALSE  !(choice == 2)
[L5008]  COND FALSE  !(choice == 1)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:33:37,916 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:33:37,917 INFO  L82        PathProgramCache]: Analyzing trace with hash -1908419126, now seen corresponding path program 1 times
[2020-05-30 21:33:37,917 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:33:37,948 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:33:38,482 INFO  L134       CoverageAnalysis]: Checked inductivity of 516 backedges. 10 proven. 4 refuted. 0 times theorem prover too weak. 502 trivial. 0 not checked.
[2020-05-30 21:33:38,482 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:33:38,483 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [19] total 19
[2020-05-30 21:33:38,483 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:33:38,483 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2020-05-30 21:33:38,483 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=53, Invalid=289, Unknown=0, NotChecked=0, Total=342
[2020-05-30 21:33:38,483 INFO  L87              Difference]: Start difference. First operand 35912 states and 41322 transitions. cyclomatic complexity: 5460 Second operand 19 states.
[2020-05-30 21:34:12,450 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:34:12,451 INFO  L93              Difference]: Finished difference Result 37008 states and 44343 transitions.
[2020-05-30 21:34:12,451 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-05-30 21:34:12,451 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 37008 states and 44343 transitions.
[2020-05-30 21:34:12,563 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 54
[2020-05-30 21:34:12,817 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 37008 states to 37008 states and 44343 transitions.
[2020-05-30 21:34:12,817 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 893
[2020-05-30 21:34:12,818 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 893
[2020-05-30 21:34:12,818 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 37008 states and 44343 transitions.
[2020-05-30 21:34:12,852 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:34:12,852 INFO  L728         BuchiCegarLoop]: Abstraction has 37008 states and 44343 transitions.
[2020-05-30 21:34:12,870 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 37008 states and 44343 transitions.
[2020-05-30 21:34:13,108 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 37008 to 36712.
[2020-05-30 21:34:13,108 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 36712 states.
[2020-05-30 21:34:13,185 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 36712 states to 36712 states and 43977 transitions.
[2020-05-30 21:34:13,185 INFO  L751         BuchiCegarLoop]: Abstraction has 36712 states and 43977 transitions.
[2020-05-30 21:34:13,185 INFO  L631         BuchiCegarLoop]: Abstraction has 36712 states and 43977 transitions.
[2020-05-30 21:34:13,185 INFO  L445         BuchiCegarLoop]: ======== Iteration 40============
[2020-05-30 21:34:13,186 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 36712 states and 43977 transitions.
[2020-05-30 21:34:13,226 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 54
[2020-05-30 21:34:13,226 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:34:13,226 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:34:13,228 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:34:13,229 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG);
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:34:13,247 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:34:13,248 INFO  L82        PathProgramCache]: Analyzing trace with hash -231578551, now seen corresponding path program 2 times
[2020-05-30 21:34:13,248 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:34:13,309 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:34:13,740 INFO  L134       CoverageAnalysis]: Checked inductivity of 527 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 502 trivial. 0 not checked.
[2020-05-30 21:34:13,740 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:34:13,740 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [19] imperfect sequences [] total 19
[2020-05-30 21:34:13,740 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:34:13,741 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 20 interpolants.
[2020-05-30 21:34:13,741 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=44, Invalid=336, Unknown=0, NotChecked=0, Total=380
[2020-05-30 21:34:13,741 INFO  L87              Difference]: Start difference. First operand 36712 states and 43977 transitions. cyclomatic complexity: 7352 Second operand 20 states.
[2020-05-30 21:34:48,673 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:34:48,673 INFO  L93              Difference]: Finished difference Result 42639 states and 52386 transitions.
[2020-05-30 21:34:48,673 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 35 states. 
[2020-05-30 21:34:48,673 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 42639 states and 52386 transitions.
[2020-05-30 21:34:48,811 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 82
[2020-05-30 21:34:49,006 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 42639 states to 42615 states and 52358 transitions.
[2020-05-30 21:34:49,006 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1020
[2020-05-30 21:34:49,007 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1020
[2020-05-30 21:34:49,007 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 42615 states and 52358 transitions.
[2020-05-30 21:34:49,053 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:34:49,053 INFO  L728         BuchiCegarLoop]: Abstraction has 42615 states and 52358 transitions.
[2020-05-30 21:34:49,078 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 42615 states and 52358 transitions.
[2020-05-30 21:34:49,376 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 42615 to 42479.
[2020-05-30 21:34:49,377 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 42479 states.
[2020-05-30 21:34:49,474 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 42479 states to 42479 states and 52176 transitions.
[2020-05-30 21:34:49,474 INFO  L751         BuchiCegarLoop]: Abstraction has 42479 states and 52176 transitions.
[2020-05-30 21:34:49,474 INFO  L631         BuchiCegarLoop]: Abstraction has 42479 states and 52176 transitions.
[2020-05-30 21:34:49,474 INFO  L445         BuchiCegarLoop]: ======== Iteration 41============
[2020-05-30 21:34:49,474 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 42479 states and 52176 transitions.
[2020-05-30 21:34:49,520 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 82
[2020-05-30 21:34:49,520 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:34:49,520 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:34:49,522 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:34:49,522 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4);
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND FALSE  !(choice == 9)
[L4944]  COND FALSE  !(choice == 8)
[L4953]  COND FALSE  !(choice == 7)
[L4962]  COND FALSE  !(choice == 6)
[L4971]  COND FALSE  !(choice == 5)
[L4980]  COND FALSE  !(choice == 4)
[L4989]  COND FALSE  !(choice == 3)
[L4999]  COND FALSE  !(choice == 2)
[L5008]  COND FALSE  !(choice == 1)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:34:49,526 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:34:49,526 INFO  L82        PathProgramCache]: Analyzing trace with hash -759646604, now seen corresponding path program 1 times
[2020-05-30 21:34:49,527 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:34:49,561 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:34:50,046 INFO  L134       CoverageAnalysis]: Checked inductivity of 320 backedges. 2 proven. 109 refuted. 0 times theorem prover too weak. 209 trivial. 0 not checked.
[2020-05-30 21:34:50,046 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:34:50,046 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [22] total 22
[2020-05-30 21:34:50,046 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:34:50,047 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 22 interpolants.
[2020-05-30 21:34:50,047 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=68, Invalid=394, Unknown=0, NotChecked=0, Total=462
[2020-05-30 21:34:50,047 INFO  L87              Difference]: Start difference. First operand 42479 states and 52176 transitions. cyclomatic complexity: 9848 Second operand 22 states.
[2020-05-30 21:35:10,888 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:35:10,888 INFO  L93              Difference]: Finished difference Result 42693 states and 53104 transitions.
[2020-05-30 21:35:10,888 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 26 states. 
[2020-05-30 21:35:10,888 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 42693 states and 53104 transitions.
[2020-05-30 21:35:11,028 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 82
[2020-05-30 21:35:11,233 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 42693 states to 42693 states and 53100 transitions.
[2020-05-30 21:35:11,233 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1012
[2020-05-30 21:35:11,234 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1012
[2020-05-30 21:35:11,234 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 42693 states and 53100 transitions.
[2020-05-30 21:35:11,282 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:35:11,282 INFO  L728         BuchiCegarLoop]: Abstraction has 42693 states and 53100 transitions.
[2020-05-30 21:35:11,306 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 42693 states and 53100 transitions.
[2020-05-30 21:35:11,605 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 42693 to 42669.
[2020-05-30 21:35:11,605 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 42669 states.
[2020-05-30 21:35:11,707 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 42669 states to 42669 states and 53066 transitions.
[2020-05-30 21:35:11,707 INFO  L751         BuchiCegarLoop]: Abstraction has 42669 states and 53066 transitions.
[2020-05-30 21:35:11,707 INFO  L631         BuchiCegarLoop]: Abstraction has 42669 states and 53066 transitions.
[2020-05-30 21:35:11,707 INFO  L445         BuchiCegarLoop]: ======== Iteration 42============
[2020-05-30 21:35:11,707 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 42669 states and 53066 transitions.
[2020-05-30 21:35:11,754 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 82
[2020-05-30 21:35:11,754 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:35:11,754 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:35:11,756 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:35:11,757 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume to == user && amount == fsum_bid_ValidatorAuction_2_0;
[L7]                       success_send__success0 := true;
[L7]                       success_send__success0 := false;
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:35:11,762 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:35:11,762 INFO  L82        PathProgramCache]: Analyzing trace with hash -1260348903, now seen corresponding path program 1 times
[2020-05-30 21:35:11,763 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:35:11,798 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:35:12,245 INFO  L134       CoverageAnalysis]: Checked inductivity of 529 backedges. 2 proven. 35 refuted. 0 times theorem prover too weak. 492 trivial. 0 not checked.
[2020-05-30 21:35:12,245 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:35:12,246 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 21:35:12,246 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:35:12,246 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:35:12,246 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=109, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:35:12,246 INFO  L87              Difference]: Start difference. First operand 42669 states and 53066 transitions. cyclomatic complexity: 10572 Second operand 12 states.
[2020-05-30 21:35:29,217 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:35:29,217 INFO  L93              Difference]: Finished difference Result 44397 states and 55366 transitions.
[2020-05-30 21:35:29,218 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-05-30 21:35:29,218 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 44397 states and 55366 transitions.
[2020-05-30 21:35:29,376 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 88
[2020-05-30 21:35:29,602 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 44397 states to 44397 states and 55366 transitions.
[2020-05-30 21:35:29,603 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1033
[2020-05-30 21:35:29,603 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1033
[2020-05-30 21:35:29,604 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 44397 states and 55366 transitions.
[2020-05-30 21:35:29,655 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:35:29,655 INFO  L728         BuchiCegarLoop]: Abstraction has 44397 states and 55366 transitions.
[2020-05-30 21:35:29,683 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 44397 states and 55366 transitions.
[2020-05-30 21:35:29,995 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 44397 to 44349.
[2020-05-30 21:35:29,995 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 44349 states.
[2020-05-30 21:35:30,103 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 44349 states to 44349 states and 55318 transitions.
[2020-05-30 21:35:30,103 INFO  L751         BuchiCegarLoop]: Abstraction has 44349 states and 55318 transitions.
[2020-05-30 21:35:30,103 INFO  L631         BuchiCegarLoop]: Abstraction has 44349 states and 55318 transitions.
[2020-05-30 21:35:30,103 INFO  L445         BuchiCegarLoop]: ======== Iteration 43============
[2020-05-30 21:35:30,104 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 44349 states and 55318 transitions.
[2020-05-30 21:35:30,151 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 88
[2020-05-30 21:35:30,151 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:35:30,152 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:35:30,153 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:35:30,153 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume to == user && amount == fsum_bid_ValidatorAuction_2_0;
[L7]                       success_send__success0 := true;
[L7]                       success_send__success0 := false;
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND FALSE  !(choice == 9)
[L4944]  COND FALSE  !(choice == 8)
[L4953]  COND FALSE  !(choice == 7)
[L4962]  COND FALSE  !(choice == 6)
[L4971]  COND FALSE  !(choice == 5)
[L4980]  COND FALSE  !(choice == 4)
[L4989]  COND FALSE  !(choice == 3)
[L4999]  COND FALSE  !(choice == 2)
[L5008]  COND FALSE  !(choice == 1)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:35:30,157 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:35:30,158 INFO  L82        PathProgramCache]: Analyzing trace with hash -505401140, now seen corresponding path program 1 times
[2020-05-30 21:35:30,158 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:35:30,191 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:35:30,524 INFO  L134       CoverageAnalysis]: Checked inductivity of 284 backedges. 2 proven. 36 refuted. 0 times theorem prover too weak. 246 trivial. 0 not checked.
[2020-05-30 21:35:30,524 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:35:30,524 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 21:35:30,525 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:35:30,525 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:35:30,525 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=109, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:35:30,525 INFO  L87              Difference]: Start difference. First operand 44349 states and 55318 transitions. cyclomatic complexity: 11144 Second operand 12 states.
[2020-05-30 21:35:47,099 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:35:47,099 INFO  L93              Difference]: Finished difference Result 44329 states and 55030 transitions.
[2020-05-30 21:35:47,099 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-05-30 21:35:47,099 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 44329 states and 55030 transitions.
[2020-05-30 21:35:47,247 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 84
[2020-05-30 21:35:47,468 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 44329 states to 44329 states and 55030 transitions.
[2020-05-30 21:35:47,468 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1029
[2020-05-30 21:35:47,469 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1029
[2020-05-30 21:35:47,469 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 44329 states and 55030 transitions.
[2020-05-30 21:35:47,519 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:35:47,519 INFO  L728         BuchiCegarLoop]: Abstraction has 44329 states and 55030 transitions.
[2020-05-30 21:35:47,547 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 44329 states and 55030 transitions.
[2020-05-30 21:35:47,851 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 44329 to 44275.
[2020-05-30 21:35:47,851 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 44275 states.
[2020-05-30 21:35:47,953 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 44275 states to 44275 states and 54966 transitions.
[2020-05-30 21:35:47,953 INFO  L751         BuchiCegarLoop]: Abstraction has 44275 states and 54966 transitions.
[2020-05-30 21:35:47,953 INFO  L631         BuchiCegarLoop]: Abstraction has 44275 states and 54966 transitions.
[2020-05-30 21:35:47,953 INFO  L445         BuchiCegarLoop]: ======== Iteration 44============
[2020-05-30 21:35:47,953 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 44275 states and 54966 transitions.
[2020-05-30 21:35:47,997 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 84
[2020-05-30 21:35:47,998 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:35:47,998 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:35:48,000 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:35:48,000 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG);
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4);
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4);
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:35:48,005 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:35:48,005 INFO  L82        PathProgramCache]: Analyzing trace with hash -1599064102, now seen corresponding path program 1 times
[2020-05-30 21:35:48,005 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:35:48,079 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:35:48,785 INFO  L134       CoverageAnalysis]: Checked inductivity of 649 backedges. 25 proven. 65 refuted. 0 times theorem prover too weak. 559 trivial. 0 not checked.
[2020-05-30 21:35:48,785 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:35:48,785 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [26] total 26
[2020-05-30 21:35:48,786 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:35:48,786 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 27 interpolants.
[2020-05-30 21:35:48,786 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=78, Invalid=624, Unknown=0, NotChecked=0, Total=702
[2020-05-30 21:35:48,786 INFO  L87              Difference]: Start difference. First operand 44275 states and 54966 transitions. cyclomatic complexity: 10860 Second operand 27 states.
[2020-05-30 21:36:37,048 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:36:37,049 INFO  L93              Difference]: Finished difference Result 45539 states and 56568 transitions.
[2020-05-30 21:36:37,049 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 48 states. 
[2020-05-30 21:36:37,049 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 45539 states and 56568 transitions.
[2020-05-30 21:36:37,197 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 88
[2020-05-30 21:36:37,416 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 45539 states to 45515 states and 56540 transitions.
[2020-05-30 21:36:37,416 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1059
[2020-05-30 21:36:37,417 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1059
[2020-05-30 21:36:37,417 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 45515 states and 56540 transitions.
[2020-05-30 21:36:37,467 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:36:37,467 INFO  L728         BuchiCegarLoop]: Abstraction has 45515 states and 56540 transitions.
[2020-05-30 21:36:37,492 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 45515 states and 56540 transitions.
[2020-05-30 21:36:37,848 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 45515 to 45361.
[2020-05-30 21:36:37,848 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 45361 states.
[2020-05-30 21:36:37,955 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 45361 states to 45361 states and 56326 transitions.
[2020-05-30 21:36:37,955 INFO  L751         BuchiCegarLoop]: Abstraction has 45361 states and 56326 transitions.
[2020-05-30 21:36:37,956 INFO  L631         BuchiCegarLoop]: Abstraction has 45361 states and 56326 transitions.
[2020-05-30 21:36:37,956 INFO  L445         BuchiCegarLoop]: ======== Iteration 45============
[2020-05-30 21:36:37,956 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 45361 states and 56326 transitions.
[2020-05-30 21:36:38,001 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 88
[2020-05-30 21:36:38,002 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:36:38,002 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:36:38,004 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:36:38,004 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4);
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4);
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:36:38,009 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:36:38,009 INFO  L82        PathProgramCache]: Analyzing trace with hash -1231232579, now seen corresponding path program 1 times
[2020-05-30 21:36:38,009 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:36:38,047 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:36:38,440 INFO  L134       CoverageAnalysis]: Checked inductivity of 414 backedges. 35 proven. 4 refuted. 0 times theorem prover too weak. 375 trivial. 0 not checked.
[2020-05-30 21:36:38,440 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:36:38,441 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-05-30 21:36:38,441 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:36:38,441 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:36:38,441 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=24, Invalid=132, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:36:38,441 INFO  L87              Difference]: Start difference. First operand 45361 states and 56326 transitions. cyclomatic complexity: 11150 Second operand 13 states.
[2020-05-30 21:36:56,887 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:36:56,888 INFO  L93              Difference]: Finished difference Result 54978 states and 67941 transitions.
[2020-05-30 21:36:56,888 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-05-30 21:36:56,888 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 54978 states and 67941 transitions.
[2020-05-30 21:36:57,085 INFO  L131   ngComponentsAnalysis]: Automaton has 28 accepting balls. 138
[2020-05-30 21:36:57,309 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 54978 states to 45123 states and 54719 transitions.
[2020-05-30 21:36:57,309 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1225
[2020-05-30 21:36:57,310 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1225
[2020-05-30 21:36:57,311 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 45123 states and 54719 transitions.
[2020-05-30 21:36:57,363 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:36:57,363 INFO  L728         BuchiCegarLoop]: Abstraction has 45123 states and 54719 transitions.
[2020-05-30 21:36:57,389 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 45123 states and 54719 transitions.
[2020-05-30 21:36:57,725 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 45123 to 44903.
[2020-05-30 21:36:57,725 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 44903 states.
[2020-05-30 21:36:57,827 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 44903 states to 44903 states and 54080 transitions.
[2020-05-30 21:36:57,827 INFO  L751         BuchiCegarLoop]: Abstraction has 44903 states and 54080 transitions.
[2020-05-30 21:36:57,827 INFO  L631         BuchiCegarLoop]: Abstraction has 44903 states and 54080 transitions.
[2020-05-30 21:36:57,827 INFO  L445         BuchiCegarLoop]: ======== Iteration 46============
[2020-05-30 21:36:57,827 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 44903 states and 54080 transitions.
[2020-05-30 21:36:57,872 INFO  L131   ngComponentsAnalysis]: Automaton has 17 accepting balls. 96
[2020-05-30 21:36:57,872 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:36:57,872 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:36:57,874 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:36:57,874 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4);
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:36:57,879 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:36:57,879 INFO  L82        PathProgramCache]: Analyzing trace with hash -940130533, now seen corresponding path program 1 times
[2020-05-30 21:36:57,880 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:36:57,913 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:36:58,202 INFO  L134       CoverageAnalysis]: Checked inductivity of 322 backedges. 71 proven. 2 refuted. 0 times theorem prover too weak. 249 trivial. 0 not checked.
[2020-05-30 21:36:58,202 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:36:58,202 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 21:36:58,202 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:36:58,203 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:36:58,203 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=109, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:36:58,203 INFO  L87              Difference]: Start difference. First operand 44903 states and 54080 transitions. cyclomatic complexity: 9357 Second operand 12 states.
[2020-05-30 21:37:12,882 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:37:12,882 INFO  L93              Difference]: Finished difference Result 44903 states and 54056 transitions.
[2020-05-30 21:37:12,882 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-05-30 21:37:12,882 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 44903 states and 54056 transitions.
[2020-05-30 21:37:13,024 INFO  L131   ngComponentsAnalysis]: Automaton has 17 accepting balls. 96
[2020-05-30 21:37:13,228 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 44903 states to 44903 states and 54056 transitions.
[2020-05-30 21:37:13,228 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1183
[2020-05-30 21:37:13,229 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1183
[2020-05-30 21:37:13,229 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 44903 states and 54056 transitions.
[2020-05-30 21:37:13,278 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:37:13,278 INFO  L728         BuchiCegarLoop]: Abstraction has 44903 states and 54056 transitions.
[2020-05-30 21:37:13,308 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 44903 states and 54056 transitions.
[2020-05-30 21:37:13,641 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 44903 to 44903.
[2020-05-30 21:37:13,642 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 44903 states.
[2020-05-30 21:37:13,742 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 44903 states to 44903 states and 54056 transitions.
[2020-05-30 21:37:13,742 INFO  L751         BuchiCegarLoop]: Abstraction has 44903 states and 54056 transitions.
[2020-05-30 21:37:13,742 INFO  L631         BuchiCegarLoop]: Abstraction has 44903 states and 54056 transitions.
[2020-05-30 21:37:13,742 INFO  L445         BuchiCegarLoop]: ======== Iteration 47============
[2020-05-30 21:37:13,742 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 44903 states and 54056 transitions.
[2020-05-30 21:37:13,787 INFO  L131   ngComponentsAnalysis]: Automaton has 17 accepting balls. 96
[2020-05-30 21:37:13,787 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:37:13,787 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:37:13,789 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:37:13,789 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG);
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:37:13,794 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:37:13,794 INFO  L82        PathProgramCache]: Analyzing trace with hash -1014267540, now seen corresponding path program 1 times
[2020-05-30 21:37:13,795 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:37:13,853 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:37:14,515 INFO  L134       CoverageAnalysis]: Checked inductivity of 256 backedges. 0 proven. 7 refuted. 0 times theorem prover too weak. 249 trivial. 0 not checked.
[2020-05-30 21:37:14,515 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:37:14,515 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [32] total 32
[2020-05-30 21:37:14,516 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:37:14,516 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 33 interpolants.
[2020-05-30 21:37:14,516 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=79, Invalid=977, Unknown=0, NotChecked=0, Total=1056
[2020-05-30 21:37:14,516 INFO  L87              Difference]: Start difference. First operand 44903 states and 54056 transitions. cyclomatic complexity: 9333 Second operand 33 states.
[2020-05-30 21:38:04,399 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:38:04,399 INFO  L93              Difference]: Finished difference Result 48407 states and 58588 transitions.
[2020-05-30 21:38:04,400 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 59 states. 
[2020-05-30 21:38:04,400 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 48407 states and 58588 transitions.
[2020-05-30 21:38:04,557 INFO  L131   ngComponentsAnalysis]: Automaton has 17 accepting balls. 96
[2020-05-30 21:38:04,786 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 48407 states to 48377 states and 58558 transitions.
[2020-05-30 21:38:04,786 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1191
[2020-05-30 21:38:04,787 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1191
[2020-05-30 21:38:04,787 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 48377 states and 58558 transitions.
[2020-05-30 21:38:04,840 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:38:04,841 INFO  L728         BuchiCegarLoop]: Abstraction has 48377 states and 58558 transitions.
[2020-05-30 21:38:04,868 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 48377 states and 58558 transitions.
[2020-05-30 21:38:05,304 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 48377 to 48259.
[2020-05-30 21:38:05,304 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 48259 states.
[2020-05-30 21:38:05,413 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 48259 states to 48259 states and 58392 transitions.
[2020-05-30 21:38:05,413 INFO  L751         BuchiCegarLoop]: Abstraction has 48259 states and 58392 transitions.
[2020-05-30 21:38:05,413 INFO  L631         BuchiCegarLoop]: Abstraction has 48259 states and 58392 transitions.
[2020-05-30 21:38:05,413 INFO  L445         BuchiCegarLoop]: ======== Iteration 48============
[2020-05-30 21:38:05,413 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 48259 states and 58392 transitions.
[2020-05-30 21:38:05,462 INFO  L131   ngComponentsAnalysis]: Automaton has 17 accepting balls. 96
[2020-05-30 21:38:05,462 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:38:05,462 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:38:05,464 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:38:05,464 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4);
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND FALSE  !(choice == 9)
[L4944]  COND FALSE  !(choice == 8)
[L4953]  COND FALSE  !(choice == 7)
[L4962]  COND FALSE  !(choice == 6)
[L4971]  COND FALSE  !(choice == 5)
[L4980]  COND FALSE  !(choice == 4)
[L4989]  COND FALSE  !(choice == 3)
[L4999]  COND FALSE  !(choice == 2)
[L5008]  COND FALSE  !(choice == 1)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:38:05,474 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:38:05,474 INFO  L82        PathProgramCache]: Analyzing trace with hash -738148292, now seen corresponding path program 1 times
[2020-05-30 21:38:05,475 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:38:05,510 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:38:05,823 INFO  L134       CoverageAnalysis]: Checked inductivity of 438 backedges. 80 proven. 36 refuted. 0 times theorem prover too weak. 322 trivial. 0 not checked.
[2020-05-30 21:38:05,823 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:38:05,824 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 21:38:05,824 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:38:05,824 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:38:05,824 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=109, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:38:05,824 INFO  L87              Difference]: Start difference. First operand 48259 states and 58392 transitions. cyclomatic complexity: 10329 Second operand 12 states.
[2020-05-30 21:38:23,905 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:38:23,905 INFO  L93              Difference]: Finished difference Result 48199 states and 57935 transitions.
[2020-05-30 21:38:23,905 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-05-30 21:38:23,905 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 48199 states and 57935 transitions.
[2020-05-30 21:38:24,065 INFO  L131   ngComponentsAnalysis]: Automaton has 19 accepting balls. 86
[2020-05-30 21:38:24,292 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 48199 states to 45126 states and 53943 transitions.
[2020-05-30 21:38:24,292 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1173
[2020-05-30 21:38:24,293 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1173
[2020-05-30 21:38:24,293 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 45126 states and 53943 transitions.
[2020-05-30 21:38:24,342 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:38:24,343 INFO  L728         BuchiCegarLoop]: Abstraction has 45126 states and 53943 transitions.
[2020-05-30 21:38:24,372 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 45126 states and 53943 transitions.
[2020-05-30 21:38:25,352 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 45126 to 45086.
[2020-05-30 21:38:25,352 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 45086 states.
[2020-05-30 21:38:25,447 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 45086 states to 45086 states and 53871 transitions.
[2020-05-30 21:38:25,447 INFO  L751         BuchiCegarLoop]: Abstraction has 45086 states and 53871 transitions.
[2020-05-30 21:38:25,447 INFO  L631         BuchiCegarLoop]: Abstraction has 45086 states and 53871 transitions.
[2020-05-30 21:38:25,447 INFO  L445         BuchiCegarLoop]: ======== Iteration 49============
[2020-05-30 21:38:25,447 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 45086 states and 53871 transitions.
[2020-05-30 21:38:25,491 INFO  L131   ngComponentsAnalysis]: Automaton has 17 accepting balls. 82
[2020-05-30 21:38:25,491 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:38:25,491 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:38:25,494 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:38:25,494 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4);
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4);
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:38:25,531 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:38:25,532 INFO  L82        PathProgramCache]: Analyzing trace with hash -12091965, now seen corresponding path program 1 times
[2020-05-30 21:38:25,532 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:38:25,564 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:38:25,911 INFO  L134       CoverageAnalysis]: Checked inductivity of 442 backedges. 106 proven. 4 refuted. 0 times theorem prover too weak. 332 trivial. 0 not checked.
[2020-05-30 21:38:25,911 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:38:25,911 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-05-30 21:38:25,912 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:38:25,912 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:38:25,912 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=26, Invalid=130, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:38:25,912 INFO  L87              Difference]: Start difference. First operand 45086 states and 53871 transitions. cyclomatic complexity: 8962 Second operand 13 states.
[2020-05-30 21:38:35,078 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:38:35,078 INFO  L93              Difference]: Finished difference Result 44336 states and 52569 transitions.
[2020-05-30 21:38:35,078 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-05-30 21:38:35,078 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 44336 states and 52569 transitions.
[2020-05-30 21:38:35,188 INFO  L131   ngComponentsAnalysis]: Automaton has 16 accepting balls. 80
[2020-05-30 21:38:35,377 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 44336 states to 44336 states and 52569 transitions.
[2020-05-30 21:38:35,377 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1138
[2020-05-30 21:38:35,378 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1138
[2020-05-30 21:38:35,378 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 44336 states and 52569 transitions.
[2020-05-30 21:38:35,423 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:38:35,423 INFO  L728         BuchiCegarLoop]: Abstraction has 44336 states and 52569 transitions.
[2020-05-30 21:38:35,445 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 44336 states and 52569 transitions.
[2020-05-30 21:38:35,722 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 44336 to 44270.
[2020-05-30 21:38:35,722 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 44270 states.
[2020-05-30 21:38:35,825 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 44270 states to 44270 states and 52489 transitions.
[2020-05-30 21:38:35,825 INFO  L751         BuchiCegarLoop]: Abstraction has 44270 states and 52489 transitions.
[2020-05-30 21:38:35,825 INFO  L631         BuchiCegarLoop]: Abstraction has 44270 states and 52489 transitions.
[2020-05-30 21:38:35,825 INFO  L445         BuchiCegarLoop]: ======== Iteration 50============
[2020-05-30 21:38:35,825 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 44270 states and 52489 transitions.
[2020-05-30 21:38:35,873 INFO  L131   ngComponentsAnalysis]: Automaton has 16 accepting balls. 80
[2020-05-30 21:38:35,873 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:38:35,873 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:38:35,876 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:38:35,876 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4);
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:38:35,881 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:38:35,882 INFO  L82        PathProgramCache]: Analyzing trace with hash -562633150, now seen corresponding path program 1 times
[2020-05-30 21:38:35,882 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:38:35,918 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:38:36,215 INFO  L134       CoverageAnalysis]: Checked inductivity of 510 backedges. 42 proven. 78 refuted. 0 times theorem prover too weak. 390 trivial. 0 not checked.
[2020-05-30 21:38:36,215 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:38:36,215 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-05-30 21:38:36,215 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:38:36,216 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:38:36,216 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=129, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:38:36,216 INFO  L87              Difference]: Start difference. First operand 44270 states and 52489 transitions. cyclomatic complexity: 8384 Second operand 13 states.
[2020-05-30 21:38:45,531 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:38:45,531 INFO  L93              Difference]: Finished difference Result 43069 states and 50762 transitions.
[2020-05-30 21:38:45,531 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-30 21:38:45,532 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 43069 states and 50762 transitions.
[2020-05-30 21:38:45,655 INFO  L131   ngComponentsAnalysis]: Automaton has 15 accepting balls. 72
[2020-05-30 21:38:45,838 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 43069 states to 43069 states and 50762 transitions.
[2020-05-30 21:38:45,838 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1102
[2020-05-30 21:38:45,839 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1102
[2020-05-30 21:38:45,839 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 43069 states and 50762 transitions.
[2020-05-30 21:38:45,881 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:38:45,881 INFO  L728         BuchiCegarLoop]: Abstraction has 43069 states and 50762 transitions.
[2020-05-30 21:38:45,904 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 43069 states and 50762 transitions.
[2020-05-30 21:38:46,172 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 43069 to 43069.
[2020-05-30 21:38:46,172 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 43069 states.
[2020-05-30 21:38:46,264 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 43069 states to 43069 states and 50762 transitions.
[2020-05-30 21:38:46,265 INFO  L751         BuchiCegarLoop]: Abstraction has 43069 states and 50762 transitions.
[2020-05-30 21:38:46,265 INFO  L631         BuchiCegarLoop]: Abstraction has 43069 states and 50762 transitions.
[2020-05-30 21:38:46,265 INFO  L445         BuchiCegarLoop]: ======== Iteration 51============
[2020-05-30 21:38:46,265 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 43069 states and 50762 transitions.
[2020-05-30 21:38:46,306 INFO  L131   ngComponentsAnalysis]: Automaton has 15 accepting balls. 72
[2020-05-30 21:38:46,307 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:38:46,307 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:38:46,309 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:38:46,309 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4);
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:38:46,313 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:38:46,314 INFO  L82        PathProgramCache]: Analyzing trace with hash -1994212957, now seen corresponding path program 2 times
[2020-05-30 21:38:46,314 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:38:46,348 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:38:46,617 INFO  L134       CoverageAnalysis]: Checked inductivity of 322 backedges. 4 proven. 62 refuted. 0 times theorem prover too weak. 256 trivial. 0 not checked.
[2020-05-30 21:38:46,617 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:38:46,617 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-05-30 21:38:46,617 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:38:46,618 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:38:46,618 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=129, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:38:46,618 INFO  L87              Difference]: Start difference. First operand 43069 states and 50762 transitions. cyclomatic complexity: 7855 Second operand 13 states.
[2020-05-30 21:38:58,781 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:38:58,781 INFO  L93              Difference]: Finished difference Result 42713 states and 50268 transitions.
[2020-05-30 21:38:58,781 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-30 21:38:58,781 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 42713 states and 50268 transitions.
[2020-05-30 21:38:58,886 INFO  L131   ngComponentsAnalysis]: Automaton has 14 accepting balls. 70
[2020-05-30 21:38:59,064 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 42713 states to 42713 states and 50268 transitions.
[2020-05-30 21:38:59,064 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1086
[2020-05-30 21:38:59,065 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1086
[2020-05-30 21:38:59,065 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 42713 states and 50268 transitions.
[2020-05-30 21:38:59,109 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:38:59,109 INFO  L728         BuchiCegarLoop]: Abstraction has 42713 states and 50268 transitions.
[2020-05-30 21:38:59,131 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 42713 states and 50268 transitions.
[2020-05-30 21:38:59,420 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 42713 to 42713.
[2020-05-30 21:38:59,420 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 42713 states.
[2020-05-30 21:38:59,518 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 42713 states to 42713 states and 50268 transitions.
[2020-05-30 21:38:59,518 INFO  L751         BuchiCegarLoop]: Abstraction has 42713 states and 50268 transitions.
[2020-05-30 21:38:59,518 INFO  L631         BuchiCegarLoop]: Abstraction has 42713 states and 50268 transitions.
[2020-05-30 21:38:59,518 INFO  L445         BuchiCegarLoop]: ======== Iteration 52============
[2020-05-30 21:38:59,518 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 42713 states and 50268 transitions.
[2020-05-30 21:38:59,562 INFO  L131   ngComponentsAnalysis]: Automaton has 14 accepting balls. 70
[2020-05-30 21:38:59,563 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:38:59,563 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:38:59,565 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:38:59,565 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4);
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND FALSE  !(choice == 9)
[L4944]  COND FALSE  !(choice == 8)
[L4953]  COND FALSE  !(choice == 7)
[L4962]  COND FALSE  !(choice == 6)
[L4971]  COND FALSE  !(choice == 5)
[L4980]  COND FALSE  !(choice == 4)
[L4989]  COND FALSE  !(choice == 3)
[L4999]  COND FALSE  !(choice == 2)
[L5008]  COND FALSE  !(choice == 1)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:38:59,569 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:38:59,569 INFO  L82        PathProgramCache]: Analyzing trace with hash 2075199786, now seen corresponding path program 1 times
[2020-05-30 21:38:59,569 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:38:59,604 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:38:59,901 INFO  L134       CoverageAnalysis]: Checked inductivity of 492 backedges. 42 proven. 69 refuted. 0 times theorem prover too weak. 381 trivial. 0 not checked.
[2020-05-30 21:38:59,901 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:38:59,901 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-05-30 21:38:59,901 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:38:59,901 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:38:59,902 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=129, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:38:59,902 INFO  L87              Difference]: Start difference. First operand 42713 states and 50268 transitions. cyclomatic complexity: 7713 Second operand 13 states.
[2020-05-30 21:39:08,751 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:39:08,751 INFO  L93              Difference]: Finished difference Result 40922 states and 47815 transitions.
[2020-05-30 21:39:08,751 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-30 21:39:08,752 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 40922 states and 47815 transitions.
[2020-05-30 21:39:08,878 INFO  L131   ngComponentsAnalysis]: Automaton has 13 accepting balls. 62
[2020-05-30 21:39:09,057 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 40922 states to 40320 states and 47172 transitions.
[2020-05-30 21:39:09,058 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1050
[2020-05-30 21:39:09,058 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1050
[2020-05-30 21:39:09,058 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 40320 states and 47172 transitions.
[2020-05-30 21:39:09,099 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:39:09,099 INFO  L728         BuchiCegarLoop]: Abstraction has 40320 states and 47172 transitions.
[2020-05-30 21:39:09,124 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 40320 states and 47172 transitions.
[2020-05-30 21:39:09,467 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 40320 to 40242.
[2020-05-30 21:39:09,467 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 40242 states.
[2020-05-30 21:39:09,547 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 40242 states to 40242 states and 47079 transitions.
[2020-05-30 21:39:09,548 INFO  L751         BuchiCegarLoop]: Abstraction has 40242 states and 47079 transitions.
[2020-05-30 21:39:09,548 INFO  L631         BuchiCegarLoop]: Abstraction has 40242 states and 47079 transitions.
[2020-05-30 21:39:09,548 INFO  L445         BuchiCegarLoop]: ======== Iteration 53============
[2020-05-30 21:39:09,548 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 40242 states and 47079 transitions.
[2020-05-30 21:39:09,587 INFO  L131   ngComponentsAnalysis]: Automaton has 13 accepting balls. 62
[2020-05-30 21:39:09,587 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:39:09,587 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:39:09,589 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:39:09,589 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:39:09,601 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:39:09,602 INFO  L82        PathProgramCache]: Analyzing trace with hash 1751957049, now seen corresponding path program 1 times
[2020-05-30 21:39:09,602 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:39:09,631 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:39:09,919 INFO  L134       CoverageAnalysis]: Checked inductivity of 517 backedges. 177 proven. 21 refuted. 0 times theorem prover too weak. 319 trivial. 0 not checked.
[2020-05-30 21:39:09,920 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:39:09,920 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [15] total 15
[2020-05-30 21:39:09,920 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:39:09,920 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-05-30 21:39:09,920 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=29, Invalid=181, Unknown=0, NotChecked=0, Total=210
[2020-05-30 21:39:09,920 INFO  L87              Difference]: Start difference. First operand 40242 states and 47079 transitions. cyclomatic complexity: 6980 Second operand 15 states.
[2020-05-30 21:39:24,583 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:39:24,584 INFO  L93              Difference]: Finished difference Result 46101 states and 53792 transitions.
[2020-05-30 21:39:24,584 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-05-30 21:39:24,584 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 46101 states and 53792 transitions.
[2020-05-30 21:39:24,721 INFO  L131   ngComponentsAnalysis]: Automaton has 16 accepting balls. 74
[2020-05-30 21:39:24,919 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 46101 states to 46101 states and 53792 transitions.
[2020-05-30 21:39:24,920 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1230
[2020-05-30 21:39:24,921 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1230
[2020-05-30 21:39:24,921 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 46101 states and 53792 transitions.
[2020-05-30 21:39:24,967 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:39:24,967 INFO  L728         BuchiCegarLoop]: Abstraction has 46101 states and 53792 transitions.
[2020-05-30 21:39:24,993 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 46101 states and 53792 transitions.
[2020-05-30 21:39:25,278 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 46101 to 46042.
[2020-05-30 21:39:25,278 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 46042 states.
[2020-05-30 21:39:25,372 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 46042 states to 46042 states and 53698 transitions.
[2020-05-30 21:39:25,372 INFO  L751         BuchiCegarLoop]: Abstraction has 46042 states and 53698 transitions.
[2020-05-30 21:39:25,372 INFO  L631         BuchiCegarLoop]: Abstraction has 46042 states and 53698 transitions.
[2020-05-30 21:39:25,372 INFO  L445         BuchiCegarLoop]: ======== Iteration 54============
[2020-05-30 21:39:25,372 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 46042 states and 53698 transitions.
[2020-05-30 21:39:25,416 INFO  L131   ngComponentsAnalysis]: Automaton has 16 accepting balls. 74
[2020-05-30 21:39:25,416 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:39:25,416 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:39:25,418 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:39:25,419 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG);
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG);
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4);
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:39:25,423 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:39:25,423 INFO  L82        PathProgramCache]: Analyzing trace with hash 863454150, now seen corresponding path program 1 times
[2020-05-30 21:39:25,423 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:39:25,467 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:39:26,841 INFO  L134       CoverageAnalysis]: Checked inductivity of 585 backedges. 180 proven. 71 refuted. 0 times theorem prover too weak. 334 trivial. 0 not checked.
[2020-05-30 21:39:26,841 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:39:26,841 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [36] total 36
[2020-05-30 21:39:26,842 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:39:26,842 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 36 interpolants.
[2020-05-30 21:39:26,842 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=128, Invalid=1132, Unknown=0, NotChecked=0, Total=1260
[2020-05-30 21:39:26,842 INFO  L87              Difference]: Start difference. First operand 46042 states and 53698 transitions. cyclomatic complexity: 7794 Second operand 36 states.
[2020-05-30 21:40:31,604 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:40:31,604 INFO  L93              Difference]: Finished difference Result 47045 states and 55901 transitions.
[2020-05-30 21:40:31,605 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 27 states. 
[2020-05-30 21:40:31,605 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 47045 states and 55901 transitions.
[2020-05-30 21:40:31,737 INFO  L131   ngComponentsAnalysis]: Automaton has 34 accepting balls. 138
[2020-05-30 21:40:31,938 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 47045 states to 46959 states and 55636 transitions.
[2020-05-30 21:40:31,938 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1314
[2020-05-30 21:40:31,939 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1314
[2020-05-30 21:40:31,939 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 46959 states and 55636 transitions.
[2020-05-30 21:40:31,987 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:40:31,987 INFO  L728         BuchiCegarLoop]: Abstraction has 46959 states and 55636 transitions.
[2020-05-30 21:40:32,012 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 46959 states and 55636 transitions.
[2020-05-30 21:40:32,304 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 46959 to 46391.
[2020-05-30 21:40:32,304 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 46391 states.
[2020-05-30 21:40:32,400 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 46391 states to 46391 states and 54773 transitions.
[2020-05-30 21:40:32,400 INFO  L751         BuchiCegarLoop]: Abstraction has 46391 states and 54773 transitions.
[2020-05-30 21:40:32,400 INFO  L631         BuchiCegarLoop]: Abstraction has 46391 states and 54773 transitions.
[2020-05-30 21:40:32,400 INFO  L445         BuchiCegarLoop]: ======== Iteration 55============
[2020-05-30 21:40:32,400 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 46391 states and 54773 transitions.
[2020-05-30 21:40:32,445 INFO  L131   ngComponentsAnalysis]: Automaton has 23 accepting balls. 104
[2020-05-30 21:40:32,445 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:40:32,445 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:40:32,448 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:40:32,448 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG);
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG);
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4);
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:40:32,452 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:40:32,452 INFO  L82        PathProgramCache]: Analyzing trace with hash -483770969, now seen corresponding path program 2 times
[2020-05-30 21:40:32,452 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:40:32,524 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:40:33,303 INFO  L134       CoverageAnalysis]: Checked inductivity of 606 backedges. 25 proven. 7 refuted. 0 times theorem prover too weak. 574 trivial. 0 not checked.
[2020-05-30 21:40:33,303 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:40:33,303 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [23] total 23
[2020-05-30 21:40:33,304 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:40:33,304 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 24 interpolants.
[2020-05-30 21:40:33,304 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=61, Invalid=491, Unknown=0, NotChecked=0, Total=552
[2020-05-30 21:40:33,304 INFO  L87              Difference]: Start difference. First operand 46391 states and 54773 transitions. cyclomatic complexity: 8576 Second operand 24 states.
[2020-05-30 21:41:05,232 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:41:05,233 INFO  L93              Difference]: Finished difference Result 51570 states and 61314 transitions.
[2020-05-30 21:41:05,233 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 40 states. 
[2020-05-30 21:41:05,233 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 51570 states and 61314 transitions.
[2020-05-30 21:41:05,391 INFO  L131   ngComponentsAnalysis]: Automaton has 26 accepting balls. 120
[2020-05-30 21:41:05,628 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 51570 states to 51540 states and 61279 transitions.
[2020-05-30 21:41:05,629 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1413
[2020-05-30 21:41:05,630 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1413
[2020-05-30 21:41:05,630 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 51540 states and 61279 transitions.
[2020-05-30 21:41:05,684 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:41:05,684 INFO  L728         BuchiCegarLoop]: Abstraction has 51540 states and 61279 transitions.
[2020-05-30 21:41:05,711 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 51540 states and 61279 transitions.
[2020-05-30 21:41:06,047 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 51540 to 51391.
[2020-05-30 21:41:06,047 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 51391 states.
[2020-05-30 21:41:06,162 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 51391 states to 51391 states and 61053 transitions.
[2020-05-30 21:41:06,163 INFO  L751         BuchiCegarLoop]: Abstraction has 51391 states and 61053 transitions.
[2020-05-30 21:41:06,163 INFO  L631         BuchiCegarLoop]: Abstraction has 51391 states and 61053 transitions.
[2020-05-30 21:41:06,163 INFO  L445         BuchiCegarLoop]: ======== Iteration 56============
[2020-05-30 21:41:06,163 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 51391 states and 61053 transitions.
[2020-05-30 21:41:06,221 INFO  L131   ngComponentsAnalysis]: Automaton has 26 accepting balls. 120
[2020-05-30 21:41:06,221 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:41:06,221 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:41:06,224 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:41:06,224 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG);
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:41:06,229 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:41:06,229 INFO  L82        PathProgramCache]: Analyzing trace with hash -1824455055, now seen corresponding path program 1 times
[2020-05-30 21:41:06,230 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:41:06,275 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:41:06,806 INFO  L134       CoverageAnalysis]: Checked inductivity of 1129 backedges. 356 proven. 68 refuted. 0 times theorem prover too weak. 705 trivial. 0 not checked.
[2020-05-30 21:41:06,806 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:41:06,807 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [20] total 20
[2020-05-30 21:41:06,807 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:41:06,807 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 20 interpolants.
[2020-05-30 21:41:06,807 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=49, Invalid=331, Unknown=0, NotChecked=0, Total=380
[2020-05-30 21:41:06,807 INFO  L87              Difference]: Start difference. First operand 51391 states and 61053 transitions. cyclomatic complexity: 9872 Second operand 20 states.
[2020-05-30 21:41:28,051 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:41:28,051 INFO  L93              Difference]: Finished difference Result 46046 states and 53923 transitions.
[2020-05-30 21:41:28,051 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-30 21:41:28,051 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 46046 states and 53923 transitions.
[2020-05-30 21:41:28,158 INFO  L131   ngComponentsAnalysis]: Automaton has 20 accepting balls. 90
[2020-05-30 21:41:28,273 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 46046 states to 30528 states and 35744 transitions.
[2020-05-30 21:41:28,273 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1220
[2020-05-30 21:41:28,274 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1222
[2020-05-30 21:41:28,274 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 30528 states and 35744 transitions.
[2020-05-30 21:41:28,302 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:41:28,302 INFO  L728         BuchiCegarLoop]: Abstraction has 30528 states and 35744 transitions.
[2020-05-30 21:41:28,319 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 30528 states and 35744 transitions.
[2020-05-30 21:41:28,501 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 30528 to 30328.
[2020-05-30 21:41:28,501 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 30328 states.
[2020-05-30 21:41:28,562 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 30328 states to 30328 states and 35168 transitions.
[2020-05-30 21:41:28,562 INFO  L751         BuchiCegarLoop]: Abstraction has 30328 states and 35168 transitions.
[2020-05-30 21:41:28,562 INFO  L631         BuchiCegarLoop]: Abstraction has 30328 states and 35168 transitions.
[2020-05-30 21:41:28,562 INFO  L445         BuchiCegarLoop]: ======== Iteration 57============
[2020-05-30 21:41:28,562 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 30328 states and 35168 transitions.
[2020-05-30 21:41:28,593 INFO  L131   ngComponentsAnalysis]: Automaton has 18 accepting balls. 70
[2020-05-30 21:41:28,593 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:41:28,593 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:41:28,595 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:41:28,595 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG);
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND FALSE  !(choice == 9)
[L4944]  COND FALSE  !(choice == 8)
[L4953]  COND FALSE  !(choice == 7)
[L4962]  COND FALSE  !(choice == 6)
[L4971]  COND FALSE  !(choice == 5)
[L4980]  COND FALSE  !(choice == 4)
[L4989]  COND FALSE  !(choice == 3)
[L4999]  COND FALSE  !(choice == 2)
[L5008]  COND FALSE  !(choice == 1)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:41:28,598 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:41:28,599 INFO  L82        PathProgramCache]: Analyzing trace with hash 1572394325, now seen corresponding path program 1 times
[2020-05-30 21:41:28,599 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:41:28,632 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:41:28,924 INFO  L134       CoverageAnalysis]: Checked inductivity of 363 backedges. 2 proven. 2 refuted. 0 times theorem prover too weak. 359 trivial. 0 not checked.
[2020-05-30 21:41:28,924 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:41:28,924 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-30 21:41:28,925 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:41:28,925 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:41:28,925 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=111, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:41:28,925 INFO  L87              Difference]: Start difference. First operand 30328 states and 35168 transitions. cyclomatic complexity: 4942 Second operand 12 states.
[2020-05-30 21:41:36,450 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:41:36,450 INFO  L93              Difference]: Finished difference Result 21517 states and 24288 transitions.
[2020-05-30 21:41:36,450 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-05-30 21:41:36,451 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21517 states and 24288 transitions.
[2020-05-30 21:41:36,510 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-30 21:41:36,562 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21517 states to 14918 states and 17085 transitions.
[2020-05-30 21:41:36,562 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 471
[2020-05-30 21:41:36,563 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 568
[2020-05-30 21:41:36,563 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 14918 states and 17085 transitions.
[2020-05-30 21:41:36,575 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:41:36,575 INFO  L728         BuchiCegarLoop]: Abstraction has 14918 states and 17085 transitions.
[2020-05-30 21:41:36,584 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 14918 states and 17085 transitions.
[2020-05-30 21:41:36,662 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 14918 to 13984.
[2020-05-30 21:41:36,663 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 13984 states.
[2020-05-30 21:41:36,685 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 13984 states to 13984 states and 15885 transitions.
[2020-05-30 21:41:36,685 INFO  L751         BuchiCegarLoop]: Abstraction has 13984 states and 15885 transitions.
[2020-05-30 21:41:36,685 INFO  L631         BuchiCegarLoop]: Abstraction has 13984 states and 15885 transitions.
[2020-05-30 21:41:36,685 INFO  L445         BuchiCegarLoop]: ======== Iteration 58============
[2020-05-30 21:41:36,685 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 13984 states and 15885 transitions.
[2020-05-30 21:41:36,699 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-30 21:41:36,700 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:41:36,700 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:41:36,702 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:41:36,702 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG);
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG);
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4);
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 4;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:41:36,707 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:41:36,707 INFO  L82        PathProgramCache]: Analyzing trace with hash 872345784, now seen corresponding path program 1 times
[2020-05-30 21:41:36,708 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:41:36,809 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:41:37,780 INFO  L134       CoverageAnalysis]: Checked inductivity of 728 backedges. 25 proven. 72 refuted. 0 times theorem prover too weak. 631 trivial. 0 not checked.
[2020-05-30 21:41:37,781 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:41:37,781 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [29] total 29
[2020-05-30 21:41:37,781 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:41:37,781 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 30 interpolants.
[2020-05-30 21:41:37,782 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=93, Invalid=777, Unknown=0, NotChecked=0, Total=870
[2020-05-30 21:41:37,782 INFO  L87              Difference]: Start difference. First operand 13984 states and 15885 transitions. cyclomatic complexity: 1952 Second operand 30 states.
[2020-05-30 21:41:43,218 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:41:43,218 INFO  L93              Difference]: Finished difference Result 12477 states and 14251 transitions.
[2020-05-30 21:41:43,219 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 33 states. 
[2020-05-30 21:41:43,219 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12477 states and 14251 transitions.
[2020-05-30 21:41:43,252 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-05-30 21:41:43,252 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12477 states to 0 states and 0 transitions.
[2020-05-30 21:41:43,252 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-05-30 21:41:43,252 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-05-30 21:41:43,253 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-05-30 21:41:43,253 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:41:43,253 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-30 21:41:43,253 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-30 21:41:43,253 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-30 21:41:43,253 INFO  L445         BuchiCegarLoop]: ======== Iteration 59============
[2020-05-30 21:41:43,253 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-05-30 21:41:43,253 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-05-30 21:41:43,253 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-05-30 21:41:43,257 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 30.05 09:41:43 BasicIcfg
[2020-05-30 21:41:43,257 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-05-30 21:41:43,258 INFO  L168              Benchmark]: Toolchain (without parser) took 807523.19 ms. Allocated memory was 514.9 MB in the beginning and 6.8 GB in the end (delta: 6.3 GB). Free memory was 453.4 MB in the beginning and 4.1 GB in the end (delta: -3.7 GB). Peak memory consumption was 2.7 GB. Max. memory is 15.3 GB.
[2020-05-30 21:41:43,259 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.12 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-05-30 21:41:43,259 INFO  L168              Benchmark]: Boogie Preprocessor took 86.07 ms. Allocated memory is still 514.9 MB. Free memory was 453.4 MB in the beginning and 444.0 MB in the end (delta: 9.4 MB). Peak memory consumption was 9.4 MB. Max. memory is 15.3 GB.
[2020-05-30 21:41:43,259 INFO  L168              Benchmark]: UtopiaSpecLang took 54.41 ms. Allocated memory is still 514.9 MB. Free memory was 444.0 MB in the beginning and 437.2 MB in the end (delta: 6.8 MB). Peak memory consumption was 6.8 MB. Max. memory is 15.3 GB.
[2020-05-30 21:41:43,260 INFO  L168              Benchmark]: Boogie Printer took 16.14 ms. Allocated memory is still 514.9 MB. Free memory was 437.2 MB in the beginning and 434.5 MB in the end (delta: 2.7 MB). Peak memory consumption was 2.7 MB. Max. memory is 15.3 GB.
[2020-05-30 21:41:43,260 INFO  L168              Benchmark]: RCFGBuilder took 651.34 ms. Allocated memory is still 514.9 MB. Free memory was 434.5 MB in the beginning and 426.9 MB in the end (delta: 7.7 MB). Peak memory consumption was 93.2 MB. Max. memory is 15.3 GB.
[2020-05-30 21:41:43,260 INFO  L168              Benchmark]: UtopiaLTL2Aut took 48.27 ms. Allocated memory is still 514.9 MB. Free memory was 426.9 MB in the beginning and 422.1 MB in the end (delta: 4.7 MB). Peak memory consumption was 4.7 MB. Max. memory is 15.3 GB.
[2020-05-30 21:41:43,261 INFO  L168              Benchmark]: BÃ¼chi Program Product took 8387.18 ms. Allocated memory was 514.9 MB in the beginning and 1.9 GB in the end (delta: 1.4 GB). Free memory was 422.1 MB in the beginning and 943.5 MB in the end (delta: -521.4 MB). Peak memory consumption was 1.5 GB. Max. memory is 15.3 GB.
[2020-05-30 21:41:43,261 INFO  L168              Benchmark]: BlockEncodingV2 took 670.01 ms. Allocated memory is still 1.9 GB. Free memory was 943.5 MB in the beginning and 486.9 MB in the end (delta: 456.6 MB). Peak memory consumption was 456.6 MB. Max. memory is 15.3 GB.
[2020-05-30 21:41:43,262 INFO  L168              Benchmark]: BuchiAutomizer took 797606.32 ms. Allocated memory was 1.9 GB in the beginning and 6.8 GB in the end (delta: 4.9 GB). Free memory was 486.9 MB in the beginning and 4.1 GB in the end (delta: -3.6 GB). Peak memory consumption was 1.3 GB. Max. memory is 15.3 GB.
[2020-05-30 21:41:43,264 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    21823 locations, 83581 edges
  - StatisticsResult: Encoded RCFG
    21655 locations, 82548 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.12 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 86.07 ms. Allocated memory is still 514.9 MB. Free memory was 453.4 MB in the beginning and 444.0 MB in the end (delta: 9.4 MB). Peak memory consumption was 9.4 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 54.41 ms. Allocated memory is still 514.9 MB. Free memory was 444.0 MB in the beginning and 437.2 MB in the end (delta: 6.8 MB). Peak memory consumption was 6.8 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 16.14 ms. Allocated memory is still 514.9 MB. Free memory was 437.2 MB in the beginning and 434.5 MB in the end (delta: 2.7 MB). Peak memory consumption was 2.7 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 651.34 ms. Allocated memory is still 514.9 MB. Free memory was 434.5 MB in the beginning and 426.9 MB in the end (delta: 7.7 MB). Peak memory consumption was 93.2 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 48.27 ms. Allocated memory is still 514.9 MB. Free memory was 426.9 MB in the beginning and 422.1 MB in the end (delta: 4.7 MB). Peak memory consumption was 4.7 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 8387.18 ms. Allocated memory was 514.9 MB in the beginning and 1.9 GB in the end (delta: 1.4 GB). Free memory was 422.1 MB in the beginning and 943.5 MB in the end (delta: -521.4 MB). Peak memory consumption was 1.5 GB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 670.01 ms. Allocated memory is still 1.9 GB. Free memory was 943.5 MB in the beginning and 486.9 MB in the end (delta: 456.6 MB). Peak memory consumption was 456.6 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 797606.32 ms. Allocated memory was 1.9 GB in the beginning and 6.8 GB in the end (delta: 4.9 GB). Free memory was 486.9 MB in the beginning and 4.1 GB in the end (delta: -3.6 GB). Peak memory consumption was 1.3 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    8 locations, 27 edges
  - StatisticsResult: Initial RCFG
    2394 locations, 2916 edges
  - StatisticsResult: BuchiProgram size
    21823 locations, 83581 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 58 terminating modules (58 trivial, 0 deterministic, 0 nondeterministic). 58 modules have a trivial ranking function, the largest among these consists of 36 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 797.5s and 59 iterations.  TraceHistogramMax:8. Analysis of lassos took 20.2s. Construction of modules took 627.0s. BÃ¼chi inclusion checks took 118.3s. Highest rank in rank-based complementation 0. Minimization of det autom 58. Minimization of nondet autom 0. Automata minimization 16.5s AutomataMinimizationTime, 57 MinimizatonAttempts, 18907 StatesRemovedByMinimization, 45 NontrivialMinimizations. Non-live state removal took 11.2s Buchi closure took 0.0s. Biggest automaton had 51391 states and ocurred in iteration 55.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 878018 SDtfs, 1131705 SDslu, 2408670 SDs, 0 SdLazy, 4978853 SolverSat, 154173 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 627.0s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU58 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ( ( <>(success_bid_ValidatorAuction0) ) && ( <>(success_withdraw_ValidatorAuction0) ) )&& ! ( ( []( (success_closeAuction_ValidatorAuction0) ==> ( <>(success_send__success0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
