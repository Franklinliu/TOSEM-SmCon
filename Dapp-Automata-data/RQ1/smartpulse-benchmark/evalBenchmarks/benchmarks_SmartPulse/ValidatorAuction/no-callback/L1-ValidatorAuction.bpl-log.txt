This is Ultimate 0.1.24-9993c5c-m
[2020-05-30 21:23:46,597 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-05-30 21:23:46,598 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-05-30 21:23:46,609 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-05-30 21:23:46,609 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-05-30 21:23:46,611 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-05-30 21:23:46,612 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-05-30 21:23:46,614 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-05-30 21:23:46,616 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-05-30 21:23:46,617 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-05-30 21:23:46,618 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-05-30 21:23:46,619 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-05-30 21:23:46,620 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-05-30 21:23:46,621 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-05-30 21:23:46,622 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-05-30 21:23:46,623 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-05-30 21:23:46,624 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-05-30 21:23:46,625 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-05-30 21:23:46,626 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-05-30 21:23:46,628 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-05-30 21:23:46,629 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-05-30 21:23:46,630 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-05-30 21:23:46,632 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-05-30 21:23:46,632 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-05-30 21:23:46,632 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-05-30 21:23:46,633 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-05-30 21:23:46,633 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-05-30 21:23:46,634 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-05-30 21:23:46,634 INFO  L174        SettingsManager]: Resetting UtopiaLiveness preferences to default values
[2020-05-30 21:23:46,635 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-05-30 21:23:46,635 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-05-30 21:23:46,636 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-05-30 21:23:46,637 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-05-30 21:23:46,638 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-05-30 21:23:46,639 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-05-30 21:23:46,640 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-05-30 21:23:46,640 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-05-30 21:23:46,641 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-05-30 21:23:46,641 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-05-30 21:23:46,641 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-05-30 21:23:46,642 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-05-30 21:23:46,643 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-05-30 21:23:46,643 INFO  L98         SettingsManager]: Beginning loading settings from /Users/jon/Documents/Research/masterUltimate/SmartPulse/settings.epf
[2020-05-30 21:23:46,653 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-05-30 21:23:46,653 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-05-30 21:23:46,654 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-05-30 21:23:46,654 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-05-30 21:23:46,654 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/Users/jon/Documents/Research/devUltimate/ltl2ba
[2020-05-30 21:23:46,655 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-05-30 21:23:46,655 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-05-30 21:23:46,655 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-05-30 21:23:46,655 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-05-30 21:23:46,655 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-05-30 21:23:46,655 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-05-30 21:23:46,655 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-05-30 21:23:46,655 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-05-30 21:23:46,655 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-05-30 21:23:46,655 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-05-30 21:23:46,656 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-05-30 21:23:46,656 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-05-30 21:23:46,656 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-05-30 21:23:46,656 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-05-30 21:23:46,656 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-05-30 21:23:46,656 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-05-30 21:23:46,656 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-05-30 21:23:46,656 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-05-30 21:23:46,656 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-05-30 21:23:46,656 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-05-30 21:23:46,656 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-05-30 21:23:46,674 INFO  L81    nceAwareModelManager]: Repository-Root is: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T
[2020-05-30 21:23:46,686 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-05-30 21:23:46,688 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-05-30 21:23:46,688 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-05-30 21:23:46,689 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-05-30 21:23:46,690 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/ValidatorAuction/no-callback/L1-ValidatorAuction.bpl
[2020-05-30 21:23:46,690 INFO  L111           BoogieParser]: Parsing: '/Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/ValidatorAuction/no-callback/L1-ValidatorAuction.bpl'
[2020-05-30 21:23:46,757 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-05-30 21:23:46,758 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-05-30 21:23:46,759 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-05-30 21:23:46,759 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-05-30 21:23:46,759 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-05-30 21:23:46,772 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "L1-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:23:46" (1/1) ...
[2020-05-30 21:23:46,773 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "L1-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:23:46" (1/1) ...
[2020-05-30 21:23:46,800 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "L1-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:23:46" (1/1) ...
[2020-05-30 21:23:46,800 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "L1-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:23:46" (1/1) ...
[2020-05-30 21:23:46,817 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "L1-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:23:46" (1/1) ...
[2020-05-30 21:23:46,825 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "L1-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:23:46" (1/1) ...
[2020-05-30 21:23:46,832 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "L1-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:23:46" (1/1) ...
[2020-05-30 21:23:46,842 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-05-30 21:23:46,843 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-05-30 21:23:46,843 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-05-30 21:23:46,846 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-05-30 21:23:46,850 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "L1-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:23:46" (1/1) ...
[2020-05-30 21:23:46,868 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: []((finished(ValidatorAuction.closeAuction)) ==> (<>(finished(send(from, to, amt), (to == user && amt == fsum(ValidatorAuction.bid, 2, (user == msg.sender)))))))
[2020-05-30 21:23:46,874 INFO  L979   opiaSpecLangObserver]: Successfully lexed: []((finished(ValidatorAuction.closeAuction)) ==> (<>(finished(send(from, to, amt), (to == user && amt == fsum(ValidatorAuction.bid, 2, (user == msg.sender)))))))
[2020-05-30 21:23:46,881 INFO  L981   opiaSpecLangObserver]: Successfully parsed: []((finished(ValidatorAuction.closeAuction)) ==> (<>(finished(send(from, to, amt), (to == user && amt == fsum(ValidatorAuction.bid, 2, (user == msg.sender)))))))
[2020-05-30 21:23:46,883 INFO  L599   opiaSpecLangObserver]: Parsed user==msg.sender to BinaryExpression[COMPEQ,IdentifierExpression[user,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,bid_ValidatorAuction>]]
[2020-05-30 21:23:46,885 INFO  L599   opiaSpecLangObserver]: Parsed ( to==user && amount==fsum_bid_ValidatorAuction_2_0 ) to BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[to,<IMPLEMENTATION_INPARAM,send__success>],IdentifierExpression[user,GLOBAL]],BinaryExpression[COMPEQ,IdentifierExpression[amount,<IMPLEMENTATION_INPARAM,send__success>],IdentifierExpression[fsum_bid_ValidatorAuction_2_0,GLOBAL]]]
[2020-05-30 21:23:46,886 INFO  L968   opiaSpecLangObserver]: Compiling: []((finished(ValidatorAuction.closeAuction)) ==> (<>(finished(send(from, to, amt), (to == user && amt == fsum(ValidatorAuction.bid, 2, (user == msg.sender)))))))
[2020-05-30 21:23:46,886 INFO  L970   opiaSpecLangObserver]: Compiled to ( []( AP(success_closeAuction_ValidatorAuction0) ==> ( <>AP(success_send__success0) ) ) )
[2020-05-30 21:23:46,886 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: (<>(finished(ValidatorAuction.withdraw, (user == msg.sender))))
[2020-05-30 21:23:46,886 INFO  L979   opiaSpecLangObserver]: Successfully lexed: (<>(finished(ValidatorAuction.withdraw, (user == msg.sender))))
[2020-05-30 21:23:46,886 INFO  L981   opiaSpecLangObserver]: Successfully parsed: (<>(finished(ValidatorAuction.withdraw, (user == msg.sender))))
[2020-05-30 21:23:46,888 INFO  L599   opiaSpecLangObserver]: Parsed user==msg.sender to BinaryExpression[COMPEQ,IdentifierExpression[user,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,withdraw_ValidatorAuction>]]
[2020-05-30 21:23:46,888 INFO  L968   opiaSpecLangObserver]: Compiling: (<>(finished(ValidatorAuction.withdraw, (user == msg.sender))))
[2020-05-30 21:23:46,889 INFO  L970   opiaSpecLangObserver]: Compiled to ( <>AP(success_withdraw_ValidatorAuction0) )
Executed UtopiaSpecLang
[2020-05-30 21:23:46,897 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 09:23:46 PropertyContainer
[2020-05-30 21:23:46,897 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-05-30 21:23:46,897 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-05-30 21:23:46,897 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-05-30 21:23:46,897 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-05-30 21:23:46,898 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "L1-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:23:46" (1/2) ...
[2020-05-30 21:23:46,898 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-30 21:23:46,899 INFO  L120   oogiePrinterObserver]: Writing to file /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-30 21:23:46,911 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 09:23:46" (2/2) ...
[2020-05-30 21:23:46,911 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-05-30 21:23:46,912 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-05-30 21:23:46,912 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-05-30 21:23:46,912 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-05-30 21:23:46,912 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "L1-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:23:46" (1/2) ...
[2020-05-30 21:23:46,958 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-05-30 21:23:46,958 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-05-30 21:23:46,958 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-05-30 21:23:46,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-05-30 21:23:46,958 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership_Ownable
[2020-05-30 21:23:46,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership_Ownable
[2020-05-30 21:23:46,958 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLockerInterface_DepositLockerInterface_NoBaseCtor__success
[2020-05-30 21:23:46,958 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLockerInterface_DepositLockerInterface
[2020-05-30 21:23:46,959 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLockerInterface_DepositLockerInterface
[2020-05-30 21:23:46,959 INFO  L130     BoogieDeclarations]: Found specification of procedure slash_DepositLockerInterface
[2020-05-30 21:23:46,959 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLocker_DepositLocker_NoBaseCtor__success
[2020-05-30 21:23:46,959 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLocker_DepositLocker
[2020-05-30 21:23:46,960 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLocker_DepositLocker
[2020-05-30 21:23:46,960 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_DepositLocker__success
[2020-05-30 21:23:46,960 INFO  L130     BoogieDeclarations]: Found specification of procedure init_DepositLocker
[2020-05-30 21:23:46,960 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_DepositLocker
[2020-05-30 21:23:46,960 INFO  L130     BoogieDeclarations]: Found specification of procedure registerDepositor_DepositLocker
[2020-05-30 21:23:46,960 INFO  L138     BoogieDeclarations]: Found implementation of procedure registerDepositor_DepositLocker
[2020-05-30 21:23:46,960 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_DepositLocker
[2020-05-30 21:23:46,960 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_DepositLocker
[2020-05-30 21:23:46,960 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_DepositLocker
[2020-05-30 21:23:46,960 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_DepositLocker
[2020-05-30 21:23:46,960 INFO  L130     BoogieDeclarations]: Found specification of procedure slash_DepositLocker
[2020-05-30 21:23:46,960 INFO  L138     BoogieDeclarations]: Found implementation of procedure slash_DepositLocker
[2020-05-30 21:23:46,961 INFO  L130     BoogieDeclarations]: Found specification of procedure ValidatorAuction_ValidatorAuction_NoBaseCtor__success
[2020-05-30 21:23:46,961 INFO  L130     BoogieDeclarations]: Found specification of procedure ValidatorAuction_ValidatorAuction
[2020-05-30 21:23:46,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure ValidatorAuction_ValidatorAuction
[2020-05-30 21:23:46,961 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ValidatorAuction__success
[2020-05-30 21:23:46,961 INFO  L130     BoogieDeclarations]: Found specification of procedure bid_ValidatorAuction
[2020-05-30 21:23:46,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure bid_ValidatorAuction
[2020-05-30 21:23:46,961 INFO  L130     BoogieDeclarations]: Found specification of procedure startAuction_ValidatorAuction
[2020-05-30 21:23:46,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure startAuction_ValidatorAuction
[2020-05-30 21:23:46,961 INFO  L130     BoogieDeclarations]: Found specification of procedure depositBids_ValidatorAuction
[2020-05-30 21:23:46,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure depositBids_ValidatorAuction
[2020-05-30 21:23:46,961 INFO  L130     BoogieDeclarations]: Found specification of procedure closeAuction_ValidatorAuction
[2020-05-30 21:23:46,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure closeAuction_ValidatorAuction
[2020-05-30 21:23:46,961 INFO  L130     BoogieDeclarations]: Found specification of procedure addToWhitelist_ValidatorAuction
[2020-05-30 21:23:46,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure addToWhitelist_ValidatorAuction
[2020-05-30 21:23:46,962 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_ValidatorAuction
[2020-05-30 21:23:46,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_ValidatorAuction
[2020-05-30 21:23:46,962 INFO  L130     BoogieDeclarations]: Found specification of procedure currentPrice_ValidatorAuction
[2020-05-30 21:23:46,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure currentPrice_ValidatorAuction
[2020-05-30 21:23:46,962 INFO  L130     BoogieDeclarations]: Found specification of procedure priceAtElapsedTime_ValidatorAuction
[2020-05-30 21:23:46,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure priceAtElapsedTime_ValidatorAuction
[2020-05-30 21:23:46,962 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawAfterAuctionEnded_ValidatorAuction__success
[2020-05-30 21:23:46,962 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawAfterAuctionFailed_ValidatorAuction__success
[2020-05-30 21:23:46,962 INFO  L130     BoogieDeclarations]: Found specification of procedure transitionToDepositPending_ValidatorAuction__success
[2020-05-30 21:23:46,962 INFO  L130     BoogieDeclarations]: Found specification of procedure transitionToAuctionFailed_ValidatorAuction__success
[2020-05-30 21:23:46,962 INFO  L130     BoogieDeclarations]: Found specification of procedure isSenderContract_ValidatorAuction__success
[2020-05-30 21:23:46,963 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-05-30 21:23:46,963 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-05-30 21:23:46,963 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-05-30 21:23:46,963 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-05-30 21:23:46,963 INFO  L130     BoogieDeclarations]: Found specification of procedure isInitialised_pre__success
[2020-05-30 21:23:46,963 INFO  L130     BoogieDeclarations]: Found specification of procedure isDeposited_pre__success
[2020-05-30 21:23:46,963 INFO  L130     BoogieDeclarations]: Found specification of procedure isNotDeposited_pre__success
[2020-05-30 21:23:46,963 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyDepositorsProxy_pre__success
[2020-05-30 21:23:46,963 INFO  L130     BoogieDeclarations]: Found specification of procedure stateIs_pre__success
[2020-05-30 21:23:46,963 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-05-30 21:23:46,963 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-05-30 21:23:46,964 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DepositLockerInterface
[2020-05-30 21:23:46,964 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_DepositLockerInterface
[2020-05-30 21:23:46,964 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DepositLocker
[2020-05-30 21:23:46,964 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_DepositLocker
[2020-05-30 21:23:46,964 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ValidatorAuction
[2020-05-30 21:23:46,964 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-05-30 21:23:46,964 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-05-30 21:23:46,965 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-05-30 21:23:46,965 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-05-30 21:23:46,965 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-05-30 21:23:46,965 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership_Ownable__success
[2020-05-30 21:23:46,965 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership_Ownable__fail
[2020-05-30 21:23:46,965 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLockerInterface_DepositLockerInterface_NoBaseCtor__fail
[2020-05-30 21:23:46,965 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLockerInterface_DepositLockerInterface__success
[2020-05-30 21:23:46,966 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLockerInterface_DepositLockerInterface__fail
[2020-05-30 21:23:46,966 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLocker_DepositLocker_NoBaseCtor__fail
[2020-05-30 21:23:46,966 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLocker_DepositLocker__success
[2020-05-30 21:23:46,966 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLocker_DepositLocker__fail
[2020-05-30 21:23:46,966 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_DepositLocker__fail
[2020-05-30 21:23:46,966 INFO  L130     BoogieDeclarations]: Found specification of procedure init_DepositLocker__success
[2020-05-30 21:23:46,966 INFO  L130     BoogieDeclarations]: Found specification of procedure init_DepositLocker__fail
[2020-05-30 21:23:46,966 INFO  L130     BoogieDeclarations]: Found specification of procedure registerDepositor_DepositLocker__success
[2020-05-30 21:23:46,967 INFO  L130     BoogieDeclarations]: Found specification of procedure registerDepositor_DepositLocker__fail
[2020-05-30 21:23:46,967 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_DepositLocker__success
[2020-05-30 21:23:46,967 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_DepositLocker__fail
[2020-05-30 21:23:46,967 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_DepositLocker__success
[2020-05-30 21:23:46,967 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_DepositLocker__fail
[2020-05-30 21:23:46,967 INFO  L130     BoogieDeclarations]: Found specification of procedure slash_DepositLocker__success
[2020-05-30 21:23:46,967 INFO  L130     BoogieDeclarations]: Found specification of procedure slash_DepositLocker__fail
[2020-05-30 21:23:46,967 INFO  L130     BoogieDeclarations]: Found specification of procedure ValidatorAuction_ValidatorAuction_NoBaseCtor__fail
[2020-05-30 21:23:46,968 INFO  L130     BoogieDeclarations]: Found specification of procedure ValidatorAuction_ValidatorAuction__success
[2020-05-30 21:23:46,968 INFO  L130     BoogieDeclarations]: Found specification of procedure ValidatorAuction_ValidatorAuction__fail
[2020-05-30 21:23:46,968 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ValidatorAuction__fail
[2020-05-30 21:23:46,968 INFO  L130     BoogieDeclarations]: Found specification of procedure bid_ValidatorAuction__success
[2020-05-30 21:23:46,968 INFO  L130     BoogieDeclarations]: Found specification of procedure bid_ValidatorAuction__fail
[2020-05-30 21:23:46,968 INFO  L130     BoogieDeclarations]: Found specification of procedure startAuction_ValidatorAuction__success
[2020-05-30 21:23:46,968 INFO  L130     BoogieDeclarations]: Found specification of procedure startAuction_ValidatorAuction__fail
[2020-05-30 21:23:46,968 INFO  L130     BoogieDeclarations]: Found specification of procedure depositBids_ValidatorAuction__success
[2020-05-30 21:23:46,969 INFO  L130     BoogieDeclarations]: Found specification of procedure depositBids_ValidatorAuction__fail
[2020-05-30 21:23:46,969 INFO  L130     BoogieDeclarations]: Found specification of procedure closeAuction_ValidatorAuction__success
[2020-05-30 21:23:46,969 INFO  L130     BoogieDeclarations]: Found specification of procedure closeAuction_ValidatorAuction__fail
[2020-05-30 21:23:46,969 INFO  L130     BoogieDeclarations]: Found specification of procedure addToWhitelist_ValidatorAuction__success
[2020-05-30 21:23:46,969 INFO  L130     BoogieDeclarations]: Found specification of procedure addToWhitelist_ValidatorAuction__fail
[2020-05-30 21:23:46,969 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_ValidatorAuction__success
[2020-05-30 21:23:46,969 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_ValidatorAuction__fail
[2020-05-30 21:23:46,970 INFO  L130     BoogieDeclarations]: Found specification of procedure currentPrice_ValidatorAuction__success
[2020-05-30 21:23:46,970 INFO  L130     BoogieDeclarations]: Found specification of procedure currentPrice_ValidatorAuction__fail
[2020-05-30 21:23:46,970 INFO  L130     BoogieDeclarations]: Found specification of procedure priceAtElapsedTime_ValidatorAuction__success
[2020-05-30 21:23:46,970 INFO  L130     BoogieDeclarations]: Found specification of procedure priceAtElapsedTime_ValidatorAuction__fail
[2020-05-30 21:23:46,970 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawAfterAuctionEnded_ValidatorAuction__fail
[2020-05-30 21:23:46,970 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawAfterAuctionFailed_ValidatorAuction__fail
[2020-05-30 21:23:46,970 INFO  L130     BoogieDeclarations]: Found specification of procedure transitionToDepositPending_ValidatorAuction__fail
[2020-05-30 21:23:46,970 INFO  L130     BoogieDeclarations]: Found specification of procedure transitionToAuctionFailed_ValidatorAuction__fail
[2020-05-30 21:23:46,970 INFO  L130     BoogieDeclarations]: Found specification of procedure isSenderContract_ValidatorAuction__fail
[2020-05-30 21:23:46,970 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-05-30 21:23:46,970 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-05-30 21:23:46,971 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-05-30 21:23:46,971 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-05-30 21:23:46,971 INFO  L130     BoogieDeclarations]: Found specification of procedure isInitialised_pre__fail
[2020-05-30 21:23:46,971 INFO  L130     BoogieDeclarations]: Found specification of procedure isDeposited_pre__fail
[2020-05-30 21:23:46,971 INFO  L130     BoogieDeclarations]: Found specification of procedure isNotDeposited_pre__fail
[2020-05-30 21:23:46,971 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyDepositorsProxy_pre__fail
[2020-05-30 21:23:46,971 INFO  L130     BoogieDeclarations]: Found specification of procedure stateIs_pre__fail
[2020-05-30 21:23:46,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-05-30 21:23:46,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-05-30 21:23:46,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-05-30 21:23:46,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-05-30 21:23:46,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-05-30 21:23:46,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-05-30 21:23:46,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership_Ownable__fail
[2020-05-30 21:23:46,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership_Ownable__success
[2020-05-30 21:23:46,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLockerInterface_DepositLockerInterface_NoBaseCtor__fail
[2020-05-30 21:23:46,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLockerInterface_DepositLockerInterface_NoBaseCtor__success
[2020-05-30 21:23:46,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLockerInterface_DepositLockerInterface__fail
[2020-05-30 21:23:46,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLockerInterface_DepositLockerInterface__success
[2020-05-30 21:23:46,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLocker_DepositLocker_NoBaseCtor__fail
[2020-05-30 21:23:46,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLocker_DepositLocker_NoBaseCtor__success
[2020-05-30 21:23:46,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLocker_DepositLocker__fail
[2020-05-30 21:23:46,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLocker_DepositLocker__success
[2020-05-30 21:23:46,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_DepositLocker__fail
[2020-05-30 21:23:46,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_DepositLocker__success
[2020-05-30 21:23:46,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_DepositLocker__fail
[2020-05-30 21:23:46,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_DepositLocker__success
[2020-05-30 21:23:46,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure registerDepositor_DepositLocker__fail
[2020-05-30 21:23:46,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure registerDepositor_DepositLocker__success
[2020-05-30 21:23:46,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_DepositLocker__fail
[2020-05-30 21:23:46,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_DepositLocker__success
[2020-05-30 21:23:46,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_DepositLocker__fail
[2020-05-30 21:23:46,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_DepositLocker__success
[2020-05-30 21:23:46,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure slash_DepositLocker__fail
[2020-05-30 21:23:46,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure slash_DepositLocker__success
[2020-05-30 21:23:46,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure ValidatorAuction_ValidatorAuction_NoBaseCtor__fail
[2020-05-30 21:23:46,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure ValidatorAuction_ValidatorAuction_NoBaseCtor__success
[2020-05-30 21:23:46,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure ValidatorAuction_ValidatorAuction__fail
[2020-05-30 21:23:46,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure ValidatorAuction_ValidatorAuction__success
[2020-05-30 21:23:46,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ValidatorAuction__fail
[2020-05-30 21:23:46,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ValidatorAuction__success
[2020-05-30 21:23:46,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure bid_ValidatorAuction__fail
[2020-05-30 21:23:46,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure bid_ValidatorAuction__success
[2020-05-30 21:23:46,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure startAuction_ValidatorAuction__fail
[2020-05-30 21:23:46,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure startAuction_ValidatorAuction__success
[2020-05-30 21:23:46,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure depositBids_ValidatorAuction__fail
[2020-05-30 21:23:46,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure depositBids_ValidatorAuction__success
[2020-05-30 21:23:46,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure closeAuction_ValidatorAuction__fail
[2020-05-30 21:23:46,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure closeAuction_ValidatorAuction__success
[2020-05-30 21:23:46,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure addToWhitelist_ValidatorAuction__fail
[2020-05-30 21:23:46,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure addToWhitelist_ValidatorAuction__success
[2020-05-30 21:23:46,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_ValidatorAuction__fail
[2020-05-30 21:23:46,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_ValidatorAuction__success
[2020-05-30 21:23:46,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure currentPrice_ValidatorAuction__fail
[2020-05-30 21:23:46,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure currentPrice_ValidatorAuction__success
[2020-05-30 21:23:46,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure priceAtElapsedTime_ValidatorAuction__fail
[2020-05-30 21:23:46,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure priceAtElapsedTime_ValidatorAuction__success
[2020-05-30 21:23:46,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawAfterAuctionEnded_ValidatorAuction__fail
[2020-05-30 21:23:46,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawAfterAuctionEnded_ValidatorAuction__success
[2020-05-30 21:23:46,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawAfterAuctionFailed_ValidatorAuction__fail
[2020-05-30 21:23:46,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawAfterAuctionFailed_ValidatorAuction__success
[2020-05-30 21:23:46,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure transitionToDepositPending_ValidatorAuction__fail
[2020-05-30 21:23:46,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure transitionToDepositPending_ValidatorAuction__success
[2020-05-30 21:23:46,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure transitionToAuctionFailed_ValidatorAuction__fail
[2020-05-30 21:23:46,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure transitionToAuctionFailed_ValidatorAuction__success
[2020-05-30 21:23:46,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure isSenderContract_ValidatorAuction__fail
[2020-05-30 21:23:46,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure isSenderContract_ValidatorAuction__success
[2020-05-30 21:23:46,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-05-30 21:23:46,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-05-30 21:23:46,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-05-30 21:23:46,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-05-30 21:23:46,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-05-30 21:23:46,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-05-30 21:23:46,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-05-30 21:23:46,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-05-30 21:23:46,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure isInitialised_pre__fail
[2020-05-30 21:23:46,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure isInitialised_pre__success
[2020-05-30 21:23:46,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure isDeposited_pre__fail
[2020-05-30 21:23:46,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure isDeposited_pre__success
[2020-05-30 21:23:46,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure isNotDeposited_pre__fail
[2020-05-30 21:23:46,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure isNotDeposited_pre__success
[2020-05-30 21:23:46,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyDepositorsProxy_pre__fail
[2020-05-30 21:23:46,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyDepositorsProxy_pre__success
[2020-05-30 21:23:46,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure stateIs_pre__fail
[2020-05-30 21:23:46,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure stateIs_pre__success
[2020-05-30 21:23:46,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-05-30 21:23:46,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-05-30 21:23:46,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DepositLockerInterface
[2020-05-30 21:23:46,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_DepositLockerInterface
[2020-05-30 21:23:46,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DepositLocker
[2020-05-30 21:23:46,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_DepositLocker
[2020-05-30 21:23:46,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ValidatorAuction
[2020-05-30 21:23:46,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-05-30 21:23:46,978 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-05-30 21:23:46,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-05-30 21:23:47,105 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 21:23:47,387 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 21:23:47,516 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 21:23:47,530 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 21:23:47,561 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-05-30 21:23:47,561 INFO  L286             CfgBuilder]: Removed 4 assue(true) statements.
[2020-05-30 21:23:47,563 INFO  L202        PluginConnector]: Adding new model L1-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 09:23:47 BoogieIcfgContainer
[2020-05-30 21:23:47,563 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 09:23:46" (2/2) ...
[2020-05-30 21:23:47,563 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-05-30 21:23:47,563 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@2fcd6b8e and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 09:23:47, skipping insertion in model container
[2020-05-30 21:23:47,563 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-05-30 21:23:47,564 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-05-30 21:23:47,564 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-05-30 21:23:47,565 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-05-30 21:23:47,566 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "L1-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:23:46" (1/3) ...
[2020-05-30 21:23:47,566 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@7d6560eb and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 09:23:47, skipping insertion in model container
[2020-05-30 21:23:47,566 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 09:23:46" (2/3) ...
No working directory specified, using /Users/jon/Documents/Research/devUltimate/ltl2ba
Starting monitored process 1 with /Users/jon/Documents/Research/devUltimate/ltl2ba -f  ( <>a ) && ! ( ( [] ( b -> ( <>c ) ) ) )  (exit command is null, workingDir is null)
[2020-05-30 21:23:47,607 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 09:23:47 NWAContainer
[2020-05-30 21:23:47,607 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-05-30 21:23:47,607 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-05-30 21:23:47,608 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-05-30 21:23:47,608 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-05-30 21:23:47,609 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "L1-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 09:23:47" (3/4) ...
[2020-05-30 21:23:47,610 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@1d395666 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 09:23:47, skipping insertion in model container
[2020-05-30 21:23:47,610 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 09:23:47" (4/4) ...
[2020-05-30 21:23:47,613 INFO  L104   BuchiProductObserver]: Initial property automaton 4 locations, 9 edges
[2020-05-30 21:23:47,617 INFO  L110   BuchiProductObserver]: Initial RCFG 2387 locations, 2908 edges
[2020-05-30 21:23:47,617 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-05-30 21:23:47,628 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-05-30 21:23:50,868 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-05-30 21:23:50,881 INFO  L110   BuchiProductObserver]: BuchiProgram size 10890 locations, 27331 edges
[2020-05-30 21:23:50,881 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 09:23:50 BoogieIcfgContainer
[2020-05-30 21:23:50,881 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-05-30 21:23:50,882 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-05-30 21:23:50,882 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-05-30 21:23:50,883 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-05-30 21:23:50,883 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 09:23:50" (1/1) ...
[2020-05-30 21:23:51,144 INFO  L313           BlockEncoder]: Initial Icfg 10890 locations, 27331 edges
[2020-05-30 21:23:51,144 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-05-30 21:23:51,144 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-05-30 21:23:51,145 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-05-30 21:23:51,145 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-05-30 21:23:51,167 INFO  L70    emoveInfeasibleEdges]: Removed 208 edges and 22 locations because of local infeasibility
[2020-05-30 21:23:51,184 INFO  L70        RemoveSinkStates]: Removed 6 edges and 2 locations by removing sink states
[2020-05-30 21:23:51,209 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-05-30 21:23:51,217 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-05-30 21:23:51,225 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-05-30 21:23:51,225 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-05-30 21:23:51,232 INFO  L313           BlockEncoder]: Encoded RCFG 10806 locations, 26987 edges
[2020-05-30 21:23:51,233 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 30.05 09:23:51 BasicIcfg
[2020-05-30 21:23:51,233 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-05-30 21:23:51,233 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-05-30 21:23:51,233 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-05-30 21:23:51,235 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-05-30 21:23:51,236 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 21:23:51,236 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L1-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:23:46" (1/6) ...
[2020-05-30 21:23:51,238 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3dda873 and model type L1-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 30.05 09:23:51, skipping insertion in model container
[2020-05-30 21:23:51,238 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 21:23:51,238 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 09:23:46" (2/6) ...
[2020-05-30 21:23:51,238 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3dda873 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 30.05 09:23:51, skipping insertion in model container
[2020-05-30 21:23:51,238 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 21:23:51,238 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L1-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 09:23:47" (3/6) ...
[2020-05-30 21:23:51,238 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3dda873 and model type L1-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 30.05 09:23:51, skipping insertion in model container
[2020-05-30 21:23:51,238 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 21:23:51,238 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 09:23:47" (4/6) ...
[2020-05-30 21:23:51,239 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3dda873 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 30.05 09:23:51, skipping insertion in model container
[2020-05-30 21:23:51,239 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 21:23:51,239 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 09:23:50" (5/6) ...
[2020-05-30 21:23:51,239 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3dda873 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 30.05 09:23:51, skipping insertion in model container
[2020-05-30 21:23:51,239 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 21:23:51,239 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 30.05 09:23:51" (6/6) ...
[2020-05-30 21:23:51,240 INFO  L404   chiAutomizerObserver]: Analyzing ICFG L1-ValidatorAuction.bpl_BEv2
[2020-05-30 21:23:51,271 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-05-30 21:23:51,271 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-05-30 21:23:51,271 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-05-30 21:23:51,272 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-05-30 21:23:51,272 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-05-30 21:23:51,272 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-05-30 21:23:51,272 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-05-30 21:23:51,272 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-05-30 21:23:51,272 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-05-30 21:23:51,348 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10806 states.
[2020-05-30 21:23:51,455 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:23:51,455 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:23:51,455 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:23:51,464 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:23:51,464 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:23:51,464 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-05-30 21:23:51,464 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10806 states.
[2020-05-30 21:23:51,522 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:23:51,523 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:23:51,523 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:23:51,525 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:23:51,525 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_withdraw_ValidatorAuction0 := false;
[L7]                 fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                 success_send__success0 := false;
[L7]                 success_closeAuction_ValidatorAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc user;
[L5032]              assume null == 0;
[L5033]  CALL        call this := FreshRefGenerator__success();
[L1807]              havoc newRef;
[L1808]              assume Alloc[newRef] == false;
[L1809]              Alloc[newRef] := true;
[L1810]              assume newRef != null;
[L5033]  RET         call this := FreshRefGenerator__success();
[L5034]              assume now >= 0;
[L5035]              assume DType[this] == ValidatorAuction;
[L5036]              gas := gas - 53000;
[L5037]  CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]               havoc __exception;
[L753]               revert := false;
[L754]   COND FALSE  !(__exception)
[L796]   CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]              assume msgsender_MSG != null;
[L1828]              Balance[this] := 0;
[L1829]              owner_Ownable[this] := null;
[L1830]              owner_Ownable[this] := msgsender_MSG;
[L1848]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  COND FALSE  !(revert)
[L2878]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND TRUE   revert
[L796]   RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]               assume !revert && gas >= 0;
[L5037]  RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]              assume !revert && gas >= 0;

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND TRUE   choice == 9
[L4937]              gas := gas - 21000;
[L4938]  COND FALSE  !(gas >= 0)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:23:51,541 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:23:51,541 INFO  L82        PathProgramCache]: Analyzing trace with hash 812008421, now seen corresponding path program 1 times
[2020-05-30 21:23:51,545 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:23:51,571 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:23:51,617 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-30 21:23:51,619 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:23:51,619 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-30 21:23:52,094 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:23:52,112 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 21:23:52,112 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-30 21:23:52,114 INFO  L87              Difference]: Start difference. First operand 10806 states. Second operand 4 states.
[2020-05-30 21:23:53,782 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:23:53,782 INFO  L93              Difference]: Finished difference Result 7506 states and 12281 transitions.
[2020-05-30 21:23:53,782 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-30 21:23:53,784 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7506 states and 12281 transitions.
[2020-05-30 21:23:53,824 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:23:53,881 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7506 states to 7506 states and 12281 transitions.
[2020-05-30 21:23:53,881 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 6
[2020-05-30 21:23:53,884 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 460
[2020-05-30 21:23:53,884 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7506 states and 12281 transitions.
[2020-05-30 21:23:53,906 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:23:53,906 INFO  L728         BuchiCegarLoop]: Abstraction has 7506 states and 12281 transitions.
[2020-05-30 21:23:53,931 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7506 states and 12281 transitions.
[2020-05-30 21:23:54,046 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7506 to 7506.
[2020-05-30 21:23:54,047 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7506 states.
[2020-05-30 21:23:54,064 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7506 states to 7506 states and 12281 transitions.
[2020-05-30 21:23:54,066 INFO  L751         BuchiCegarLoop]: Abstraction has 7506 states and 12281 transitions.
[2020-05-30 21:23:54,066 INFO  L631         BuchiCegarLoop]: Abstraction has 7506 states and 12281 transitions.
[2020-05-30 21:23:54,066 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-05-30 21:23:54,066 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7506 states and 12281 transitions.
[2020-05-30 21:23:54,081 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:23:54,081 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:23:54,082 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:23:54,083 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:23:54,083 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND TRUE   revert
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND TRUE   !(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4)
[L3604]                    revert := true;
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND TRUE   !(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4)
[L3604]                    revert := true;
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:23:54,087 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:23:54,087 INFO  L82        PathProgramCache]: Analyzing trace with hash 1804423629, now seen corresponding path program 1 times
[2020-05-30 21:23:54,088 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:23:54,099 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:23:54,119 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-30 21:23:54,119 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:23:54,119 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-30 21:23:54,120 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:23:54,121 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 21:23:54,121 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 21:23:54,121 INFO  L87              Difference]: Start difference. First operand 7506 states and 12281 transitions. cyclomatic complexity: 4787 Second operand 3 states.
[2020-05-30 21:23:54,378 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:23:54,378 INFO  L93              Difference]: Finished difference Result 9254 states and 15098 transitions.
[2020-05-30 21:23:54,378 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 21:23:54,378 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9254 states and 15098 transitions.
[2020-05-30 21:23:54,418 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:23:54,472 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9254 states to 9254 states and 15098 transitions.
[2020-05-30 21:23:54,472 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 676
[2020-05-30 21:23:54,474 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 676
[2020-05-30 21:23:54,474 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9254 states and 15098 transitions.
[2020-05-30 21:23:54,490 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:23:54,491 INFO  L728         BuchiCegarLoop]: Abstraction has 9254 states and 15098 transitions.
[2020-05-30 21:23:54,503 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9254 states and 15098 transitions.
[2020-05-30 21:23:54,609 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9254 to 8698.
[2020-05-30 21:23:54,609 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8698 states.
[2020-05-30 21:23:54,632 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8698 states to 8698 states and 14191 transitions.
[2020-05-30 21:23:54,632 INFO  L751         BuchiCegarLoop]: Abstraction has 8698 states and 14191 transitions.
[2020-05-30 21:23:54,632 INFO  L631         BuchiCegarLoop]: Abstraction has 8698 states and 14191 transitions.
[2020-05-30 21:23:54,632 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-05-30 21:23:54,632 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8698 states and 14191 transitions.
[2020-05-30 21:23:54,655 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:23:54,655 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:23:54,655 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:23:54,658 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:23:54,658 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND TRUE   !(_auctionDurationInDays_s578 > 0)
[L2772]                    revert := true;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND TRUE   !(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4)
[L3604]                    revert := true;
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND TRUE   !(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4)
[L3604]                    revert := true;
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:23:54,662 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:23:54,663 INFO  L82        PathProgramCache]: Analyzing trace with hash 570258127, now seen corresponding path program 1 times
[2020-05-30 21:23:54,663 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:23:54,682 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:23:54,729 INFO  L134       CoverageAnalysis]: Checked inductivity of 17 backedges. 0 proven. 1 refuted. 0 times theorem prover too weak. 16 trivial. 0 not checked.
[2020-05-30 21:23:54,730 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:23:54,730 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [4] total 4
[2020-05-30 21:23:54,730 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:23:54,730 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 21:23:54,731 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-30 21:23:54,731 INFO  L87              Difference]: Start difference. First operand 8698 states and 14191 transitions. cyclomatic complexity: 5505 Second operand 4 states.
[2020-05-30 21:23:55,523 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:23:55,523 INFO  L93              Difference]: Finished difference Result 8446 states and 9609 transitions.
[2020-05-30 21:23:55,523 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-30 21:23:55,523 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8446 states and 9609 transitions.
[2020-05-30 21:23:55,538 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:23:55,562 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8446 states to 8446 states and 9609 transitions.
[2020-05-30 21:23:55,562 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 593
[2020-05-30 21:23:55,563 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 593
[2020-05-30 21:23:55,563 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8446 states and 9609 transitions.
[2020-05-30 21:23:55,569 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:23:55,569 INFO  L728         BuchiCegarLoop]: Abstraction has 8446 states and 9609 transitions.
[2020-05-30 21:23:55,575 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8446 states and 9609 transitions.
[2020-05-30 21:23:55,646 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8446 to 8438.
[2020-05-30 21:23:55,647 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8438 states.
[2020-05-30 21:23:55,656 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8438 states to 8438 states and 9601 transitions.
[2020-05-30 21:23:55,656 INFO  L751         BuchiCegarLoop]: Abstraction has 8438 states and 9601 transitions.
[2020-05-30 21:23:55,656 INFO  L631         BuchiCegarLoop]: Abstraction has 8438 states and 9601 transitions.
[2020-05-30 21:23:55,656 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-05-30 21:23:55,656 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8438 states and 9601 transitions.
[2020-05-30 21:23:55,666 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:23:55,666 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:23:55,666 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:23:55,668 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:23:55,668 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND TRUE   !(_auctionDurationInDays_s578 > 0)
[L2772]                    revert := true;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND TRUE   revert
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND TRUE   !(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4)
[L3604]                    revert := true;
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND TRUE   !(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1)
[L3431]                    revert := true;
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND TRUE   !(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4)
[L3604]                    revert := true;
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:23:55,671 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:23:55,672 INFO  L82        PathProgramCache]: Analyzing trace with hash 1676748927, now seen corresponding path program 1 times
[2020-05-30 21:23:55,672 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:23:55,685 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:23:55,717 INFO  L134       CoverageAnalysis]: Checked inductivity of 36 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 36 trivial. 0 not checked.
[2020-05-30 21:23:55,717 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:23:55,717 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-30 21:23:55,718 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:23:55,718 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 21:23:55,718 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 21:23:55,718 INFO  L87              Difference]: Start difference. First operand 8438 states and 9601 transitions. cyclomatic complexity: 1175 Second operand 3 states.
[2020-05-30 21:23:55,822 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:23:55,822 INFO  L93              Difference]: Finished difference Result 9282 states and 10341 transitions.
[2020-05-30 21:23:55,822 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 21:23:55,823 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9282 states and 10341 transitions.
[2020-05-30 21:23:55,841 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:23:55,878 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9282 states to 8606 states and 9495 transitions.
[2020-05-30 21:23:55,878 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 593
[2020-05-30 21:23:55,879 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 653
[2020-05-30 21:23:55,879 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8606 states and 9495 transitions.
[2020-05-30 21:23:55,886 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:23:55,886 INFO  L728         BuchiCegarLoop]: Abstraction has 8606 states and 9495 transitions.
[2020-05-30 21:23:55,896 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8606 states and 9495 transitions.
[2020-05-30 21:23:55,968 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8606 to 7884.
[2020-05-30 21:23:55,969 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7884 states.
[2020-05-30 21:23:55,980 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7884 states to 7884 states and 8621 transitions.
[2020-05-30 21:23:55,980 INFO  L751         BuchiCegarLoop]: Abstraction has 7884 states and 8621 transitions.
[2020-05-30 21:23:55,980 INFO  L631         BuchiCegarLoop]: Abstraction has 7884 states and 8621 transitions.
[2020-05-30 21:23:55,980 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-05-30 21:23:55,980 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7884 states and 8621 transitions.
[2020-05-30 21:23:55,989 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:23:55,989 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:23:55,989 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:23:55,992 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:23:55,992 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND FALSE  !(Balance[from] >= amount)
[L4507]                    success := false;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND FALSE  !(Balance[from] >= amount)
[L4507]                    success := false;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:23:55,997 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:23:55,997 INFO  L82        PathProgramCache]: Analyzing trace with hash 85745023, now seen corresponding path program 1 times
[2020-05-30 21:23:55,998 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:23:56,021 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:23:56,068 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-05-30 21:23:56,069 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:23:56,069 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-30 21:23:56,069 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:23:56,069 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 21:23:56,069 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-30 21:23:56,070 INFO  L87              Difference]: Start difference. First operand 7884 states and 8621 transitions. cyclomatic complexity: 749 Second operand 4 states.
[2020-05-30 21:23:56,158 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:23:56,158 INFO  L93              Difference]: Finished difference Result 7924 states and 8663 transitions.
[2020-05-30 21:23:56,158 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-30 21:23:56,159 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7924 states and 8663 transitions.
[2020-05-30 21:23:56,173 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:23:56,195 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7924 states to 7916 states and 8655 transitions.
[2020-05-30 21:23:56,195 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 556
[2020-05-30 21:23:56,195 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 556
[2020-05-30 21:23:56,195 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7916 states and 8655 transitions.
[2020-05-30 21:23:56,202 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:23:56,202 INFO  L728         BuchiCegarLoop]: Abstraction has 7916 states and 8655 transitions.
[2020-05-30 21:23:56,210 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7916 states and 8655 transitions.
[2020-05-30 21:23:56,273 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7916 to 7916.
[2020-05-30 21:23:56,273 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7916 states.
[2020-05-30 21:23:56,281 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7916 states to 7916 states and 8655 transitions.
[2020-05-30 21:23:56,281 INFO  L751         BuchiCegarLoop]: Abstraction has 7916 states and 8655 transitions.
[2020-05-30 21:23:56,281 INFO  L631         BuchiCegarLoop]: Abstraction has 7916 states and 8655 transitions.
[2020-05-30 21:23:56,281 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-05-30 21:23:56,282 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7916 states and 8655 transitions.
[2020-05-30 21:23:56,294 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:23:56,294 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:23:56,294 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:23:56,296 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:23:56,296 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND TRUE   DType[to] == DepositLockerInterface
[L4272]                    assume amount == 0;
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND TRUE   DType[to] == DepositLockerInterface
[L4272]                    assume amount == 0;
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:23:56,300 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:23:56,300 INFO  L82        PathProgramCache]: Analyzing trace with hash 514073252, now seen corresponding path program 1 times
[2020-05-30 21:23:56,301 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:23:56,361 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:23:56,463 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-05-30 21:23:56,463 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:23:56,463 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-05-30 21:23:56,464 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:23:56,464 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-05-30 21:23:56,464 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=12, Invalid=30, Unknown=0, NotChecked=0, Total=42
[2020-05-30 21:23:56,465 INFO  L87              Difference]: Start difference. First operand 7916 states and 8655 transitions. cyclomatic complexity: 751 Second operand 7 states.
[2020-05-30 21:23:56,608 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:23:56,608 INFO  L93              Difference]: Finished difference Result 7964 states and 8705 transitions.
[2020-05-30 21:23:56,608 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-05-30 21:23:56,608 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7964 states and 8705 transitions.
[2020-05-30 21:23:56,623 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:23:56,648 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7964 states to 7964 states and 8705 transitions.
[2020-05-30 21:23:56,648 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 567
[2020-05-30 21:23:56,648 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 567
[2020-05-30 21:23:56,648 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7964 states and 8705 transitions.
[2020-05-30 21:23:56,654 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:23:56,654 INFO  L728         BuchiCegarLoop]: Abstraction has 7964 states and 8705 transitions.
[2020-05-30 21:23:56,661 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7964 states and 8705 transitions.
[2020-05-30 21:23:56,709 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7964 to 7932.
[2020-05-30 21:23:56,709 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7932 states.
[2020-05-30 21:23:56,720 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7932 states to 7932 states and 8671 transitions.
[2020-05-30 21:23:56,720 INFO  L751         BuchiCegarLoop]: Abstraction has 7932 states and 8671 transitions.
[2020-05-30 21:23:56,720 INFO  L631         BuchiCegarLoop]: Abstraction has 7932 states and 8671 transitions.
[2020-05-30 21:23:56,720 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-05-30 21:23:56,721 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7932 states and 8671 transitions.
[2020-05-30 21:23:56,728 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:23:56,729 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:23:56,729 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:23:56,731 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:23:56,731 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND TRUE   DType[to] == DepositLocker
[L4264]        CALL        call FallbackMethod_DepositLocker__success(to, from, amount);
[L4264]        RET         call FallbackMethod_DepositLocker__success(to, from, amount);
[L4265]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND TRUE   DType[to] == DepositLocker
[L4264]        CALL        call FallbackMethod_DepositLocker__success(to, from, amount);
[L4264]        RET         call FallbackMethod_DepositLocker__success(to, from, amount);
[L4265]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:23:56,735 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:23:56,736 INFO  L82        PathProgramCache]: Analyzing trace with hash -676183563, now seen corresponding path program 1 times
[2020-05-30 21:23:56,736 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:23:56,756 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:23:56,823 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-05-30 21:23:56,823 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:23:56,824 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-05-30 21:23:56,824 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:23:56,824 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-30 21:23:56,825 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-30 21:23:56,825 INFO  L87              Difference]: Start difference. First operand 7932 states and 8671 transitions. cyclomatic complexity: 751 Second operand 8 states.
[2020-05-30 21:23:57,125 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:23:57,125 INFO  L93              Difference]: Finished difference Result 8056 states and 8803 transitions.
[2020-05-30 21:23:57,125 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-05-30 21:23:57,126 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8056 states and 8803 transitions.
[2020-05-30 21:23:57,140 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:23:57,158 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8056 states to 7980 states and 8721 transitions.
[2020-05-30 21:23:57,159 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 571
[2020-05-30 21:23:57,159 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 571
[2020-05-30 21:23:57,159 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7980 states and 8721 transitions.
[2020-05-30 21:23:57,164 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:23:57,164 INFO  L728         BuchiCegarLoop]: Abstraction has 7980 states and 8721 transitions.
[2020-05-30 21:23:57,172 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7980 states and 8721 transitions.
[2020-05-30 21:23:57,217 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7980 to 7932.
[2020-05-30 21:23:57,218 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7932 states.
[2020-05-30 21:23:57,225 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7932 states to 7932 states and 8671 transitions.
[2020-05-30 21:23:57,225 INFO  L751         BuchiCegarLoop]: Abstraction has 7932 states and 8671 transitions.
[2020-05-30 21:23:57,225 INFO  L631         BuchiCegarLoop]: Abstraction has 7932 states and 8671 transitions.
[2020-05-30 21:23:57,225 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-05-30 21:23:57,225 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7932 states and 8671 transitions.
[2020-05-30 21:23:57,233 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:23:57,234 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:23:57,234 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:23:57,235 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:23:57,235 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:23:57,239 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:23:57,239 INFO  L82        PathProgramCache]: Analyzing trace with hash 2024418920, now seen corresponding path program 1 times
[2020-05-30 21:23:57,240 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:23:57,256 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:23:57,375 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-05-30 21:23:57,375 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:23:57,375 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-05-30 21:23:57,376 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:23:57,376 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:23:57,376 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=107, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:23:57,376 INFO  L87              Difference]: Start difference. First operand 7932 states and 8671 transitions. cyclomatic complexity: 751 Second operand 12 states.
[2020-05-30 21:23:59,712 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:23:59,712 INFO  L93              Difference]: Finished difference Result 8332 states and 9228 transitions.
[2020-05-30 21:23:59,712 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-30 21:23:59,713 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8332 states and 9228 transitions.
[2020-05-30 21:23:59,730 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:23:59,748 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8332 states to 8332 states and 9228 transitions.
[2020-05-30 21:23:59,749 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 653
[2020-05-30 21:23:59,749 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 653
[2020-05-30 21:23:59,749 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8332 states and 9228 transitions.
[2020-05-30 21:23:59,754 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:23:59,754 INFO  L728         BuchiCegarLoop]: Abstraction has 8332 states and 9228 transitions.
[2020-05-30 21:23:59,760 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8332 states and 9228 transitions.
[2020-05-30 21:23:59,817 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8332 to 8114.
[2020-05-30 21:23:59,817 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8114 states.
[2020-05-30 21:23:59,825 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8114 states to 8114 states and 8907 transitions.
[2020-05-30 21:23:59,825 INFO  L751         BuchiCegarLoop]: Abstraction has 8114 states and 8907 transitions.
[2020-05-30 21:23:59,825 INFO  L631         BuchiCegarLoop]: Abstraction has 8114 states and 8907 transitions.
[2020-05-30 21:23:59,825 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-05-30 21:23:59,825 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8114 states and 8907 transitions.
[2020-05-30 21:23:59,833 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:23:59,833 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:23:59,833 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:23:59,834 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:23:59,835 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:23:59,838 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:23:59,839 INFO  L82        PathProgramCache]: Analyzing trace with hash 1321847367, now seen corresponding path program 1 times
[2020-05-30 21:23:59,839 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:23:59,852 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:23:59,944 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 38 trivial. 0 not checked.
[2020-05-30 21:23:59,944 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:23:59,944 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 21:23:59,944 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:23:59,945 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:23:59,945 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=109, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:23:59,945 INFO  L87              Difference]: Start difference. First operand 8114 states and 8907 transitions. cyclomatic complexity: 807 Second operand 12 states.
[2020-05-30 21:24:02,601 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:24:02,601 INFO  L93              Difference]: Finished difference Result 8256 states and 9122 transitions.
[2020-05-30 21:24:02,601 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-05-30 21:24:02,601 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8256 states and 9122 transitions.
[2020-05-30 21:24:02,611 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:24:02,624 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8256 states to 8256 states and 9122 transitions.
[2020-05-30 21:24:02,624 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 640
[2020-05-30 21:24:02,624 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 640
[2020-05-30 21:24:02,624 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8256 states and 9122 transitions.
[2020-05-30 21:24:02,627 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:24:02,627 INFO  L728         BuchiCegarLoop]: Abstraction has 8256 states and 9122 transitions.
[2020-05-30 21:24:02,632 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8256 states and 9122 transitions.
[2020-05-30 21:24:02,669 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8256 to 8038.
[2020-05-30 21:24:02,669 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8038 states.
[2020-05-30 21:24:02,676 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8038 states to 8038 states and 8818 transitions.
[2020-05-30 21:24:02,677 INFO  L751         BuchiCegarLoop]: Abstraction has 8038 states and 8818 transitions.
[2020-05-30 21:24:02,677 INFO  L631         BuchiCegarLoop]: Abstraction has 8038 states and 8818 transitions.
[2020-05-30 21:24:02,677 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-05-30 21:24:02,677 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8038 states and 8818 transitions.
[2020-05-30 21:24:02,685 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:24:02,685 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:24:02,685 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:24:02,687 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:24:02,687 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND FALSE  !(Balance[from] >= amount)
[L4507]                    success := false;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:24:02,691 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:24:02,691 INFO  L82        PathProgramCache]: Analyzing trace with hash 426026098, now seen corresponding path program 1 times
[2020-05-30 21:24:02,692 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:24:02,710 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:24:02,798 INFO  L134       CoverageAnalysis]: Checked inductivity of 83 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 81 trivial. 0 not checked.
[2020-05-30 21:24:02,798 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:24:02,799 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 21:24:02,799 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:24:02,799 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:24:02,799 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=107, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:24:02,799 INFO  L87              Difference]: Start difference. First operand 8038 states and 8818 transitions. cyclomatic complexity: 794 Second operand 12 states.
[2020-05-30 21:24:04,783 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:24:04,783 INFO  L93              Difference]: Finished difference Result 8274 states and 9120 transitions.
[2020-05-30 21:24:04,783 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-30 21:24:04,783 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8274 states and 9120 transitions.
[2020-05-30 21:24:04,794 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:24:04,806 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8274 states to 8274 states and 9120 transitions.
[2020-05-30 21:24:04,807 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 655
[2020-05-30 21:24:04,807 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 655
[2020-05-30 21:24:04,807 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8274 states and 9120 transitions.
[2020-05-30 21:24:04,810 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:24:04,810 INFO  L728         BuchiCegarLoop]: Abstraction has 8274 states and 9120 transitions.
[2020-05-30 21:24:04,815 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8274 states and 9120 transitions.
[2020-05-30 21:24:04,844 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8274 to 7845.
[2020-05-30 21:24:04,844 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7845 states.
[2020-05-30 21:24:04,851 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7845 states to 7845 states and 8553 transitions.
[2020-05-30 21:24:04,851 INFO  L751         BuchiCegarLoop]: Abstraction has 7845 states and 8553 transitions.
[2020-05-30 21:24:04,851 INFO  L631         BuchiCegarLoop]: Abstraction has 7845 states and 8553 transitions.
[2020-05-30 21:24:04,851 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-05-30 21:24:04,851 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7845 states and 8553 transitions.
[2020-05-30 21:24:04,858 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:24:04,858 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:24:04,858 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:24:04,860 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:24:04,860 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND TRUE   choice == 9
[L4937]              gas := gas - 21000;
[L4938]  COND FALSE  !(gas >= 0)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:24:04,863 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:24:04,863 INFO  L82        PathProgramCache]: Analyzing trace with hash -1613568445, now seen corresponding path program 1 times
[2020-05-30 21:24:04,864 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:24:04,878 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:24:04,962 INFO  L134       CoverageAnalysis]: Checked inductivity of 73 backedges. 1 proven. 30 refuted. 0 times theorem prover too weak. 42 trivial. 0 not checked.
[2020-05-30 21:24:04,962 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:24:04,962 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 21:24:04,962 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:24:04,962 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:24:04,963 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=109, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:24:04,963 INFO  L87              Difference]: Start difference. First operand 7845 states and 8553 transitions. cyclomatic complexity: 721 Second operand 12 states.
[2020-05-30 21:24:07,424 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:24:07,425 INFO  L93              Difference]: Finished difference Result 8109 states and 8882 transitions.
[2020-05-30 21:24:07,425 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-05-30 21:24:07,425 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8109 states and 8882 transitions.
[2020-05-30 21:24:07,436 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:24:07,447 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8109 states to 8109 states and 8882 transitions.
[2020-05-30 21:24:07,447 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 627
[2020-05-30 21:24:07,447 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 627
[2020-05-30 21:24:07,447 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8109 states and 8882 transitions.
[2020-05-30 21:24:07,451 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:24:07,451 INFO  L728         BuchiCegarLoop]: Abstraction has 8109 states and 8882 transitions.
[2020-05-30 21:24:07,456 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8109 states and 8882 transitions.
[2020-05-30 21:24:07,486 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8109 to 7847.
[2020-05-30 21:24:07,486 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7847 states.
[2020-05-30 21:24:07,493 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7847 states to 7847 states and 8557 transitions.
[2020-05-30 21:24:07,493 INFO  L751         BuchiCegarLoop]: Abstraction has 7847 states and 8557 transitions.
[2020-05-30 21:24:07,493 INFO  L631         BuchiCegarLoop]: Abstraction has 7847 states and 8557 transitions.
[2020-05-30 21:24:07,493 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-05-30 21:24:07,493 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7847 states and 8557 transitions.
[2020-05-30 21:24:07,500 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:24:07,500 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:24:07,500 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:24:07,501 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:24:07,501 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND TRUE   __exception
[L756]                     __tmp__Balance := Balance;
[L757]                     __tmp__DType := DType;
[L758]                     __tmp__Alloc := Alloc;
[L759]                     __tmp__balance_ADDR := balance_ADDR;
[L760]                     __tmp__M_Ref_bool_canWithdraw0 := M_Ref_bool_canWithdraw0;
[L761]                     __tmp__sum_canWithdraw0 := sum_canWithdraw0;
[L762]                     __tmp__M_Ref_bool_whitelist1 := M_Ref_bool_whitelist1;
[L763]                     __tmp__sum_whitelist1 := sum_whitelist1;
[L764]                     __tmp__M_Ref_int_bids2 := M_Ref_int_bids2;
[L765]                     __tmp__sum_bids2 := sum_bids2;
[L766]                     __tmp__M_int_Ref := M_int_Ref;
[L767]                     __tmp__sum := sum;
[L768]                     __tmp__Length := Length;
[L769]                     __tmp__now := now;
[L770]                     __tmp__owner_Ownable := owner_Ownable;
[L771]                     __tmp__initialized_DepositLocker := initialized_DepositLocker;
[L772]                     __tmp__deposited_DepositLocker := deposited_DepositLocker;
[L773]                     __tmp__slasher_DepositLocker := slasher_DepositLocker;
[L774]                     __tmp__depositorsProxy_DepositLocker := depositorsProxy_DepositLocker;
[L775]                     __tmp__releaseTimestamp_DepositLocker := releaseTimestamp_DepositLocker;
[L776]                     __tmp__canWithdraw_DepositLocker := canWithdraw_DepositLocker;
[L777]                     __tmp__numberOfDepositors_DepositLocker := numberOfDepositors_DepositLocker;
[L778]                     __tmp__valuePerDepositor_DepositLocker := valuePerDepositor_DepositLocker;
[L779]                     __tmp__auctionDurationInDays_ValidatorAuction := auctionDurationInDays_ValidatorAuction;
[L780]                     __tmp__startPrice_ValidatorAuction := startPrice_ValidatorAuction;
[L781]                     __tmp__minimalNumberOfParticipants_ValidatorAuction := minimalNumberOfParticipants_ValidatorAuction;
[L782]                     __tmp__maximalNumberOfParticipants_ValidatorAuction := maximalNumberOfParticipants_ValidatorAuction;
[L783]                     __tmp__auctionState_ValidatorAuction := auctionState_ValidatorAuction;
[L784]                     __tmp__depositLocker_ValidatorAuction := depositLocker_ValidatorAuction;
[L785]                     __tmp__whitelist_ValidatorAuction := whitelist_ValidatorAuction;
[L786]                     __tmp__bids_ValidatorAuction := bids_ValidatorAuction;
[L787]                     __tmp__bidders_ValidatorAuction := bidders_ValidatorAuction;
[L788]                     __tmp__startTime_ValidatorAuction := startTime_ValidatorAuction;
[L789]                     __tmp__closeTime_ValidatorAuction := closeTime_ValidatorAuction;
[L790]                     __tmp__lowestSlotPrice_ValidatorAuction := lowestSlotPrice_ValidatorAuction;
[L791]         CALL        call ValidatorAuction_ValidatorAuction__fail(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2849]        CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L1837]        CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1817]                    assume msgsender_MSG != null;
[L1818]                    __tmp__Balance[this] := 0;
[L1819]                    __tmp__owner_Ownable[this] := null;
[L1820]                    __tmp__owner_Ownable[this] := msgsender_MSG;
[L1837]        RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1838]        COND FALSE  !(revert)
[L2849]        RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2850]        COND FALSE  !(revert)
[L2855]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2622]                    assume msgsender_MSG != null;
[L2623]                    __tmp__Balance[this] := 0;
[L2624]                    __tmp__auctionDurationInDays_ValidatorAuction[this] := 0;
[L2625]                    __tmp__startPrice_ValidatorAuction[this] := 0;
[L2626]                    __tmp__minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2627]                    __tmp__maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2628]        CALL        call __var_10 := FreshRefGenerator__fail();
[L1797]                    havoc newRef;
[L1798]                    assume __tmp__Alloc[newRef] == false;
[L1799]                    __tmp__Alloc[newRef] := true;
[L1800]                    assume newRef != null;
[L2628]        RET         call __var_10 := FreshRefGenerator__fail();
[L2629]        COND FALSE  !(revert)
[L2634]                    __tmp__whitelist_ValidatorAuction[this] := __var_10;
[L2635]                    __tmp__M_Ref_bool_whitelist1[__tmp__whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2636]        CALL        call __var_11 := FreshRefGenerator__fail();
[L1797]                    havoc newRef;
[L1798]                    assume __tmp__Alloc[newRef] == false;
[L1799]                    __tmp__Alloc[newRef] := true;
[L1800]                    assume newRef != null;
[L2636]        RET         call __var_11 := FreshRefGenerator__fail();
[L2637]        COND FALSE  !(revert)
[L2642]                    __tmp__bids_ValidatorAuction[this] := __var_11;
[L2643]                    __tmp__M_Ref_int_bids2[__tmp__bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2644]                    __tmp__sum_bids2[__tmp__bids_ValidatorAuction[this]] := 0;
[L2645]        CALL        call __var_12 := FreshRefGenerator__fail();
[L1797]                    havoc newRef;
[L1798]                    assume __tmp__Alloc[newRef] == false;
[L1799]                    __tmp__Alloc[newRef] := true;
[L1800]                    assume newRef != null;
[L2645]        RET         call __var_12 := FreshRefGenerator__fail();
[L2646]        COND FALSE  !(revert)
[L2651]                    __tmp__bidders_ValidatorAuction[this] := __var_12;
[L2652]                    assume __tmp__Length[__tmp__bidders_ValidatorAuction[this]] == 0;
[L2653]                    __tmp__startTime_ValidatorAuction[this] := 0;
[L2654]                    __tmp__closeTime_ValidatorAuction[this] := 0;
[L2655]                    __tmp__lowestSlotPrice_ValidatorAuction[this] := 0;
[L2656]                    assume _auctionDurationInDays_s578 >= 0;
[L2657]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2663]                    assume _auctionDurationInDays_s578 >= 0;
[L2664]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2670]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2671]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2677]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2678]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2684]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2685]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2686]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2692]                    assume _startPriceInWei_s578 >= 0;
[L2693]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2699]                    assume __tmp__startPrice_ValidatorAuction[this] >= 0;
[L2700]                    assume _startPriceInWei_s578 >= 0;
[L2701]                    __tmp__startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2702]                    assume __tmp__auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2703]                    assume _auctionDurationInDays_s578 >= 0;
[L2704]                    __tmp__auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2705]                    assume __tmp__maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2706]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2707]                    __tmp__maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2708]                    assume __tmp__minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2709]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2710]                    __tmp__minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2711]                    __tmp__depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2712]                    assume __tmp__lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2713]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2714]                    __tmp__lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2715]                    assume __var_9 >= 0;
[L2716]                    __tmp__auctionState_ValidatorAuction[this] := 0;
[L2855]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2856]        COND FALSE  !(revert)
[L791]         RET         call ValidatorAuction_ValidatorAuction__fail(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L792]                     assume revert || gas < 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:24:07,505 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:24:07,505 INFO  L82        PathProgramCache]: Analyzing trace with hash -395134938, now seen corresponding path program 1 times
[2020-05-30 21:24:07,505 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:24:07,518 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:24:07,568 INFO  L134       CoverageAnalysis]: Checked inductivity of 22 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 22 trivial. 0 not checked.
[2020-05-30 21:24:07,569 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:24:07,569 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-30 21:24:07,569 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:24:07,569 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 21:24:07,569 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-05-30 21:24:07,570 INFO  L87              Difference]: Start difference. First operand 7847 states and 8557 transitions. cyclomatic complexity: 723 Second operand 4 states.
[2020-05-30 21:24:08,326 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:24:08,326 INFO  L93              Difference]: Finished difference Result 8821 states and 9753 transitions.
[2020-05-30 21:24:08,326 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-30 21:24:08,326 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8821 states and 9753 transitions.
[2020-05-30 21:24:08,341 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:24:08,356 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8821 states to 8673 states and 9603 transitions.
[2020-05-30 21:24:08,356 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 709
[2020-05-30 21:24:08,356 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 709
[2020-05-30 21:24:08,356 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8673 states and 9603 transitions.
[2020-05-30 21:24:08,360 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:24:08,360 INFO  L728         BuchiCegarLoop]: Abstraction has 8673 states and 9603 transitions.
[2020-05-30 21:24:08,365 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8673 states and 9603 transitions.
[2020-05-30 21:24:08,397 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8673 to 7715.
[2020-05-30 21:24:08,397 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7715 states.
[2020-05-30 21:24:08,404 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7715 states to 7715 states and 8418 transitions.
[2020-05-30 21:24:08,404 INFO  L751         BuchiCegarLoop]: Abstraction has 7715 states and 8418 transitions.
[2020-05-30 21:24:08,404 INFO  L631         BuchiCegarLoop]: Abstraction has 7715 states and 8418 transitions.
[2020-05-30 21:24:08,404 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-05-30 21:24:08,404 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7715 states and 8418 transitions.
[2020-05-30 21:24:08,412 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:24:08,412 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:24:08,412 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:24:08,413 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:24:08,413 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:24:08,417 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:24:08,417 INFO  L82        PathProgramCache]: Analyzing trace with hash -1500149522, now seen corresponding path program 1 times
[2020-05-30 21:24:08,417 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:24:08,436 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:24:08,510 INFO  L134       CoverageAnalysis]: Checked inductivity of 73 backedges. 29 proven. 0 refuted. 0 times theorem prover too weak. 44 trivial. 0 not checked.
[2020-05-30 21:24:08,511 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:24:08,511 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-05-30 21:24:08,511 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:24:08,511 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:24:08,511 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=107, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:24:08,512 INFO  L87              Difference]: Start difference. First operand 7715 states and 8418 transitions. cyclomatic complexity: 716 Second operand 12 states.
[2020-05-30 21:24:11,124 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:24:11,124 INFO  L93              Difference]: Finished difference Result 8893 states and 9914 transitions.
[2020-05-30 21:24:11,124 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-30 21:24:11,124 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8893 states and 9914 transitions.
[2020-05-30 21:24:11,142 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:24:11,158 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8893 states to 8893 states and 9914 transitions.
[2020-05-30 21:24:11,158 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 696
[2020-05-30 21:24:11,158 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 696
[2020-05-30 21:24:11,159 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8893 states and 9914 transitions.
[2020-05-30 21:24:11,163 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:24:11,163 INFO  L728         BuchiCegarLoop]: Abstraction has 8893 states and 9914 transitions.
[2020-05-30 21:24:11,168 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8893 states and 9914 transitions.
[2020-05-30 21:24:11,205 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8893 to 8788.
[2020-05-30 21:24:11,205 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8788 states.
[2020-05-30 21:24:11,214 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8788 states to 8788 states and 9785 transitions.
[2020-05-30 21:24:11,214 INFO  L751         BuchiCegarLoop]: Abstraction has 8788 states and 9785 transitions.
[2020-05-30 21:24:11,214 INFO  L631         BuchiCegarLoop]: Abstraction has 8788 states and 9785 transitions.
[2020-05-30 21:24:11,214 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-05-30 21:24:11,214 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8788 states and 9785 transitions.
[2020-05-30 21:24:11,222 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:24:11,222 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:24:11,222 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:24:11,223 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:24:11,224 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND FALSE  !(Balance[from] >= amount)
[L4507]                    success := false;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:24:11,227 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:24:11,227 INFO  L82        PathProgramCache]: Analyzing trace with hash 995878044, now seen corresponding path program 1 times
[2020-05-30 21:24:11,228 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:24:11,246 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:24:11,304 INFO  L134       CoverageAnalysis]: Checked inductivity of 73 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 73 trivial. 0 not checked.
[2020-05-30 21:24:11,304 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:24:11,304 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-30 21:24:11,305 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:24:11,305 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 21:24:11,305 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-30 21:24:11,305 INFO  L87              Difference]: Start difference. First operand 8788 states and 9785 transitions. cyclomatic complexity: 1010 Second operand 4 states.
[2020-05-30 21:24:11,350 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:24:11,350 INFO  L93              Difference]: Finished difference Result 8828 states and 9823 transitions.
[2020-05-30 21:24:11,350 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-30 21:24:11,350 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8828 states and 9823 transitions.
[2020-05-30 21:24:11,366 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:24:11,381 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8828 states to 8616 states and 9593 transitions.
[2020-05-30 21:24:11,381 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 666
[2020-05-30 21:24:11,382 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 666
[2020-05-30 21:24:11,382 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8616 states and 9593 transitions.
[2020-05-30 21:24:11,386 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:24:11,386 INFO  L728         BuchiCegarLoop]: Abstraction has 8616 states and 9593 transitions.
[2020-05-30 21:24:11,391 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8616 states and 9593 transitions.
[2020-05-30 21:24:11,428 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8616 to 8616.
[2020-05-30 21:24:11,429 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8616 states.
[2020-05-30 21:24:11,438 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8616 states to 8616 states and 9593 transitions.
[2020-05-30 21:24:11,438 INFO  L751         BuchiCegarLoop]: Abstraction has 8616 states and 9593 transitions.
[2020-05-30 21:24:11,438 INFO  L631         BuchiCegarLoop]: Abstraction has 8616 states and 9593 transitions.
[2020-05-30 21:24:11,438 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-05-30 21:24:11,438 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8616 states and 9593 transitions.
[2020-05-30 21:24:11,446 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:24:11,446 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:24:11,446 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:24:11,447 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:24:11,447 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND TRUE   DType[to] == DepositLockerInterface
[L4272]                    assume amount == 0;
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:24:11,451 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:24:11,451 INFO  L82        PathProgramCache]: Analyzing trace with hash -1096219867, now seen corresponding path program 1 times
[2020-05-30 21:24:11,451 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:24:11,469 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:24:11,536 INFO  L134       CoverageAnalysis]: Checked inductivity of 73 backedges. 5 proven. 0 refuted. 0 times theorem prover too weak. 68 trivial. 0 not checked.
[2020-05-30 21:24:11,537 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:24:11,537 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-05-30 21:24:11,537 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:24:11,537 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-30 21:24:11,537 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-30 21:24:11,537 INFO  L87              Difference]: Start difference. First operand 8616 states and 9593 transitions. cyclomatic complexity: 990 Second operand 8 states.
[2020-05-30 21:24:12,023 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:24:12,024 INFO  L93              Difference]: Finished difference Result 8740 states and 9721 transitions.
[2020-05-30 21:24:12,024 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-05-30 21:24:12,024 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8740 states and 9721 transitions.
[2020-05-30 21:24:12,050 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:24:12,071 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8740 states to 8612 states and 9585 transitions.
[2020-05-30 21:24:12,072 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 665
[2020-05-30 21:24:12,072 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 665
[2020-05-30 21:24:12,072 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8612 states and 9585 transitions.
[2020-05-30 21:24:12,077 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:24:12,077 INFO  L728         BuchiCegarLoop]: Abstraction has 8612 states and 9585 transitions.
[2020-05-30 21:24:12,084 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8612 states and 9585 transitions.
[2020-05-30 21:24:12,160 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8612 to 8612.
[2020-05-30 21:24:12,160 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8612 states.
[2020-05-30 21:24:12,170 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8612 states to 8612 states and 9585 transitions.
[2020-05-30 21:24:12,170 INFO  L751         BuchiCegarLoop]: Abstraction has 8612 states and 9585 transitions.
[2020-05-30 21:24:12,170 INFO  L631         BuchiCegarLoop]: Abstraction has 8612 states and 9585 transitions.
[2020-05-30 21:24:12,170 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-05-30 21:24:12,170 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8612 states and 9585 transitions.
[2020-05-30 21:24:12,179 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:24:12,179 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:24:12,179 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:24:12,180 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:24:12,180 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND TRUE   DType[to] == Ownable
[L4276]                    assume amount == 0;
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND TRUE   choice == 9
[L4937]              gas := gas - 21000;
[L4938]  COND FALSE  !(gas >= 0)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:24:12,190 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:24:12,190 INFO  L82        PathProgramCache]: Analyzing trace with hash -1382260331, now seen corresponding path program 1 times
[2020-05-30 21:24:12,191 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:24:12,209 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:24:12,276 INFO  L134       CoverageAnalysis]: Checked inductivity of 73 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 67 trivial. 0 not checked.
[2020-05-30 21:24:12,277 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:24:12,277 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-05-30 21:24:12,277 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:24:12,277 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-30 21:24:12,277 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-30 21:24:12,278 INFO  L87              Difference]: Start difference. First operand 8612 states and 9585 transitions. cyclomatic complexity: 986 Second operand 8 states.
[2020-05-30 21:24:12,435 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:24:12,435 INFO  L93              Difference]: Finished difference Result 8736 states and 9713 transitions.
[2020-05-30 21:24:12,435 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-05-30 21:24:12,436 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8736 states and 9713 transitions.
[2020-05-30 21:24:12,449 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:24:12,464 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8736 states to 8608 states and 9577 transitions.
[2020-05-30 21:24:12,464 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 664
[2020-05-30 21:24:12,465 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 664
[2020-05-30 21:24:12,465 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8608 states and 9577 transitions.
[2020-05-30 21:24:12,469 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:24:12,469 INFO  L728         BuchiCegarLoop]: Abstraction has 8608 states and 9577 transitions.
[2020-05-30 21:24:12,474 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8608 states and 9577 transitions.
[2020-05-30 21:24:12,509 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8608 to 8608.
[2020-05-30 21:24:12,509 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8608 states.
[2020-05-30 21:24:12,519 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8608 states to 8608 states and 9577 transitions.
[2020-05-30 21:24:12,519 INFO  L751         BuchiCegarLoop]: Abstraction has 8608 states and 9577 transitions.
[2020-05-30 21:24:12,519 INFO  L631         BuchiCegarLoop]: Abstraction has 8608 states and 9577 transitions.
[2020-05-30 21:24:12,519 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-05-30 21:24:12,519 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8608 states and 9577 transitions.
[2020-05-30 21:24:12,528 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:24:12,528 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:24:12,528 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:24:12,529 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:24:12,529 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND TRUE   DType[to] == DepositLocker
[L4264]        CALL        call FallbackMethod_DepositLocker__success(to, from, amount);
[L4264]        RET         call FallbackMethod_DepositLocker__success(to, from, amount);
[L4265]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:24:12,533 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:24:12,533 INFO  L82        PathProgramCache]: Analyzing trace with hash -1128078109, now seen corresponding path program 1 times
[2020-05-30 21:24:12,533 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:24:12,552 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:24:12,619 INFO  L134       CoverageAnalysis]: Checked inductivity of 73 backedges. 4 proven. 0 refuted. 0 times theorem prover too weak. 69 trivial. 0 not checked.
[2020-05-30 21:24:12,619 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:24:12,619 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-05-30 21:24:12,620 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:24:12,620 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-30 21:24:12,620 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-30 21:24:12,620 INFO  L87              Difference]: Start difference. First operand 8608 states and 9577 transitions. cyclomatic complexity: 982 Second operand 8 states.
[2020-05-30 21:24:12,805 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:24:12,805 INFO  L93              Difference]: Finished difference Result 8684 states and 9655 transitions.
[2020-05-30 21:24:12,805 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-05-30 21:24:12,805 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8684 states and 9655 transitions.
[2020-05-30 21:24:12,819 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:24:12,832 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8684 states to 8536 states and 9499 transitions.
[2020-05-30 21:24:12,832 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 647
[2020-05-30 21:24:12,833 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 647
[2020-05-30 21:24:12,833 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8536 states and 9499 transitions.
[2020-05-30 21:24:12,837 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:24:12,837 INFO  L728         BuchiCegarLoop]: Abstraction has 8536 states and 9499 transitions.
[2020-05-30 21:24:12,841 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8536 states and 9499 transitions.
[2020-05-30 21:24:12,875 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8536 to 8536.
[2020-05-30 21:24:12,875 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8536 states.
[2020-05-30 21:24:12,883 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8536 states to 8536 states and 9499 transitions.
[2020-05-30 21:24:12,883 INFO  L751         BuchiCegarLoop]: Abstraction has 8536 states and 9499 transitions.
[2020-05-30 21:24:12,883 INFO  L631         BuchiCegarLoop]: Abstraction has 8536 states and 9499 transitions.
[2020-05-30 21:24:12,883 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-05-30 21:24:12,883 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8536 states and 9499 transitions.
[2020-05-30 21:24:12,891 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:24:12,891 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:24:12,891 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:24:12,892 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:24:12,892 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND TRUE   choice == 9
[L4937]              gas := gas - 21000;
[L4938]  COND FALSE  !(gas >= 0)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:24:12,895 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:24:12,895 INFO  L82        PathProgramCache]: Analyzing trace with hash -779221499, now seen corresponding path program 1 times
[2020-05-30 21:24:12,895 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:24:12,913 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:24:12,987 INFO  L134       CoverageAnalysis]: Checked inductivity of 73 backedges. 29 proven. 0 refuted. 0 times theorem prover too weak. 44 trivial. 0 not checked.
[2020-05-30 21:24:12,987 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:24:12,987 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-05-30 21:24:12,987 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:24:12,988 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:24:12,988 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=107, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:24:12,988 INFO  L87              Difference]: Start difference. First operand 8536 states and 9499 transitions. cyclomatic complexity: 976 Second operand 12 states.
[2020-05-30 21:24:15,224 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:24:15,224 INFO  L93              Difference]: Finished difference Result 8520 states and 9436 transitions.
[2020-05-30 21:24:15,224 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-30 21:24:15,224 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8520 states and 9436 transitions.
[2020-05-30 21:24:15,240 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:24:15,255 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8520 states to 8520 states and 9436 transitions.
[2020-05-30 21:24:15,255 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 667
[2020-05-30 21:24:15,256 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 667
[2020-05-30 21:24:15,256 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8520 states and 9436 transitions.
[2020-05-30 21:24:15,260 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:24:15,260 INFO  L728         BuchiCegarLoop]: Abstraction has 8520 states and 9436 transitions.
[2020-05-30 21:24:15,265 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8520 states and 9436 transitions.
[2020-05-30 21:24:15,299 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8520 to 8212.
[2020-05-30 21:24:15,299 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8212 states.
[2020-05-30 21:24:15,308 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8212 states to 8212 states and 9077 transitions.
[2020-05-30 21:24:15,308 INFO  L751         BuchiCegarLoop]: Abstraction has 8212 states and 9077 transitions.
[2020-05-30 21:24:15,308 INFO  L631         BuchiCegarLoop]: Abstraction has 8212 states and 9077 transitions.
[2020-05-30 21:24:15,308 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-05-30 21:24:15,308 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8212 states and 9077 transitions.
[2020-05-30 21:24:15,316 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:24:15,316 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:24:15,317 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:24:15,318 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:24:15,318 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:24:15,321 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:24:15,321 INFO  L82        PathProgramCache]: Analyzing trace with hash 383120586, now seen corresponding path program 1 times
[2020-05-30 21:24:15,321 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:24:15,340 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:24:15,422 INFO  L134       CoverageAnalysis]: Checked inductivity of 79 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 79 trivial. 0 not checked.
[2020-05-30 21:24:15,423 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:24:15,423 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-05-30 21:24:15,423 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:24:15,423 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-05-30 21:24:15,423 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=76, Invalid=164, Unknown=0, NotChecked=0, Total=240
[2020-05-30 21:24:15,424 INFO  L87              Difference]: Start difference. First operand 8212 states and 9077 transitions. cyclomatic complexity: 878 Second operand 16 states.
[2020-05-30 21:24:19,162 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:24:19,162 INFO  L93              Difference]: Finished difference Result 9884 states and 10881 transitions.
[2020-05-30 21:24:19,162 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-05-30 21:24:19,162 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9884 states and 10881 transitions.
[2020-05-30 21:24:19,188 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-05-30 21:24:19,213 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9884 states to 9730 states and 10696 transitions.
[2020-05-30 21:24:19,213 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 906
[2020-05-30 21:24:19,214 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 906
[2020-05-30 21:24:19,214 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9730 states and 10696 transitions.
[2020-05-30 21:24:19,221 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:24:19,221 INFO  L728         BuchiCegarLoop]: Abstraction has 9730 states and 10696 transitions.
[2020-05-30 21:24:19,230 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9730 states and 10696 transitions.
[2020-05-30 21:24:19,286 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9730 to 7960.
[2020-05-30 21:24:19,286 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7960 states.
[2020-05-30 21:24:19,296 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7960 states to 7960 states and 8645 transitions.
[2020-05-30 21:24:19,296 INFO  L751         BuchiCegarLoop]: Abstraction has 7960 states and 8645 transitions.
[2020-05-30 21:24:19,296 INFO  L631         BuchiCegarLoop]: Abstraction has 7960 states and 8645 transitions.
[2020-05-30 21:24:19,296 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-05-30 21:24:19,296 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7960 states and 8645 transitions.
[2020-05-30 21:24:19,304 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:24:19,304 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:24:19,304 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:24:19,305 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:24:19,305 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND FALSE  !(choice == 9)
[L4944]  COND FALSE  !(choice == 8)
[L4953]  COND FALSE  !(choice == 7)
[L4962]  COND FALSE  !(choice == 6)
[L4971]  COND FALSE  !(choice == 5)
[L4980]  COND FALSE  !(choice == 4)
[L4989]  COND FALSE  !(choice == 3)
[L4999]  COND FALSE  !(choice == 2)
[L5008]  COND FALSE  !(choice == 1)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:24:19,307 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:24:19,308 INFO  L82        PathProgramCache]: Analyzing trace with hash -278591468, now seen corresponding path program 1 times
[2020-05-30 21:24:19,308 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:24:19,331 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:24:19,508 INFO  L134       CoverageAnalysis]: Checked inductivity of 79 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 79 trivial. 0 not checked.
[2020-05-30 21:24:19,509 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:24:19,509 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-05-30 21:24:19,509 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:24:19,509 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:24:19,509 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=129, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:24:19,509 INFO  L87              Difference]: Start difference. First operand 7960 states and 8645 transitions. cyclomatic complexity: 698 Second operand 13 states.
[2020-05-30 21:24:22,326 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:24:22,327 INFO  L93              Difference]: Finished difference Result 8139 states and 8894 transitions.
[2020-05-30 21:24:22,327 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-30 21:24:22,327 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8139 states and 8894 transitions.
[2020-05-30 21:24:22,344 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:24:22,359 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8139 states to 8139 states and 8894 transitions.
[2020-05-30 21:24:22,359 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 630
[2020-05-30 21:24:22,359 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 630
[2020-05-30 21:24:22,359 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8139 states and 8894 transitions.
[2020-05-30 21:24:22,364 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:24:22,364 INFO  L728         BuchiCegarLoop]: Abstraction has 8139 states and 8894 transitions.
[2020-05-30 21:24:22,401 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8139 states and 8894 transitions.
[2020-05-30 21:24:22,435 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8139 to 8051.
[2020-05-30 21:24:22,435 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8051 states.
[2020-05-30 21:24:22,443 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8051 states to 8051 states and 8796 transitions.
[2020-05-30 21:24:22,443 INFO  L751         BuchiCegarLoop]: Abstraction has 8051 states and 8796 transitions.
[2020-05-30 21:24:22,444 INFO  L631         BuchiCegarLoop]: Abstraction has 8051 states and 8796 transitions.
[2020-05-30 21:24:22,444 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-05-30 21:24:22,444 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8051 states and 8796 transitions.
[2020-05-30 21:24:22,451 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:24:22,451 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:24:22,451 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:24:22,452 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:24:22,452 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:24:22,462 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:24:22,462 INFO  L82        PathProgramCache]: Analyzing trace with hash -1113121150, now seen corresponding path program 1 times
[2020-05-30 21:24:22,463 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:24:22,481 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:24:22,556 INFO  L134       CoverageAnalysis]: Checked inductivity of 79 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 79 trivial. 0 not checked.
[2020-05-30 21:24:22,556 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:24:22,556 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-05-30 21:24:22,556 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:24:22,556 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:24:22,556 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=129, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:24:22,556 INFO  L87              Difference]: Start difference. First operand 8051 states and 8796 transitions. cyclomatic complexity: 761 Second operand 13 states.
[2020-05-30 21:24:25,856 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:24:25,856 INFO  L93              Difference]: Finished difference Result 9177 states and 10200 transitions.
[2020-05-30 21:24:25,857 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-05-30 21:24:25,857 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9177 states and 10200 transitions.
[2020-05-30 21:24:25,880 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:24:25,900 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9177 states to 9177 states and 10200 transitions.
[2020-05-30 21:24:25,900 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 731
[2020-05-30 21:24:25,901 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 731
[2020-05-30 21:24:25,901 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9177 states and 10200 transitions.
[2020-05-30 21:24:25,906 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:24:25,906 INFO  L728         BuchiCegarLoop]: Abstraction has 9177 states and 10200 transitions.
[2020-05-30 21:24:25,912 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9177 states and 10200 transitions.
[2020-05-30 21:24:25,953 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9177 to 9054.
[2020-05-30 21:24:25,953 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9054 states.
[2020-05-30 21:24:25,964 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9054 states to 9054 states and 10052 transitions.
[2020-05-30 21:24:25,964 INFO  L751         BuchiCegarLoop]: Abstraction has 9054 states and 10052 transitions.
[2020-05-30 21:24:25,964 INFO  L631         BuchiCegarLoop]: Abstraction has 9054 states and 10052 transitions.
[2020-05-30 21:24:25,964 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-05-30 21:24:25,964 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9054 states and 10052 transitions.
[2020-05-30 21:24:25,973 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:24:25,973 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:24:25,973 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:24:25,975 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:24:25,975 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND FALSE  !(choice == 9)
[L4944]  COND FALSE  !(choice == 8)
[L4953]  COND FALSE  !(choice == 7)
[L4962]  COND FALSE  !(choice == 6)
[L4971]  COND FALSE  !(choice == 5)
[L4980]  COND FALSE  !(choice == 4)
[L4989]  COND FALSE  !(choice == 3)
[L4999]  COND FALSE  !(choice == 2)
[L5008]  COND FALSE  !(choice == 1)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:24:25,978 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:24:25,978 INFO  L82        PathProgramCache]: Analyzing trace with hash 1014171827, now seen corresponding path program 1 times
[2020-05-30 21:24:25,979 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:24:25,999 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:24:26,166 INFO  L134       CoverageAnalysis]: Checked inductivity of 144 backedges. 36 proven. 32 refuted. 0 times theorem prover too weak. 76 trivial. 0 not checked.
[2020-05-30 21:24:26,166 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:24:26,166 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 21:24:26,166 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:24:26,166 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:24:26,166 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=109, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:24:26,167 INFO  L87              Difference]: Start difference. First operand 9054 states and 10052 transitions. cyclomatic complexity: 1014 Second operand 12 states.
[2020-05-30 21:24:28,771 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:24:28,772 INFO  L93              Difference]: Finished difference Result 9091 states and 10097 transitions.
[2020-05-30 21:24:28,772 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-05-30 21:24:28,772 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9091 states and 10097 transitions.
[2020-05-30 21:24:28,793 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:24:28,812 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9091 states to 9067 states and 10065 transitions.
[2020-05-30 21:24:28,812 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 711
[2020-05-30 21:24:28,813 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 711
[2020-05-30 21:24:28,813 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9067 states and 10065 transitions.
[2020-05-30 21:24:28,818 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:24:28,818 INFO  L728         BuchiCegarLoop]: Abstraction has 9067 states and 10065 transitions.
[2020-05-30 21:24:28,824 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9067 states and 10065 transitions.
[2020-05-30 21:24:28,863 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9067 to 8966.
[2020-05-30 21:24:28,863 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8966 states.
[2020-05-30 21:24:28,873 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8966 states to 8966 states and 9946 transitions.
[2020-05-30 21:24:28,874 INFO  L751         BuchiCegarLoop]: Abstraction has 8966 states and 9946 transitions.
[2020-05-30 21:24:28,874 INFO  L631         BuchiCegarLoop]: Abstraction has 8966 states and 9946 transitions.
[2020-05-30 21:24:28,874 INFO  L445         BuchiCegarLoop]: ======== Iteration 23============
[2020-05-30 21:24:28,874 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8966 states and 9946 transitions.
[2020-05-30 21:24:28,883 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:24:28,883 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:24:28,883 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:24:28,884 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:24:28,884 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:24:28,888 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:24:28,888 INFO  L82        PathProgramCache]: Analyzing trace with hash -1657491376, now seen corresponding path program 1 times
[2020-05-30 21:24:28,888 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:24:28,908 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:24:29,014 INFO  L134       CoverageAnalysis]: Checked inductivity of 156 backedges. 61 proven. 0 refuted. 0 times theorem prover too weak. 95 trivial. 0 not checked.
[2020-05-30 21:24:29,014 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:24:29,015 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-05-30 21:24:29,015 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:24:29,015 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:24:29,015 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=129, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:24:29,015 INFO  L87              Difference]: Start difference. First operand 8966 states and 9946 transitions. cyclomatic complexity: 996 Second operand 13 states.
[2020-05-30 21:24:32,381 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:24:32,381 INFO  L93              Difference]: Finished difference Result 9861 states and 11062 transitions.
[2020-05-30 21:24:32,381 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-05-30 21:24:32,382 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9861 states and 11062 transitions.
[2020-05-30 21:24:32,406 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:24:32,428 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9861 states to 9861 states and 11062 transitions.
[2020-05-30 21:24:32,428 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 758
[2020-05-30 21:24:32,429 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 758
[2020-05-30 21:24:32,429 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9861 states and 11062 transitions.
[2020-05-30 21:24:32,435 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:24:32,435 INFO  L728         BuchiCegarLoop]: Abstraction has 9861 states and 11062 transitions.
[2020-05-30 21:24:32,441 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9861 states and 11062 transitions.
[2020-05-30 21:24:32,485 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9861 to 9753.
[2020-05-30 21:24:32,485 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9753 states.
[2020-05-30 21:24:32,497 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9753 states to 9753 states and 10933 transitions.
[2020-05-30 21:24:32,498 INFO  L751         BuchiCegarLoop]: Abstraction has 9753 states and 10933 transitions.
[2020-05-30 21:24:32,498 INFO  L631         BuchiCegarLoop]: Abstraction has 9753 states and 10933 transitions.
[2020-05-30 21:24:32,498 INFO  L445         BuchiCegarLoop]: ======== Iteration 24============
[2020-05-30 21:24:32,498 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9753 states and 10933 transitions.
[2020-05-30 21:24:32,508 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:24:32,508 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:24:32,508 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:24:32,510 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:24:32,510 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND TRUE   DType[to] == ValidatorAuction
[L4256]        CALL        call FallbackMethod_ValidatorAuction__success(to, from, amount);
[L2916]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2917]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2918]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2919]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L2919]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L2920]        COND FALSE  !(revert)
[L2925]                    gas := gas - 15;
[L2926]        CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L2926]        RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L2927]        COND FALSE  !(revert)
[L4256]        RET         call FallbackMethod_ValidatorAuction__success(to, from, amount);
[L4257]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:24:32,515 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:24:32,515 INFO  L82        PathProgramCache]: Analyzing trace with hash -1331854014, now seen corresponding path program 1 times
[2020-05-30 21:24:32,516 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:24:32,539 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:24:32,686 INFO  L134       CoverageAnalysis]: Checked inductivity of 115 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 113 trivial. 0 not checked.
[2020-05-30 21:24:32,686 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:24:32,686 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 21:24:32,686 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:24:32,686 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:24:32,686 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=24, Invalid=108, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:24:32,686 INFO  L87              Difference]: Start difference. First operand 9753 states and 10933 transitions. cyclomatic complexity: 1196 Second operand 12 states.
[2020-05-30 21:24:37,154 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:24:37,154 INFO  L93              Difference]: Finished difference Result 10056 states and 11408 transitions.
[2020-05-30 21:24:37,154 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-05-30 21:24:37,155 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10056 states and 11408 transitions.
[2020-05-30 21:24:37,179 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 14
[2020-05-30 21:24:37,204 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10056 states to 10056 states and 11408 transitions.
[2020-05-30 21:24:37,204 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 817
[2020-05-30 21:24:37,204 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 817
[2020-05-30 21:24:37,204 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10056 states and 11408 transitions.
[2020-05-30 21:24:37,211 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:24:37,211 INFO  L728         BuchiCegarLoop]: Abstraction has 10056 states and 11408 transitions.
[2020-05-30 21:24:37,217 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10056 states and 11408 transitions.
[2020-05-30 21:24:37,263 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10056 to 10022.
[2020-05-30 21:24:37,263 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10022 states.
[2020-05-30 21:24:37,277 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10022 states to 10022 states and 11368 transitions.
[2020-05-30 21:24:37,277 INFO  L751         BuchiCegarLoop]: Abstraction has 10022 states and 11368 transitions.
[2020-05-30 21:24:37,277 INFO  L631         BuchiCegarLoop]: Abstraction has 10022 states and 11368 transitions.
[2020-05-30 21:24:37,277 INFO  L445         BuchiCegarLoop]: ======== Iteration 25============
[2020-05-30 21:24:37,277 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10022 states and 11368 transitions.
[2020-05-30 21:24:37,288 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 14
[2020-05-30 21:24:37,288 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:24:37,288 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:24:37,289 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:24:37,289 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:24:37,293 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:24:37,293 INFO  L82        PathProgramCache]: Analyzing trace with hash -508282817, now seen corresponding path program 1 times
[2020-05-30 21:24:37,294 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:24:37,313 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:24:37,452 INFO  L134       CoverageAnalysis]: Checked inductivity of 115 backedges. 2 proven. 32 refuted. 0 times theorem prover too weak. 81 trivial. 0 not checked.
[2020-05-30 21:24:37,452 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:24:37,452 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-05-30 21:24:37,452 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:24:37,453 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:24:37,453 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=131, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:24:37,453 INFO  L87              Difference]: Start difference. First operand 10022 states and 11368 transitions. cyclomatic complexity: 1366 Second operand 13 states.
[2020-05-30 21:24:40,583 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:24:40,583 INFO  L93              Difference]: Finished difference Result 9906 states and 11039 transitions.
[2020-05-30 21:24:40,583 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-30 21:24:40,583 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9906 states and 11039 transitions.
[2020-05-30 21:24:40,608 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:24:40,629 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9906 states to 9894 states and 11023 transitions.
[2020-05-30 21:24:40,630 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 800
[2020-05-30 21:24:40,630 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 800
[2020-05-30 21:24:40,630 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9894 states and 11023 transitions.
[2020-05-30 21:24:40,636 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:24:40,636 INFO  L728         BuchiCegarLoop]: Abstraction has 9894 states and 11023 transitions.
[2020-05-30 21:24:40,642 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9894 states and 11023 transitions.
[2020-05-30 21:24:40,683 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9894 to 9517.
[2020-05-30 21:24:40,683 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9517 states.
[2020-05-30 21:24:40,695 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9517 states to 9517 states and 10577 transitions.
[2020-05-30 21:24:40,695 INFO  L751         BuchiCegarLoop]: Abstraction has 9517 states and 10577 transitions.
[2020-05-30 21:24:40,695 INFO  L631         BuchiCegarLoop]: Abstraction has 9517 states and 10577 transitions.
[2020-05-30 21:24:40,695 INFO  L445         BuchiCegarLoop]: ======== Iteration 26============
[2020-05-30 21:24:40,695 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9517 states and 10577 transitions.
[2020-05-30 21:24:40,704 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:24:40,705 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:24:40,705 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:24:40,706 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:24:40,707 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND TRUE   DType[to] == ValidatorAuction
[L4256]        CALL        call FallbackMethod_ValidatorAuction__success(to, from, amount);
[L2916]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2917]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2918]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2919]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L2919]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L2920]        COND FALSE  !(revert)
[L2925]                    gas := gas - 15;
[L2926]        CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L2926]        RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L2927]        COND FALSE  !(revert)
[L4256]        RET         call FallbackMethod_ValidatorAuction__success(to, from, amount);
[L4257]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:24:40,712 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:24:40,712 INFO  L82        PathProgramCache]: Analyzing trace with hash 668042699, now seen corresponding path program 1 times
[2020-05-30 21:24:40,713 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:24:40,735 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:24:41,036 INFO  L134       CoverageAnalysis]: Checked inductivity of 589 backedges. 78 proven. 128 refuted. 0 times theorem prover too weak. 383 trivial. 0 not checked.
[2020-05-30 21:24:41,036 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:24:41,036 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-05-30 21:24:41,037 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:24:41,038 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:24:41,038 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=133, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:24:41,038 INFO  L87              Difference]: Start difference. First operand 9517 states and 10577 transitions. cyclomatic complexity: 1076 Second operand 13 states.
[2020-05-30 21:24:44,075 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:24:44,075 INFO  L93              Difference]: Finished difference Result 9657 states and 10721 transitions.
[2020-05-30 21:24:44,075 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-05-30 21:24:44,075 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9657 states and 10721 transitions.
[2020-05-30 21:24:44,100 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:24:44,122 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9657 states to 9657 states and 10721 transitions.
[2020-05-30 21:24:44,122 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 739
[2020-05-30 21:24:44,123 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 739
[2020-05-30 21:24:44,123 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9657 states and 10721 transitions.
[2020-05-30 21:24:44,129 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:24:44,129 INFO  L728         BuchiCegarLoop]: Abstraction has 9657 states and 10721 transitions.
[2020-05-30 21:24:44,135 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9657 states and 10721 transitions.
[2020-05-30 21:24:44,178 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9657 to 9515.
[2020-05-30 21:24:44,178 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9515 states.
[2020-05-30 21:24:44,190 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9515 states to 9515 states and 10561 transitions.
[2020-05-30 21:24:44,190 INFO  L751         BuchiCegarLoop]: Abstraction has 9515 states and 10561 transitions.
[2020-05-30 21:24:44,190 INFO  L631         BuchiCegarLoop]: Abstraction has 9515 states and 10561 transitions.
[2020-05-30 21:24:44,190 INFO  L445         BuchiCegarLoop]: ======== Iteration 27============
[2020-05-30 21:24:44,190 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9515 states and 10561 transitions.
[2020-05-30 21:24:44,199 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:24:44,199 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:24:44,200 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:24:44,201 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:24:44,202 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND TRUE   DType[to] == ValidatorAuction
[L4256]        CALL        call FallbackMethod_ValidatorAuction__success(to, from, amount);
[L2916]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2917]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2918]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2919]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L2919]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L2920]        COND FALSE  !(revert)
[L2925]                    gas := gas - 15;
[L2926]        CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L2926]        RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L2927]        COND FALSE  !(revert)
[L4256]        RET         call FallbackMethod_ValidatorAuction__success(to, from, amount);
[L4257]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:24:44,207 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:24:44,207 INFO  L82        PathProgramCache]: Analyzing trace with hash 1000733754, now seen corresponding path program 1 times
[2020-05-30 21:24:44,207 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:24:44,231 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:24:44,498 INFO  L134       CoverageAnalysis]: Checked inductivity of 520 backedges. 4 proven. 79 refuted. 0 times theorem prover too weak. 437 trivial. 0 not checked.
[2020-05-30 21:24:44,499 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:24:44,499 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-05-30 21:24:44,499 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:24:44,499 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:24:44,499 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=131, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:24:44,500 INFO  L87              Difference]: Start difference. First operand 9515 states and 10561 transitions. cyclomatic complexity: 1062 Second operand 13 states.
[2020-05-30 21:24:47,212 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:24:47,212 INFO  L93              Difference]: Finished difference Result 9608 states and 10651 transitions.
[2020-05-30 21:24:47,212 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-05-30 21:24:47,212 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9608 states and 10651 transitions.
[2020-05-30 21:24:47,227 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:24:47,243 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9608 states to 9602 states and 10638 transitions.
[2020-05-30 21:24:47,243 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 730
[2020-05-30 21:24:47,244 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 730
[2020-05-30 21:24:47,244 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9602 states and 10638 transitions.
[2020-05-30 21:24:47,248 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:24:47,248 INFO  L728         BuchiCegarLoop]: Abstraction has 9602 states and 10638 transitions.
[2020-05-30 21:24:47,253 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9602 states and 10638 transitions.
[2020-05-30 21:24:47,288 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9602 to 9501.
[2020-05-30 21:24:47,288 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9501 states.
[2020-05-30 21:24:47,299 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9501 states to 9501 states and 10524 transitions.
[2020-05-30 21:24:47,299 INFO  L751         BuchiCegarLoop]: Abstraction has 9501 states and 10524 transitions.
[2020-05-30 21:24:47,299 INFO  L631         BuchiCegarLoop]: Abstraction has 9501 states and 10524 transitions.
[2020-05-30 21:24:47,299 INFO  L445         BuchiCegarLoop]: ======== Iteration 28============
[2020-05-30 21:24:47,299 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9501 states and 10524 transitions.
[2020-05-30 21:24:47,308 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:24:47,308 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:24:47,308 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:24:47,309 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:24:47,309 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:24:47,313 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:24:47,313 INFO  L82        PathProgramCache]: Analyzing trace with hash -289209103, now seen corresponding path program 1 times
[2020-05-30 21:24:47,314 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:24:47,333 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:24:47,500 INFO  L134       CoverageAnalysis]: Checked inductivity of 170 backedges. 5 proven. 59 refuted. 0 times theorem prover too weak. 106 trivial. 0 not checked.
[2020-05-30 21:24:47,500 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:24:47,500 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-05-30 21:24:47,501 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:24:47,501 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-30 21:24:47,501 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=18, Invalid=72, Unknown=0, NotChecked=0, Total=90
[2020-05-30 21:24:47,501 INFO  L87              Difference]: Start difference. First operand 9501 states and 10524 transitions. cyclomatic complexity: 1038 Second operand 10 states.
[2020-05-30 21:24:50,149 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:24:50,149 INFO  L93              Difference]: Finished difference Result 9623 states and 10675 transitions.
[2020-05-30 21:24:50,149 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-05-30 21:24:50,149 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9623 states and 10675 transitions.
[2020-05-30 21:24:50,170 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:24:50,191 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9623 states to 9623 states and 10675 transitions.
[2020-05-30 21:24:50,191 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 735
[2020-05-30 21:24:50,191 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 735
[2020-05-30 21:24:50,192 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9623 states and 10675 transitions.
[2020-05-30 21:24:50,197 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:24:50,197 INFO  L728         BuchiCegarLoop]: Abstraction has 9623 states and 10675 transitions.
[2020-05-30 21:24:50,203 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9623 states and 10675 transitions.
[2020-05-30 21:24:50,282 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9623 to 9518.
[2020-05-30 21:24:50,282 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9518 states.
[2020-05-30 21:24:50,294 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9518 states to 9518 states and 10555 transitions.
[2020-05-30 21:24:50,294 INFO  L751         BuchiCegarLoop]: Abstraction has 9518 states and 10555 transitions.
[2020-05-30 21:24:50,294 INFO  L631         BuchiCegarLoop]: Abstraction has 9518 states and 10555 transitions.
[2020-05-30 21:24:50,294 INFO  L445         BuchiCegarLoop]: ======== Iteration 29============
[2020-05-30 21:24:50,294 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9518 states and 10555 transitions.
[2020-05-30 21:24:50,304 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:24:50,304 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:24:50,304 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:24:50,306 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:24:50,306 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:24:50,319 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:24:50,319 INFO  L82        PathProgramCache]: Analyzing trace with hash 513531354, now seen corresponding path program 1 times
[2020-05-30 21:24:50,320 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:24:50,340 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:24:50,489 INFO  L134       CoverageAnalysis]: Checked inductivity of 319 backedges. 39 proven. 75 refuted. 0 times theorem prover too weak. 205 trivial. 0 not checked.
[2020-05-30 21:24:50,489 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:24:50,489 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-30 21:24:50,490 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:24:50,490 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 21:24:50,490 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=20, Invalid=90, Unknown=0, NotChecked=0, Total=110
[2020-05-30 21:24:50,490 INFO  L87              Difference]: Start difference. First operand 9518 states and 10555 transitions. cyclomatic complexity: 1054 Second operand 11 states.
[2020-05-30 21:24:53,033 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:24:53,033 INFO  L93              Difference]: Finished difference Result 9654 states and 10715 transitions.
[2020-05-30 21:24:53,033 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-30 21:24:53,033 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9654 states and 10715 transitions.
[2020-05-30 21:24:53,055 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:24:53,076 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9654 states to 9652 states and 10711 transitions.
[2020-05-30 21:24:53,076 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 741
[2020-05-30 21:24:53,076 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 741
[2020-05-30 21:24:53,077 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9652 states and 10711 transitions.
[2020-05-30 21:24:53,082 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:24:53,082 INFO  L728         BuchiCegarLoop]: Abstraction has 9652 states and 10711 transitions.
[2020-05-30 21:24:53,088 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9652 states and 10711 transitions.
[2020-05-30 21:24:53,127 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9652 to 9521.
[2020-05-30 21:24:53,127 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9521 states.
[2020-05-30 21:24:53,138 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9521 states to 9521 states and 10561 transitions.
[2020-05-30 21:24:53,138 INFO  L751         BuchiCegarLoop]: Abstraction has 9521 states and 10561 transitions.
[2020-05-30 21:24:53,138 INFO  L631         BuchiCegarLoop]: Abstraction has 9521 states and 10561 transitions.
[2020-05-30 21:24:53,139 INFO  L445         BuchiCegarLoop]: ======== Iteration 30============
[2020-05-30 21:24:53,139 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9521 states and 10561 transitions.
[2020-05-30 21:24:53,148 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:24:53,148 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:24:53,148 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:24:53,149 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:24:53,150 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:24:53,154 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:24:53,154 INFO  L82        PathProgramCache]: Analyzing trace with hash 106283453, now seen corresponding path program 1 times
[2020-05-30 21:24:53,154 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:24:53,185 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:24:53,572 INFO  L134       CoverageAnalysis]: Checked inductivity of 319 backedges. 0 proven. 9 refuted. 0 times theorem prover too weak. 310 trivial. 0 not checked.
[2020-05-30 21:24:53,572 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:24:53,572 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [18] total 18
[2020-05-30 21:24:53,573 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:24:53,573 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2020-05-30 21:24:53,573 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=48, Invalid=294, Unknown=0, NotChecked=0, Total=342
[2020-05-30 21:24:53,573 INFO  L87              Difference]: Start difference. First operand 9521 states and 10561 transitions. cyclomatic complexity: 1056 Second operand 19 states.
[2020-05-30 21:24:58,595 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:24:58,595 INFO  L93              Difference]: Finished difference Result 9784 states and 10999 transitions.
[2020-05-30 21:24:58,595 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-05-30 21:24:58,595 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9784 states and 10999 transitions.
[2020-05-30 21:24:58,615 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:24:58,633 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9784 states to 9784 states and 10999 transitions.
[2020-05-30 21:24:58,634 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 769
[2020-05-30 21:24:58,634 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 769
[2020-05-30 21:24:58,634 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9784 states and 10999 transitions.
[2020-05-30 21:24:58,639 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:24:58,639 INFO  L728         BuchiCegarLoop]: Abstraction has 9784 states and 10999 transitions.
[2020-05-30 21:24:58,644 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9784 states and 10999 transitions.
[2020-05-30 21:24:58,683 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9784 to 9635.
[2020-05-30 21:24:58,683 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9635 states.
[2020-05-30 21:24:58,695 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9635 states to 9635 states and 10817 transitions.
[2020-05-30 21:24:58,695 INFO  L751         BuchiCegarLoop]: Abstraction has 9635 states and 10817 transitions.
[2020-05-30 21:24:58,695 INFO  L631         BuchiCegarLoop]: Abstraction has 9635 states and 10817 transitions.
[2020-05-30 21:24:58,695 INFO  L445         BuchiCegarLoop]: ======== Iteration 31============
[2020-05-30 21:24:58,695 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9635 states and 10817 transitions.
[2020-05-30 21:24:58,704 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:24:58,705 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:24:58,705 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:24:58,706 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:24:58,706 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:24:58,710 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:24:58,711 INFO  L82        PathProgramCache]: Analyzing trace with hash 544870210, now seen corresponding path program 1 times
[2020-05-30 21:24:58,711 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:24:58,738 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:24:58,901 INFO  L134       CoverageAnalysis]: Checked inductivity of 319 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 319 trivial. 0 not checked.
[2020-05-30 21:24:58,901 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:24:58,902 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-05-30 21:24:58,902 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:24:58,902 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:24:58,902 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=129, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:24:58,902 INFO  L87              Difference]: Start difference. First operand 9635 states and 10817 transitions. cyclomatic complexity: 1204 Second operand 13 states.
[2020-05-30 21:25:01,410 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:25:01,410 INFO  L93              Difference]: Finished difference Result 9733 states and 10895 transitions.
[2020-05-30 21:25:01,410 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-05-30 21:25:01,410 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9733 states and 10895 transitions.
[2020-05-30 21:25:01,430 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:25:01,450 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9733 states to 9733 states and 10895 transitions.
[2020-05-30 21:25:01,450 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 747
[2020-05-30 21:25:01,450 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 747
[2020-05-30 21:25:01,450 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9733 states and 10895 transitions.
[2020-05-30 21:25:01,455 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:25:01,455 INFO  L728         BuchiCegarLoop]: Abstraction has 9733 states and 10895 transitions.
[2020-05-30 21:25:01,460 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9733 states and 10895 transitions.
[2020-05-30 21:25:01,498 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9733 to 9619.
[2020-05-30 21:25:01,498 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9619 states.
[2020-05-30 21:25:01,510 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9619 states to 9619 states and 10758 transitions.
[2020-05-30 21:25:01,510 INFO  L751         BuchiCegarLoop]: Abstraction has 9619 states and 10758 transitions.
[2020-05-30 21:25:01,510 INFO  L631         BuchiCegarLoop]: Abstraction has 9619 states and 10758 transitions.
[2020-05-30 21:25:01,510 INFO  L445         BuchiCegarLoop]: ======== Iteration 32============
[2020-05-30 21:25:01,510 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9619 states and 10758 transitions.
[2020-05-30 21:25:01,520 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:25:01,520 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:25:01,520 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:25:01,521 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:25:01,521 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND FALSE  !(choice == 9)
[L4944]  COND FALSE  !(choice == 8)
[L4953]  COND FALSE  !(choice == 7)
[L4962]  COND FALSE  !(choice == 6)
[L4971]  COND FALSE  !(choice == 5)
[L4980]  COND FALSE  !(choice == 4)
[L4989]  COND FALSE  !(choice == 3)
[L4999]  COND FALSE  !(choice == 2)
[L5008]  COND FALSE  !(choice == 1)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:25:01,525 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:25:01,526 INFO  L82        PathProgramCache]: Analyzing trace with hash -898416923, now seen corresponding path program 1 times
[2020-05-30 21:25:01,526 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:25:01,578 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:25:02,257 INFO  L134       CoverageAnalysis]: Checked inductivity of 319 backedges. 91 proven. 9 refuted. 0 times theorem prover too weak. 219 trivial. 0 not checked.
[2020-05-30 21:25:02,257 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:25:02,257 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [32] total 32
[2020-05-30 21:25:02,258 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:25:02,258 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 33 interpolants.
[2020-05-30 21:25:02,258 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=87, Invalid=969, Unknown=0, NotChecked=0, Total=1056
[2020-05-30 21:25:02,258 INFO  L87              Difference]: Start difference. First operand 9619 states and 10758 transitions. cyclomatic complexity: 1161 Second operand 33 states.
[2020-05-30 21:25:28,988 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:25:28,988 INFO  L93              Difference]: Finished difference Result 20321 states and 22951 transitions.
[2020-05-30 21:25:28,988 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 54 states. 
[2020-05-30 21:25:28,988 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 20321 states and 22951 transitions.
[2020-05-30 21:25:29,031 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-05-30 21:25:29,088 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 20321 states to 20321 states and 22945 transitions.
[2020-05-30 21:25:29,088 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1558
[2020-05-30 21:25:29,089 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1558
[2020-05-30 21:25:29,089 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 20321 states and 22945 transitions.
[2020-05-30 21:25:29,102 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:25:29,102 INFO  L728         BuchiCegarLoop]: Abstraction has 20321 states and 22945 transitions.
[2020-05-30 21:25:29,112 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 20321 states and 22945 transitions.
[2020-05-30 21:25:29,216 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 20321 to 20007.
[2020-05-30 21:25:29,216 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20007 states.
[2020-05-30 21:25:29,244 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20007 states to 20007 states and 22545 transitions.
[2020-05-30 21:25:29,244 INFO  L751         BuchiCegarLoop]: Abstraction has 20007 states and 22545 transitions.
[2020-05-30 21:25:29,244 INFO  L631         BuchiCegarLoop]: Abstraction has 20007 states and 22545 transitions.
[2020-05-30 21:25:29,244 INFO  L445         BuchiCegarLoop]: ======== Iteration 33============
[2020-05-30 21:25:29,244 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20007 states and 22545 transitions.
[2020-05-30 21:25:29,266 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-05-30 21:25:29,266 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:25:29,266 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:25:29,268 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:25:29,268 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND TRUE   DType[to] == ValidatorAuction
[L4256]        CALL        call FallbackMethod_ValidatorAuction__success(to, from, amount);
[L2916]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2917]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2918]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2919]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L2919]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L2920]        COND FALSE  !(revert)
[L2925]                    gas := gas - 15;
[L2926]        CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L2926]        RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L2927]        COND FALSE  !(revert)
[L4256]        RET         call FallbackMethod_ValidatorAuction__success(to, from, amount);
[L4257]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:25:29,274 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:25:29,274 INFO  L82        PathProgramCache]: Analyzing trace with hash 1648999981, now seen corresponding path program 1 times
[2020-05-30 21:25:29,274 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:25:29,306 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:25:29,586 INFO  L134       CoverageAnalysis]: Checked inductivity of 359 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 359 trivial. 0 not checked.
[2020-05-30 21:25:29,586 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:25:29,586 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-05-30 21:25:29,587 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:25:29,587 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-30 21:25:29,587 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-30 21:25:29,588 INFO  L87              Difference]: Start difference. First operand 20007 states and 22545 transitions. cyclomatic complexity: 2580 Second operand 8 states.
[2020-05-30 21:25:29,790 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:25:29,790 INFO  L93              Difference]: Finished difference Result 20155 states and 22603 transitions.
[2020-05-30 21:25:29,790 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-05-30 21:25:29,791 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 20155 states and 22603 transitions.
[2020-05-30 21:25:29,828 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-05-30 21:25:29,880 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 20155 states to 19021 states and 21255 transitions.
[2020-05-30 21:25:29,880 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1415
[2020-05-30 21:25:29,881 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1455
[2020-05-30 21:25:29,881 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 19021 states and 21255 transitions.
[2020-05-30 21:25:29,893 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:25:29,893 INFO  L728         BuchiCegarLoop]: Abstraction has 19021 states and 21255 transitions.
[2020-05-30 21:25:29,903 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 19021 states and 21255 transitions.
[2020-05-30 21:25:30,005 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 19021 to 18853.
[2020-05-30 21:25:30,005 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 18853 states.
[2020-05-30 21:25:30,031 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 18853 states to 18853 states and 21074 transitions.
[2020-05-30 21:25:30,031 INFO  L751         BuchiCegarLoop]: Abstraction has 18853 states and 21074 transitions.
[2020-05-30 21:25:30,031 INFO  L631         BuchiCegarLoop]: Abstraction has 18853 states and 21074 transitions.
[2020-05-30 21:25:30,031 INFO  L445         BuchiCegarLoop]: ======== Iteration 34============
[2020-05-30 21:25:30,031 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 18853 states and 21074 transitions.
[2020-05-30 21:25:30,052 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-05-30 21:25:30,052 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:25:30,052 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:25:30,054 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:25:30,054 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:25:30,060 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:25:30,060 INFO  L82        PathProgramCache]: Analyzing trace with hash 559620069, now seen corresponding path program 1 times
[2020-05-30 21:25:30,061 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:25:30,092 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:25:30,300 INFO  L134       CoverageAnalysis]: Checked inductivity of 355 backedges. 32 proven. 0 refuted. 0 times theorem prover too weak. 323 trivial. 0 not checked.
[2020-05-30 21:25:30,300 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:25:30,300 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-05-30 21:25:30,301 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:25:30,301 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:25:30,301 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=107, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:25:30,301 INFO  L87              Difference]: Start difference. First operand 18853 states and 21074 transitions. cyclomatic complexity: 2263 Second operand 12 states.
[2020-05-30 21:25:32,247 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:25:32,247 INFO  L93              Difference]: Finished difference Result 20615 states and 23281 transitions.
[2020-05-30 21:25:32,247 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-30 21:25:32,247 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 20615 states and 23281 transitions.
[2020-05-30 21:25:32,287 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 20
[2020-05-30 21:25:32,344 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 20615 states to 20615 states and 23281 transitions.
[2020-05-30 21:25:32,344 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1581
[2020-05-30 21:25:32,345 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1581
[2020-05-30 21:25:32,345 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 20615 states and 23281 transitions.
[2020-05-30 21:25:32,359 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:25:32,359 INFO  L728         BuchiCegarLoop]: Abstraction has 20615 states and 23281 transitions.
[2020-05-30 21:25:32,369 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 20615 states and 23281 transitions.
[2020-05-30 21:25:32,487 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 20615 to 20510.
[2020-05-30 21:25:32,487 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20510 states.
[2020-05-30 21:25:32,517 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20510 states to 20510 states and 23160 transitions.
[2020-05-30 21:25:32,517 INFO  L751         BuchiCegarLoop]: Abstraction has 20510 states and 23160 transitions.
[2020-05-30 21:25:32,518 INFO  L631         BuchiCegarLoop]: Abstraction has 20510 states and 23160 transitions.
[2020-05-30 21:25:32,518 INFO  L445         BuchiCegarLoop]: ======== Iteration 35============
[2020-05-30 21:25:32,518 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20510 states and 23160 transitions.
[2020-05-30 21:25:32,541 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 20
[2020-05-30 21:25:32,541 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:25:32,541 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:25:32,543 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:25:32,543 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:25:32,548 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:25:32,548 INFO  L82        PathProgramCache]: Analyzing trace with hash -108248751, now seen corresponding path program 1 times
[2020-05-30 21:25:32,549 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:25:32,582 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:25:32,801 INFO  L134       CoverageAnalysis]: Checked inductivity of 355 backedges. 15 proven. 0 refuted. 0 times theorem prover too weak. 340 trivial. 0 not checked.
[2020-05-30 21:25:32,801 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:25:32,802 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-05-30 21:25:32,802 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:25:32,802 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-05-30 21:25:32,802 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=76, Invalid=164, Unknown=0, NotChecked=0, Total=240
[2020-05-30 21:25:32,802 INFO  L87              Difference]: Start difference. First operand 20510 states and 23160 transitions. cyclomatic complexity: 2693 Second operand 16 states.
[2020-05-30 21:25:36,777 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:25:36,777 INFO  L93              Difference]: Finished difference Result 25087 states and 29271 transitions.
[2020-05-30 21:25:36,777 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-05-30 21:25:36,777 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 25087 states and 29271 transitions.
[2020-05-30 21:25:36,852 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 40
[2020-05-30 21:25:36,938 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 25087 states to 24711 states and 28821 transitions.
[2020-05-30 21:25:36,939 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2371
[2020-05-30 21:25:36,940 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2371
[2020-05-30 21:25:36,940 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 24711 states and 28821 transitions.
[2020-05-30 21:25:36,959 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:25:36,959 INFO  L728         BuchiCegarLoop]: Abstraction has 24711 states and 28821 transitions.
[2020-05-30 21:25:36,972 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 24711 states and 28821 transitions.
[2020-05-30 21:25:37,181 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 24711 to 20510.
[2020-05-30 21:25:37,181 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20510 states.
[2020-05-30 21:25:37,210 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20510 states to 20510 states and 23144 transitions.
[2020-05-30 21:25:37,211 INFO  L751         BuchiCegarLoop]: Abstraction has 20510 states and 23144 transitions.
[2020-05-30 21:25:37,211 INFO  L631         BuchiCegarLoop]: Abstraction has 20510 states and 23144 transitions.
[2020-05-30 21:25:37,211 INFO  L445         BuchiCegarLoop]: ======== Iteration 36============
[2020-05-30 21:25:37,211 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20510 states and 23144 transitions.
[2020-05-30 21:25:37,233 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 20
[2020-05-30 21:25:37,233 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:25:37,233 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:25:37,235 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:25:37,235 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:25:37,241 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:25:37,241 INFO  L82        PathProgramCache]: Analyzing trace with hash -1358143418, now seen corresponding path program 1 times
[2020-05-30 21:25:37,241 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:25:37,285 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 21:25:37,336 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 21:25:37,571 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:25:37,571 INFO  L82        PathProgramCache]: Analyzing trace with hash 528245493, now seen corresponding path program 1 times
[2020-05-30 21:25:37,571 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:25:37,580 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 21:25:37,589 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 21:25:37,613 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:25:37,614 INFO  L82        PathProgramCache]: Analyzing trace with hash 834751802, now seen corresponding path program 1 times
[2020-05-30 21:25:37,614 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:25:37,649 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:25:37,991 INFO  L134       CoverageAnalysis]: Checked inductivity of 361 backedges. 32 proven. 2 refuted. 0 times theorem prover too weak. 327 trivial. 0 not checked.
[2020-05-30 21:25:37,991 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:25:37,991 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 21:25:37,992 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:25:37,992 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=133, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:25:37,992 INFO  L87              Difference]: Start difference. First operand 20510 states and 23144 transitions. cyclomatic complexity: 2677 Second operand 13 states.
[2020-05-30 21:25:42,933 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:25:42,933 INFO  L93              Difference]: Finished difference Result 23750 states and 27182 transitions.
[2020-05-30 21:25:42,933 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-05-30 21:25:42,933 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 23750 states and 27182 transitions.
[2020-05-30 21:25:43,005 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 36
[2020-05-30 21:25:43,076 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 23750 states to 23478 states and 26870 transitions.
[2020-05-30 21:25:43,076 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1708
[2020-05-30 21:25:43,077 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1708
[2020-05-30 21:25:43,077 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 23478 states and 26870 transitions.
[2020-05-30 21:25:43,095 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:25:43,096 INFO  L728         BuchiCegarLoop]: Abstraction has 23478 states and 26870 transitions.
[2020-05-30 21:25:43,114 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 23478 states and 26870 transitions.
[2020-05-30 21:25:43,259 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 23478 to 23394.
[2020-05-30 21:25:43,259 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 23394 states.
[2020-05-30 21:25:43,297 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 23394 states to 23394 states and 26767 transitions.
[2020-05-30 21:25:43,298 INFO  L751         BuchiCegarLoop]: Abstraction has 23394 states and 26767 transitions.
[2020-05-30 21:25:43,298 INFO  L631         BuchiCegarLoop]: Abstraction has 23394 states and 26767 transitions.
[2020-05-30 21:25:43,298 INFO  L445         BuchiCegarLoop]: ======== Iteration 37============
[2020-05-30 21:25:43,298 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 23394 states and 26767 transitions.
[2020-05-30 21:25:43,322 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 36
[2020-05-30 21:25:43,322 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:25:43,322 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:25:43,324 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:25:43,324 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND FALSE  !(choice == 9)
[L4944]  COND FALSE  !(choice == 8)
[L4953]  COND FALSE  !(choice == 7)
[L4962]  COND FALSE  !(choice == 6)
[L4971]  COND FALSE  !(choice == 5)
[L4980]  COND FALSE  !(choice == 4)
[L4989]  COND FALSE  !(choice == 3)
[L4999]  COND FALSE  !(choice == 2)
[L5008]  COND FALSE  !(choice == 1)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:25:43,328 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:25:43,328 INFO  L82        PathProgramCache]: Analyzing trace with hash -1358143418, now seen corresponding path program 2 times
[2020-05-30 21:25:43,329 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:25:43,373 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 21:25:43,423 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 21:25:43,557 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:25:43,558 INFO  L82        PathProgramCache]: Analyzing trace with hash 664534538, now seen corresponding path program 1 times
[2020-05-30 21:25:43,558 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:25:43,560 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 21:25:43,561 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 21:25:43,564 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:25:43,564 INFO  L82        PathProgramCache]: Analyzing trace with hash -1737127387, now seen corresponding path program 1 times
[2020-05-30 21:25:43,565 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:25:43,604 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 21:25:43,650 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 149 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.003s / 0.005s total
Resizing node table from 9181 to 18353
Garbage collection #1: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #2: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #3: 547 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 547 to 1093
Garbage collection #4: 1093 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1093 to 2179
Garbage collection #5: 2179 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2179 to 4357
Garbage collection #6: 4357 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 4357 to 8713
Garbage collection #7: 8713 nodes / 0 free / 0.002s / 0.004s total
Resizing node table from 8713 to 17419
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
[2020-05-30 21:25:44,293 WARN  L188               SmtUtils]: Spent 115.00 ms on a formula simplification. DAG size of input: 166 DAG size of output: 151
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
[2020-05-30 21:25:44,545 WARN  L188               SmtUtils]: Spent 104.00 ms on a formula simplification. DAG size of input: 195 DAG size of output: 192
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-05-30 21:25:44,917 WARN  L188               SmtUtils]: Spent 129.00 ms on a formula simplification that was a NOOP. DAG size: 395
Garbage collection #1: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #2: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #3: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #4: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #5: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #6: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
Garbage collection #7: 9883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9883 to 19763
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8543 to 17077
[2020-05-30 21:25:45,033 WARN  L188               SmtUtils]: Spent 109.00 ms on a formula simplification that was a NOOP. DAG size: 357
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
[2020-05-30 21:25:45,373 WARN  L188               SmtUtils]: Spent 218.00 ms on a formula simplification. DAG size of input: 298 DAG size of output: 277
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
[2020-05-30 21:25:45,551 WARN  L188               SmtUtils]: Spent 149.00 ms on a formula simplification that was a NOOP. DAG size: 431
Garbage collection #1: 179 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 179 to 353
Garbage collection #2: 353 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 353 to 701
Garbage collection #3: 701 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 701 to 1399
Garbage collection #4: 1399 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1399 to 2797
Garbage collection #5: 2797 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2797 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 11177 to 22349
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
[2020-05-30 21:25:45,884 WARN  L188               SmtUtils]: Spent 119.00 ms on a formula simplification. DAG size of input: 277 DAG size of output: 266
Garbage collection #1: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
[2020-05-30 21:25:46,049 WARN  L188               SmtUtils]: Spent 141.00 ms on a formula simplification that was a NOOP. DAG size: 428
Garbage collection #1: 179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 179 to 353
Garbage collection #2: 353 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 353 to 701
Garbage collection #3: 701 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 701 to 1399
Garbage collection #4: 1399 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1399 to 2797
Garbage collection #5: 2797 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2797 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11177 to 22349
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
[2020-05-30 21:25:46,664 WARN  L188               SmtUtils]: Spent 343.00 ms on a formula simplification. DAG size of input: 312 DAG size of output: 294
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
[2020-05-30 21:25:47,011 WARN  L188               SmtUtils]: Spent 144.00 ms on a formula simplification. DAG size of input: 197 DAG size of output: 196
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
[2020-05-30 21:25:47,262 WARN  L188               SmtUtils]: Spent 198.00 ms on a formula simplification that was a NOOP. DAG size: 389
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 9181 to 18353
[2020-05-30 21:25:47,465 WARN  L188               SmtUtils]: Spent 199.00 ms on a formula simplification that was a NOOP. DAG size: 363
[2020-05-30 21:25:47,974 WARN  L188               SmtUtils]: Spent 507.00 ms on a formula simplification. DAG size of input: 407 DAG size of output: 398
Garbage collection #1: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #2: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #3: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #4: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #5: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #6: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
Garbage collection #7: 8713 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8713 to 17419
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
[2020-05-30 21:25:48,088 WARN  L188               SmtUtils]: Spent 107.00 ms on a formula simplification that was a NOOP. DAG size: 285
[2020-05-30 21:25:48,469 WARN  L188               SmtUtils]: Spent 379.00 ms on a formula simplification that was a NOOP. DAG size: 531
Garbage collection #1: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #2: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #3: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #4: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #5: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #6: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
Garbage collection #7: 13313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13313 to 26597
[2020-05-30 21:25:48,716 WARN  L188               SmtUtils]: Spent 239.00 ms on a formula simplification that was a NOOP. DAG size: 431
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
[2020-05-30 21:25:49,015 WARN  L188               SmtUtils]: Spent 139.00 ms on a formula simplification. DAG size of input: 305 DAG size of output: 288
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1013 to 2017
[2020-05-30 21:25:49,196 WARN  L188               SmtUtils]: Spent 152.00 ms on a formula simplification that was a NOOP. DAG size: 442
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3331 to 6661
[2020-05-30 21:25:49,808 WARN  L188               SmtUtils]: Spent 182.00 ms on a formula simplification. DAG size of input: 319 DAG size of output: 305
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
[2020-05-30 21:25:50,041 WARN  L188               SmtUtils]: Spent 186.00 ms on a formula simplification that was a NOOP. DAG size: 458
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
[2020-05-30 21:25:50,161 WARN  L188               SmtUtils]: Spent 114.00 ms on a formula simplification that was a NOOP. DAG size: 372
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
[2020-05-30 21:25:50,412 WARN  L188               SmtUtils]: Spent 183.00 ms on a formula simplification. DAG size of input: 326 DAG size of output: 321
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
[2020-05-30 21:25:50,740 WARN  L188               SmtUtils]: Spent 325.00 ms on a formula simplification. DAG size of input: 294 DAG size of output: 294
[2020-05-30 21:25:51,249 WARN  L188               SmtUtils]: Spent 506.00 ms on a formula simplification. DAG size of input: 385 DAG size of output: 378
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #7: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
[2020-05-30 21:25:51,674 WARN  L188               SmtUtils]: Spent 314.00 ms on a formula simplification that was a NOOP. DAG size: 426
Garbage collection #1: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #2: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #3: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #4: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #5: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #6: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
Garbage collection #7: 10559 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 10559 to 21107
[2020-05-30 21:25:52,362 WARN  L188               SmtUtils]: Spent 675.00 ms on a formula simplification. DAG size of input: 330 DAG size of output: 325
[2020-05-30 21:25:53,026 WARN  L188               SmtUtils]: Spent 663.00 ms on a formula simplification. DAG size of input: 344 DAG size of output: 338
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
[2020-05-30 21:25:53,361 WARN  L188               SmtUtils]: Spent 322.00 ms on a formula simplification. DAG size of input: 218 DAG size of output: 213
[2020-05-30 21:25:53,671 WARN  L188               SmtUtils]: Spent 309.00 ms on a formula simplification that was a NOOP. DAG size: 418
Garbage collection #1: 167 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 167 to 331
Garbage collection #2: 331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 331 to 661
Garbage collection #3: 661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 661 to 1321
Garbage collection #4: 1321 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1321 to 2633
Garbage collection #5: 2633 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2633 to 5261
Garbage collection #6: 5261 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5261 to 10513
Garbage collection #7: 10513 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 10513 to 21023
[2020-05-30 21:25:54,148 WARN  L188               SmtUtils]: Spent 467.00 ms on a formula simplification. DAG size of input: 320 DAG size of output: 311
[2020-05-30 21:25:54,350 WARN  L188               SmtUtils]: Spent 200.00 ms on a formula simplification. DAG size of input: 333 DAG size of output: 320
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
[2020-05-30 21:25:54,507 WARN  L188               SmtUtils]: Spent 126.00 ms on a formula simplification that was a NOOP. DAG size: 414
Garbage collection #1: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #2: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #3: 673 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 673 to 1327
Garbage collection #4: 1327 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1327 to 2647
Garbage collection #5: 2647 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2647 to 5281
Garbage collection #6: 5281 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 5281 to 10559
Garbage collection #7: 10559 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 10559 to 21107
[2020-05-30 21:25:54,759 WARN  L188               SmtUtils]: Spent 176.00 ms on a formula simplification. DAG size of input: 353 DAG size of output: 338
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
[2020-05-30 21:25:54,970 WARN  L188               SmtUtils]: Spent 176.00 ms on a formula simplification that was a NOOP. DAG size: 466
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
[2020-05-30 21:25:55,083 WARN  L188               SmtUtils]: Spent 108.00 ms on a formula simplification that was a NOOP. DAG size: 362
[2020-05-30 21:28:00,197 WARN  L188               SmtUtils]: Spent 2.09 m on a formula simplification. DAG size of input: 2166 DAG size of output: 2098
Garbage collection #1: 937 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 937 to 1873
Garbage collection #2: 1873 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1873 to 3739
Garbage collection #3: 3739 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3739 to 7477
Garbage collection #4: 7477 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 7477 to 14951
Garbage collection #5: 14951 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 14951 to 29881
Garbage collection #6: 29881 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 29881 to 59753
Garbage collection #7: 59753 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 59753 to 109751
Garbage collection #8: 109751 nodes / 0 free / 0.001s / 0.004s total
Resizing node table from 109751 to 159739
Garbage collection #9: 159739 nodes / 0 free / 0.003s / 0.007s total
Resizing node table from 159739 to 209719
Garbage collection #10: 209719 nodes / 0 free / 0.003s / 0.01s total
Resizing node table from 209719 to 259717
Garbage collection #11: 259717 nodes / 0 free / 0.003s / 0.013s total
Resizing node table from 259717 to 309713
Garbage collection #12: 309713 nodes / 0 free / 0.005s / 0.018s total
Resizing node table from 309713 to 359713
Garbage collection #13: 359713 nodes / 0 free / 0.005s / 0.023s total
Resizing node table from 359713 to 409711
Garbage collection #14: 409711 nodes / 0 free / 0.006s / 0.029s total
Resizing node table from 409711 to 459703
Garbage collection #1: 151 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 151 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
[2020-05-30 21:28:02,595 WARN  L188               SmtUtils]: Spent 2.13 s on a formula simplification that was a NOOP. DAG size: 497
[2020-05-30 21:28:05,240 WARN  L188               SmtUtils]: Spent 2.61 s on a formula simplification that was a NOOP. DAG size: 638
Garbage collection #1: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #2: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #3: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #4: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #5: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #6: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
Garbage collection #7: 13313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13313 to 26597
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
[2020-05-30 21:28:07,043 WARN  L188               SmtUtils]: Spent 1.79 s on a formula simplification that was a NOOP. DAG size: 497
[2020-05-30 21:28:11,673 WARN  L188               SmtUtils]: Spent 4.63 s on a formula simplification. DAG size of input: 642 DAG size of output: 638
Garbage collection #1: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #2: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #3: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #4: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #5: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #6: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
Garbage collection #7: 13313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13313 to 26597
Garbage collection #1: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #2: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #3: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #4: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #5: 3331 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3331 to 6661
Garbage collection #6: 6661 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 6661 to 13313
Garbage collection #7: 13313 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 13313 to 26597
[2020-05-30 21:28:13,838 WARN  L188               SmtUtils]: Spent 2.16 s on a formula simplification that was a NOOP. DAG size: 630
[2020-05-30 21:28:13,886 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 21:28:13,901 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 30.05 09:28:13 BasicIcfg
[2020-05-30 21:28:13,901 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-05-30 21:28:13,902 INFO  L168              Benchmark]: Toolchain (without parser) took 267136.47 ms. Allocated memory was 514.9 MB in the beginning and 5.3 GB in the end (delta: 4.7 GB). Free memory was 453.4 MB in the beginning and 3.6 GB in the end (delta: -3.1 GB). Peak memory consumption was 4.9 GB. Max. memory is 15.3 GB.
[2020-05-30 21:28:13,902 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.12 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-05-30 21:28:13,903 INFO  L168              Benchmark]: Boogie Preprocessor took 84.04 ms. Allocated memory is still 514.9 MB. Free memory was 453.4 MB in the beginning and 444.0 MB in the end (delta: 9.4 MB). Peak memory consumption was 9.4 MB. Max. memory is 15.3 GB.
[2020-05-30 21:28:13,903 INFO  L168              Benchmark]: UtopiaSpecLang took 54.03 ms. Allocated memory is still 514.9 MB. Free memory was 444.0 MB in the beginning and 437.2 MB in the end (delta: 6.7 MB). Peak memory consumption was 6.7 MB. Max. memory is 15.3 GB.
[2020-05-30 21:28:13,903 INFO  L168              Benchmark]: Boogie Printer took 14.39 ms. Allocated memory is still 514.9 MB. Free memory was 437.2 MB in the beginning and 434.5 MB in the end (delta: 2.7 MB). Peak memory consumption was 2.7 MB. Max. memory is 15.3 GB.
[2020-05-30 21:28:13,904 INFO  L168              Benchmark]: RCFGBuilder took 651.79 ms. Allocated memory is still 514.9 MB. Free memory was 434.5 MB in the beginning and 427.0 MB in the end (delta: 7.5 MB). Peak memory consumption was 93.2 MB. Max. memory is 15.3 GB.
[2020-05-30 21:28:13,904 INFO  L168              Benchmark]: UtopiaLTL2Aut took 43.70 ms. Allocated memory is still 514.9 MB. Free memory was 427.0 MB in the beginning and 423.8 MB in the end (delta: 3.1 MB). Peak memory consumption was 3.1 MB. Max. memory is 15.3 GB.
[2020-05-30 21:28:13,904 INFO  L168              Benchmark]: BÃ¼chi Program Product took 3273.69 ms. Allocated memory was 514.9 MB in the beginning and 997.2 MB in the end (delta: 482.3 MB). Free memory was 423.8 MB in the beginning and 271.9 MB in the end (delta: 152.0 MB). Peak memory consumption was 634.3 MB. Max. memory is 15.3 GB.
[2020-05-30 21:28:13,904 INFO  L168              Benchmark]: BlockEncodingV2 took 351.45 ms. Allocated memory was 997.2 MB in the beginning and 1.0 GB in the end (delta: 6.8 MB). Free memory was 271.9 MB in the beginning and 645.9 MB in the end (delta: -374.0 MB). Peak memory consumption was 41.2 MB. Max. memory is 15.3 GB.
[2020-05-30 21:28:13,906 INFO  L168              Benchmark]: BuchiAutomizer took 262660.52 ms. Allocated memory was 1.0 GB in the beginning and 5.3 GB in the end (delta: 4.3 GB). Free memory was 645.9 MB in the beginning and 3.6 GB in the end (delta: -2.9 GB). Peak memory consumption was 4.6 GB. Max. memory is 15.3 GB.
[2020-05-30 21:28:13,908 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    10890 locations, 27331 edges
  - StatisticsResult: Encoded RCFG
    10806 locations, 26987 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.12 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 84.04 ms. Allocated memory is still 514.9 MB. Free memory was 453.4 MB in the beginning and 444.0 MB in the end (delta: 9.4 MB). Peak memory consumption was 9.4 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 54.03 ms. Allocated memory is still 514.9 MB. Free memory was 444.0 MB in the beginning and 437.2 MB in the end (delta: 6.7 MB). Peak memory consumption was 6.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 14.39 ms. Allocated memory is still 514.9 MB. Free memory was 437.2 MB in the beginning and 434.5 MB in the end (delta: 2.7 MB). Peak memory consumption was 2.7 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 651.79 ms. Allocated memory is still 514.9 MB. Free memory was 434.5 MB in the beginning and 427.0 MB in the end (delta: 7.5 MB). Peak memory consumption was 93.2 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 43.70 ms. Allocated memory is still 514.9 MB. Free memory was 427.0 MB in the beginning and 423.8 MB in the end (delta: 3.1 MB). Peak memory consumption was 3.1 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 3273.69 ms. Allocated memory was 514.9 MB in the beginning and 997.2 MB in the end (delta: 482.3 MB). Free memory was 423.8 MB in the beginning and 271.9 MB in the end (delta: 152.0 MB). Peak memory consumption was 634.3 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 351.45 ms. Allocated memory was 997.2 MB in the beginning and 1.0 GB in the end (delta: 6.8 MB). Free memory was 271.9 MB in the beginning and 645.9 MB in the end (delta: -374.0 MB). Peak memory consumption was 41.2 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 262660.52 ms. Allocated memory was 1.0 GB in the beginning and 5.3 GB in the end (delta: 4.3 GB). Free memory was 645.9 MB in the beginning and 3.6 GB in the end (delta: -2.9 GB). Peak memory consumption was 4.6 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    4 locations, 9 edges
  - StatisticsResult: Initial RCFG
    2387 locations, 2908 edges
  - StatisticsResult: BuchiProgram size
    10890 locations, 27331 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 36 terminating modules (36 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.36 modules have a trivial ranking function, the largest among these consists of 33 locations. The remainder module has 23394 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 262.5s and 37 iterations.  TraceHistogramMax:10. Analysis of lassos took 157.6s. Construction of modules took 73.9s. BÃ¼chi inclusion checks took 25.0s. Highest rank in rank-based complementation 0. Minimization of det autom 36. Minimization of nondet autom 0. Automata minimization 2.9s AutomataMinimizationTime, 36 MinimizatonAttempts, 12079 StatesRemovedByMinimization, 30 NontrivialMinimizations. Non-live state removal took 1.8s Buchi closure took 0.0s. Biggest automaton had 23394 states and ocurred in iteration 36.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 283165 SDtfs, 279063 SDslu, 833894 SDs, 0 SdLazy, 1260729 SolverSat, 37832 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 73.9s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc1 concLT0 SILN0 SILU35 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(115792089237316195423570985008687907853269984665640564039457584007913129639964) = (new ValidatorAuction).value(115792089237316195423570985008687907853269984665640564039457584007913129639958)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639971, _startPriceInWei : 0, _auctionDurationInDays : 1, _minimalNumberOfParticipants : 1, _maximalNumberOfParticipants : 2, _depositLocker : 115792089237316195423570985008687907853269984665640564039457584007913129639964});
[L752]               havoc __exception;
[L753]               revert := false;
[L754]   COND FALSE  !(__exception)
[L796]   CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]              assume msgsender_MSG != null;
[L1828]              Balance[this] := 0;
[L1829]              owner_Ownable[this] := null;
[L1830]              owner_Ownable[this] := msgsender_MSG;
[L1848]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  COND FALSE  !(revert)
[L2878]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L2884]  CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2737]              auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]              startPrice_ValidatorAuction[this] := 0;
[L2739]              minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]              maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]  CALL        call __var_10 := FreshRefGenerator__success();
[L1807]              havoc newRef;
[L1808]              assume Alloc[newRef] == false;
[L1809]              Alloc[newRef] := true;
[L1810]              assume newRef != null;
[L2741]  RET         call __var_10 := FreshRefGenerator__success();
[L2742]  COND FALSE  !(revert)
[L2747]              whitelist_ValidatorAuction[this] := __var_10;
[L2748]              M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]  CALL        call __var_11 := FreshRefGenerator__success();
[L1807]              havoc newRef;
[L1808]              assume Alloc[newRef] == false;
[L1809]              Alloc[newRef] := true;
[L1810]              assume newRef != null;
[L2749]  RET         call __var_11 := FreshRefGenerator__success();
[L2750]  COND FALSE  !(revert)
[L2755]              bids_ValidatorAuction[this] := __var_11;
[L2756]              M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]              sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]  CALL        call __var_12 := FreshRefGenerator__success();
[L1807]              havoc newRef;
[L1808]              assume Alloc[newRef] == false;
[L1809]              Alloc[newRef] := true;
[L1810]              assume newRef != null;
[L2758]  RET         call __var_12 := FreshRefGenerator__success();
[L2759]  COND FALSE  !(revert)
[L2764]              bidders_ValidatorAuction[this] := __var_12;
[L2765]              assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]              startTime_ValidatorAuction[this] := 0;
[L2767]              closeTime_ValidatorAuction[this] := 0;
[L2768]              lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]              assume _auctionDurationInDays_s578 >= 0;
[L2770]  COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]              assume _auctionDurationInDays_s578 >= 0;
[L2777]  COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]              assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]  COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]              assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]  COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]              assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]              assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]  COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]              assume _startPriceInWei_s578 >= 0;
[L2806]  COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]              assume startPrice_ValidatorAuction[this] >= 0;
[L2813]              assume _startPriceInWei_s578 >= 0;
[L2814]              startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]              assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]              assume _auctionDurationInDays_s578 >= 0;
[L2817]              auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]              assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]              assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]              maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]              assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]              assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]              minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]              depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]              assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]              __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]              lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]              assume __var_9 >= 0;
[L2829]              assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]              auctionState_ValidatorAuction[this] := 0;
[L2884]  RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]  COND FALSE  !(revert)
[L796]   RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]               assume !revert && gas >= 0;
[L5037]  RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
ValidatorAuction(115792089237316195423570985008687907853269984665640564039457584007913129639964).addToWhitelist.gas(3979002)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639971, addressesToWhitelist : 115792089237316195423570985008687907853269984665640564039457584007913129639955});
[L1057]              havoc __exception;
[L1058]              revert := false;
[L1059]  COND FALSE  !(__exception)
[L1101]  CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]              gas := gas - 4257;
[L4531]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]  COND FALSE  !(revert)
[L3521]  CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]              gas := gas - 10516;
[L4651]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]  RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]  COND FALSE  !(revert)
[L3527]              gas := gas - 116;
[L3528]              assume i_s850 >= 0;
[L3529]              assume Length[addressesToWhitelist_s852] >= 0;
[L3530]              gas := gas - 11;
[L3531]              assume i_s850 >= 0;
[L3532]              i_s850 := 0;
[L3533]  COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]              gas := gas - 21095;
[L3536]              assume i_s850 >= 0;
[L3537]              M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]              assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]              gas := gas - 19;
[L3540]              assume i_s850 >= 0;
[L3541]              i_s850 := i_s850 + 1;
[L3542]              assume i_s850 >= 0;
[L3543]  COND FALSE  !(gas < 0)
[L3533]  COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]  RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]              assume !revert && gas >= 0;
[L4996]  RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
ValidatorAuction(115792089237316195423570985008687907853269984665640564039457584007913129639964).startAuction.gas(3979003)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639971});
[L877]               havoc __exception;
[L878]               revert := false;
[L879]   COND FALSE  !(__exception)
[L921]   CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]              gas := gas - 4257;
[L4531]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3271]  CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]              gas := gas - 10516;
[L4651]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]  RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]  COND FALSE  !(revert)
[L3277]              gas := gas - 3900;
[L3278]              assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]              __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]  COND FALSE  !(!__var_16)
[L3286]              gas := gas - 20287;
[L3287]              auctionState_ValidatorAuction[this] := 1;
[L3288]              gas := gas - 20013;
[L3289]              assume startTime_ValidatorAuction[this] >= 0;
[L3290]              assume now >= 0;
[L3291]              startTime_ValidatorAuction[this] := now;
[L3292]              assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]   RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]               assume !revert && gas >= 0;
[L4968]  RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
ValidatorAuction(115792089237316195423570985008687907853269984665640564039457584007913129639964).bid.gas(3979004).value(115792089237316195423570985008687907853269984665640564039457584007913129639948)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639962});
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
ValidatorAuction(115792089237316195423570985008687907853269984665640564039457584007913129639964).closeAuction.gas(3979005)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639966});
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
ValidatorAuction(115792089237316195423570985008687907853269984665640564039457584007913129639964).depositBids.gas(3979006)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639962});
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
ValidatorAuction(115792089237316195423570985008687907853269984665640564039457584007913129639964).withdraw.gas(3979001)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639962});
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);

Loop:

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
